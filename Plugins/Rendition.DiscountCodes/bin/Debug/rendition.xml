<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rendition</name>
    </assembly>
    <members>
        <member name="T:Rendition.Admin">
            <summary>
            This contains all the private Admin interaction with the site
            </summary>
        </member>
        <member name="F:Rendition.Admin.LoremIpsum">
            <summary>
            Stub text value
            1 - unus, una, unum
            2 - duo, duae, duo
            3 - tres, tres, tria
            4 - quattuor
            5 - quinque
            6 - sex
            7 - septem
            8 - octo
            9 - novem
            10 - decem
            11 - undecim
            12 - duodecim
            13 - tredecim
            14 - quattuordecim
            15 - quindecim
            16 - sedecim
            17 - septendecim
            18 - duodeviginti
            19 - undeviginti
            20 - viginti
            21 - viginti unus
            30 - triginta
            40 - quadraginta
            50 - quinquaginta
            60 - sexaginta
            70 - septuaginta
            80 - octoginta
            90 - nonaginta
            100 - centum
            200 - ducenti, ducentae, ducenta
            300 - trecenti, trecentae, trecenta
            400 - quadrigenti, quadrigentae, quadrigenta(*)
            500 - quingenti, quingentae, quingenta
            600 - sescenti, sescentae, sescenta
            700 - septingenti, septingentae, septingenta
            800 - octingenti, octingentae, octingenta
            900 - nongenti, nongentae, nongenta
            1000 - mille
            2000 - duo milia
            </summary>
        </member>
        <member name="M:Rendition.Admin.BarCode(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Barcodes from http://www.codeproject.com/KB/graphics/BarcodeLibrary.aspx by Brad Barnhill
            License: http://www.codeproject.com/info/cpol10.aspx GPL (*CPOL)
            </summary>
            <param name="barType">Type of the bar.</param>
            <param name="barValue">The bar value.</param>
            <param name="BarOptions">The bar options.</param>
            <returns>Bitmap image</returns>
        </member>
        <member name="M:Rendition.Admin.GetNewAccountNumber(System.String)">
            <summary>
            Gets a new account number.
            </summary>
            <param name="accountType">Type of the account.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.CopyMenuDescendants(System.Guid,System.Guid,System.Int32@)">
            <summary>
            Copies the menu descendants.  Used by pasteMenu.
            </summary>
            <param name="targetMenuId">The target menu id.</param>
            <param name="sourceMenuId">The source menu id.</param>
        </member>
        <member name="M:Rendition.Admin.PasteMenu(System.String,System.String,System.Boolean)">
            <summary>
            Copies a menu to a new menu and optionally includes the menu's children.
            </summary>
            <param name="menuId">The menu id.</param>
            <param name="parentMenuId">The parent menu id.</param>
            <param name="includeChildMenus">if set to <c>true</c> [include child menus].</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.GetLocalIISSiteList">
            <summary>
            Gets the local IIS site list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.GetIisSiteList(System.String,System.String,System.String,System.String)">
            <summary>
            Gets the IIS site list for a server.
            </summary>
            <param name="serverHost">The server host name or IP Address running IIS.</param>
            <param name="userName">The username.</param>
            <param name="password">The password.</param>
            <param name="domain">The domain.</param>
            <returns>
            {error:0,desc:"error description",sites:[{siteId:"123",name:"Blah",...},...]}.
            </returns>
        </member>
        <member name="M:Rendition.Admin.GridSchemaUpdate(System.Int64,System.String,System.String,System.String,System.Int64,System.Int64)">
            <summary>
            updates the Grids schema for the current user.
            </summary>
            <param name="objectId">The object id.</param>
            <param name="visibilityCSV">The visibility CSV.</param>
            <param name="orderCSV">The order CSV.</param>
            <param name="sizeCSV">The size CSV.</param>
            <param name="orderBy">The order by.</param>
            <param name="orderDirection">The order direction.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.SqlCommand(System.String)">
            <summary>
            SQL command.
            </summary>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.GetSqlArray(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets a SQL array.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.DataSet(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.List{System.Object},System.String,System.Boolean,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Auto pagination fuction for rendtiion.grid
            </summary>
            <param name="objectName">Name of the object.</param>
            <param name="suffix">Where clause or any other suffix that would come after the table and table options.</param>
            <param name="_from">Row to fetch from.</param>
            <param name="_to">Row to fetch to.</param>
            <param name="searchSuffix">A where clause that will return a row number list of rows in the primary query matching this where clause.</param>
            <param name="aggregateColumns">Which columns to aggregate in an aggregate query.</param>
            <param name="selectedRows">Which rows are selected.</param>
            <param name="outputType">What type of output?</param>
            <param name="includeSchema">if set to <c>true</c> also returns table schema including width and position of each column on a per user basis.</param>
            <param name="_checksum">Checksum of the last query.  Each time the table changes the checksum (sum(VerCol)) of the table changes.</param>
            <param name="deleteSelection">if set to <c>true</c> [delete selection].</param>
            <param name="orderBy_override">Override the user/default schema ordering for this table.</param>
            <param name="orderDirection_override">When overriding the order by direction, which order: asc, or desc.</param>
            <returns>
            Complex JSON for Rendition.ui.grid javaScript program.
            </returns>
        </member>
        <member name="M:Rendition.Admin.Crud(System.String,System.Collections.Generic.List{System.Object},System.Boolean,System.Int64)">
            <summary>
            CRUD functions for grid database interaction.
            </summary>
            <param name="objectName">Name of the object.</param>
            <param name="data">The data.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
            <param name="commandType">Type of the command.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.LsRecursive(System.String)">
            <summary>
            List recursivly the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.Ls(System.String)">
            <summary>
            List the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.MkDir(System.String)">
            <summary>
            creates the specified new dir path.
            </summary>
            <param name="newDirPath">The new dir path.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.Rn(System.String,System.String)">
            <summary>
            Renames the specified file name.
            </summary>
            <param name="oldName">Full path to the old name.</param>
            <param name="newName">Full path to the new name.</param>
            <returns>Dictionary the new names directory.</returns>
        </member>
        <member name="M:Rendition.Admin.Rm(System.Collections.Generic.List{System.Object})">
            <summary>
            deletes the specified file paths.
            </summary>
            <param name="filePaths">The file paths.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.RecursiveCopy(System.String,System.String,System.Boolean)">
            <summary>
            Recursively copy.
            </summary>
            <param name="sourceFolder">The source folder.</param>
            <param name="destFolder">The dest folder.</param>
            <param name="move">if set to <c>true</c> [move].</param>
        </member>
        <member name="M:Rendition.Admin.Cp(System.Collections.Generic.List{System.Object},System.String,System.Boolean)">
            <summary>
            Copies the specified file path sources.
            </summary>
            <param name="filePathSources">The file path sources.</param>
            <param name="filePathDest">The file path dest.</param>
            <param name="move">if set to <c>true</c> [move].</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.GetMimeType(System.String)">
            <summary>
            Gets the type of the MIME.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.DownloadFile(System.String)">
            <summary>
            Downloads the file.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.GetLogicalDrives">
            <summary>
            Gets the logical drives.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.ImportStatusChange(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Imports a status change.
            </summary>
            <param name="args">The arguments of the new status changes.</param>
            <param name="dupeMode">if set to <c>true</c> [dupe mode].</param>
            <param name="cn">SQL connection.</param>
            <param name="trns">SQL transaction.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.ImportProperty(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Imports the item property.
            </summary>
            <param name="args">The arguments of the new Properties.</param>
            <param name="dupeMode">if set to <c>true</c> [dupe mode].</param>
            <param name="cn">SQL connection.</param>
            <param name="trns">SQL transaction.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.ImportStatusChanges(System.Boolean,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Imports the status changes (not implemented).
            </summary>
            <param name="preview">if set to <c>true</c> [preview].</param>
            <param name="dupeMode">if set to <c>true</c> [dupe mode].</param>
            <param name="args">The args.</param>
            <returns>List of errors that may have occured.</returns>
        </member>
        <member name="M:Rendition.Admin.ImportZipToZone(System.Boolean,System.Boolean,System.Collections.Generic.List{System.Object},System.String,System.String)">
            <summary>
            Imports a zip to zone table.
            </summary>
            <param name="preview">if set to <c>true</c> [preview].</param>
            <param name="dupeMode">if set to <c>true</c> [dupe mode].</param>
            <param name="zones">The zones.</param>
            <param name="carrierId">The Carrier id.</param>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.ImportSurcharge(System.Boolean,System.Boolean,System.Collections.Generic.List{System.Object},System.String)">
            <summary>
            Imports a surcharge table.
            </summary>
            <param name="preview">if set to <c>true</c> [preview].</param>
            <param name="dupeMode">if set to <c>true</c> [dupe mode].</param>
            <param name="rates">The rates.</param>
            <param name="carrierId">The Carrier id.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.ImportRates(System.Boolean,System.Boolean,System.Collections.Generic.List{System.Object},System.String)">
            <summary>
            Imports a rates table.
            </summary>
            <param name="preview">if set to <c>true</c> [preview].</param>
            <param name="dupeMode">if set to <c>true</c> [dupe mode].</param>
            <param name="rates">The rates.</param>
            <param name="rateId">The rate id.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.ImportCategories(System.Boolean,System.Boolean,System.Collections.Generic.List{System.Object})">
            <summary>
            Imports one or more categories.
            </summary>
            <param name="preview">if set to <c>true</c> [preview].</param>
            <param name="dupeMode">if set to <c>true</c> [dupe mode].</param>
            <param name="categories">The categories.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.ImportCategory(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Imports a category.
            </summary>
            <param name="args">The args.</param>
            <param name="dupeMode">if set to <c>true</c> [dupe mode].</param>
            <param name="cn">SQL Connection.</param>
            <param name="trns">SQL Transaction.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.ImportProperties(System.Boolean,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Imports item Properties (not implemented).
            </summary>
            <param name="preview">if set to <c>true</c> [preview].</param>
            <param name="dupeMode">if set to <c>true</c> [dupe mode].</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.ImportUsers(System.Boolean,System.Boolean,System.Collections.Generic.List{System.Object})">
            <summary>
            Imports one or more users (not implemented).
            </summary>
            <param name="preview">if set to <c>true</c> [preview].</param>
            <param name="dupeMode">if set to <c>true</c> [dupe mode].</param>
            <param name="items">The items.</param>
            <returns>List of erorrs that may have occured.</returns>
        </member>
        <member name="M:Rendition.Admin.ImportUser(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Imports a user.
            </summary>
            <param name="args">The args.</param>
            <param name="dupeMode">if set to <c>true</c> [dupe mode].</param>
            <param name="cn">SQL Connection.</param>
            <param name="trns">SQL Transaction.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.ImportItems(System.Boolean,System.Boolean,System.Collections.Generic.List{System.Object})">
            <summary>
            Imports one or more items.
            </summary>
            <param name="preview">if set to <c>true</c> [preview].</param>
            <param name="dupeMode">if set to <c>true</c> [dupe mode].</param>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.ImportWizard(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Parses CSV and XLS files for import.
            </summary>
            <param name="args">{importFilePath:path,sheetNumber:XLS sheet number,ignoreBlanks:true/false}</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.ImportItem(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Imports an item.
            </summary>
            <param name="args">The item arguments.</param>
            <param name="dupeMode">if set to <c>true</c> [dupe mode].</param>
            <param name="cn">SQL connection.</param>
            <param name="trns">SQL transaction.</param>
            <returns>List of item imported.</returns>
        </member>
        <member name="M:Rendition.Admin.ClearSiteSectionCacheForId(System.String)">
            <summary>
            Clears the site section cache for an id.
            </summary>
            <param name="siteSectionDetailId">The site section detail id.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.GetHash(System.String)">
            <summary>
            Generates a SHA1 hash value + salt from input string.
            </summary>
            <param name="clearText">The cleartext value being hashed.</param>
            <returns>{error:0,desc:"error description",digest:"hash value"}</returns>
        </member>
        <member name="M:Rendition.Admin.PostJournalEntries(System.Collections.Generic.List{System.Object})">
            <summary>
            Posts the journal entries.
            </summary>
            <param name="journalEntries">The journal entries.
            Must be a JSON object in this format:
            	{
            		userId: int userId,
            		debit: float debit,
            		credit: float credit,
            		date: string date (MM/DD/YYYY),
            		comments: string comments
            	}
            </param>
            <returns>{error:0,desc:"error description"}</returns>
        </member>
        <member name="M:Rendition.Admin.PostPaymentsToGeneralLedger(System.Collections.Generic.List{System.Object},System.String,System.String,System.Boolean)">
            <summary>
            Posts payments to general ledger.
            </summary>
            <param name="ids">The payment ids.</param>
            <param name="postingDate">The posting date.</param>
            <param name="postingNotes">The posting notes.</param>
            <param name="preview">if set to <c>true</c> [preview].</param>
            <returns>{error:0,desc:"error description",preview:false,
            generalLedgerEntries:{
            	drDate,
            	drDetails,
            	drReference,
            	drAmount,
            	crDate,
            	crDetails,
            	crReference,
            	crAmount
            },
            rawGL:{
            	generalLedgerId,
            	creditRecord,
            	debitRecord,
            	amount,
            	userId,
            	termId,
            	addDate,
            	reference,
            	orderId,
            	generalLedgerId
            },
            rawGLDetail:{
            	generalLedgerDetailId,
            	generalLedgerId,
            	refId,
            	refType
            }
            }.</returns>
        </member>
        <member name="M:Rendition.Admin.PostOrdersToGeneralLedger(System.Collections.Generic.List{System.Object},System.String,System.String,System.Boolean)">
            <summary>
            Posts the orders to general ledger. Wrapper for Commerce.postOrdersToGeneralLedger.
            </summary>
            <param name="ids">The order ids.</param>
            <param name="postingDate">The posting date.</param>
            <param name="postingNotes">The posting notes.</param>
            <param name="preview">if set to <c>true</c> [preview].</param>
            <returns>{error:0,desc:"error description",preview:false,
            generalLedgerEntries:{
            	drDate,
            	drDetails,
            	drReference,
            	drAmount,
            	crDate,
            	crDetails,
            	crReference,
            	crAmount
            },
            rawGL:{
            	generalLedgerId,
            	creditRecord,
            	debitRecord,
            	amount,
            	userId,
            	termId,
            	addDate,
            	reference,
            	orderId,
            	generalLedgerId
            },
            rawGLDetail:{
            	generalLedgerDetailId,
            	generalLedgerId,
            	refId,
            	refType
            }
            }.</returns>
        </member>
        <member name="M:Rendition.Admin.PreviewRegexPattern(System.String,System.String,System.String)">
            <summary>
            Previews the regex pattern.
            </summary>
            <param name="regexPattern">The regex pattern.</param>
            <param name="regexReplacePattern">The regex replace pattern.</param>
            <param name="stringToReplace">The string to replace.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.PreviewRewriteDirective(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Previews the rewrite directive.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.GetGallery(System.String)">
            <summary>
            Gets the entire gallery by looking up an image id in the gallery.
            </summary>
            <param name="galleryId">The gallery or image id.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.StartTelnetServer">
            <summary>
            Starts the telnet logging server.
            </summary>
        </member>
        <member name="M:Rendition.Admin.ExportXmlTable(System.String)">
            <summary>
            Exports a XML table.
            </summary>
            <param name="SQLQuery">The SQL query.</param>
        </member>
        <member name="M:Rendition.Admin.AddFlag(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a flag.
            </summary>
            <param name="FlagType">Type of the flag.</param>
            <param name="objectType">Type of the object order, line order shipment.</param>
            <param name="objectId">The object id.</param>
            <param name="comments">The comments.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.UpdateBlogOrder(System.String)">
            <summary>
            Updates the Blog order.
            </summary>
            <param name="updateList">The update list.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.UpdateGalleryOrder(System.String)">
            <summary>
            Updates the gallery order.
            </summary>
            <param name="updateList">The update list.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.UpdateMenuOrder(System.String)">
            <summary>
            Updates the menu order.
            </summary>
            <param name="updateList">The update list.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.UpdateCategoryDetailOrder(System.String)">
            <summary>
            Updates the category detail order.
            </summary>
            <param name="updateList">The update list.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.RefreshThisImage(System.String,System.String)">
            <summary>
            Refreshes the item images.
            </summary>
            <param name="itemNumber">The item number.</param>
            <param name="imagingId">The imaging id.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.ProgressInfo(System.String)">
            <summary>
            gets progress info generated during file uploads using the upload class.
            </summary>
            <param name="uploadId">The upload id.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.RemoveImplictSecurity(System.String)">
            <summary>
            Removes the implict security from a directory.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Rendition.Admin.Init">
            <summary>
            Inits values for the UI.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.SystemInfo">
            <summary>
            Return information about the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.RestartWorkerProcess">
            <summary>
            Restarts the worker process.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.GetMessages">
            <summary>
            Gets any system message for the current userId.
            </summary>
            <returns>{error:0,desc:"error description"}.</returns>
        </member>
        <member name="M:Rendition.Admin.SetMessageRead(System.Collections.Generic.List{System.Object})">
            <summary>
            Sets an internal email or system message as read.
            </summary>
            <param name="messageIds">The message ids.  One or more GUIDs that represent a systemMessage or an emailId.</param>
            <returns>{error:0,desc:"error description"}.</returns>
        </member>
        <member name="M:Rendition.Admin.GasGauge(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Gas gauge chart.
            </summary>
            <param name="query">The query.</param>
            <param name="_options">GraphOptions.</param>
            <param name="binaryOutput">if set to <c>true</c> the image will output in the response stream.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.BarChart(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Bar chart.
            </summary>
            <param name="query">The query.</param>
            <param name="_options">GraphOptions.</param>
            <param name="binaryOutput">if set to <c>true</c> the image will output in the response stream.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.TicChart(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Creates a tic chart based on the query batch.
            </summary>
            <param name="query">The query batch.  Each line is a seperate query batch.  The query should look like:
            0:name, 1:x, 2:y, 3:colorName, 4:fillColorName, 5:lineWidth, 6:ticSize.</param>
            <param name="_options">GraphOptions.</param>
            <param name="binaryOutput">if set to <c>true</c> the image will output in the response stream.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.PieChart(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Creates a pie chart from a JSON request.
            </summary>
            <param name="query">Query batch.</param>
            <param name="_options">GraphOptions.</param>
            <param name="binaryOutput">if set to <c>true</c> the image will output in the response stream.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.GetSerial(System.String)">
            <summary>
            Gets an order by a serial number in the order.  Formated for JSON.
            </summary>
            <param name="serialNumber">The serial number.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.GetShipment(System.String)">
            <summary>
            Gets an order by a shipment number in the order.  Formated for JSON.
            </summary>
            <param name="shipmentNumber">The shipment number.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.GetOrder(System.String)">
            <summary>
            Gets an order by order number.  Formated for JSON.
            </summary>
            <param name="orderNumber">The order number.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.StoreScannedImage(System.String,System.String)">
            <summary>
            Stores the scanned image in the destination repository.
            </summary>
            <param name="scannedImage">The scanned image.</param>
            <param name="orderNumber">The order number.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.InitScannedImage(System.String,System.String)">
            <summary>
            Starts using a scanned image for a quote.
            </summary>
            <param name="scannedImage">The scanned image.</param>
            <param name="sessionId">The session id.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.GetNextScannedOrderImage">
            <summary>
            Gets the next scanned order image.
            </summary>
            <returns>List of scanned images.</returns>
        </member>
        <member name="M:Rendition.Admin.ReturnScannedImage(System.String)">
            <summary>
            Returns the scanned image to the source repository.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.AddFlags(System.String,System.String,System.Collections.Generic.List{System.Object},System.String)">
            <summary>
            Adds a flag to multile lines, shipments or orders.
            </summary>
            <param name="statusId">The status id.</param>
            <param name="objectType">Type of the object.</param>
            <param name="objectIds">The object ids.</param>
            <param name="comments">Comments.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.AllocateLines(System.Collections.Generic.List{System.Object})">
            <summary>
            Allocates inventory for selected serialIds.
            </summary>
            <param name="serialIds">The serial ids.</param>
            <returns>List errors that may have occured.</returns>
        </member>
        <member name="M:Rendition.Admin.UnallocateLines(System.Collections.Generic.List{System.Object})">
            <summary>
            Unallocates inventory for selected serialIds.
            </summary>
            <param name="serialIds">The serial ids.</param>
            <returns>List errors that may have occured.</returns>
        </member>
        <member name="M:Rendition.Admin.AllocateOrders(System.Collections.Generic.List{System.Object})">
            <summary>
            Allocates inventory for selected orderIds.
            </summary>
            <param name="orderIds">The order ids.</param>
            <returns>List errors that may have occured.</returns>
        </member>
        <member name="M:Rendition.Admin.UnallocateOrders(System.Collections.Generic.List{System.Object})">
            <summary>
            Unallocates inventory for selected orderIds.
            </summary>
            <param name="orderIds">The order ids.</param>
            <returns>List errors that may have occured.</returns>
        </member>
        <member name="M:Rendition.Admin.ConsumeLines(System.Collections.Generic.List{System.Object})">
            <summary>
            Sets inventory status to consumed by serialid.
            </summary>
            <param name="serialIds">The serial ids.</param>
            <returns>List errors that may have occured.</returns>
        </member>
        <member name="M:Rendition.Admin.UnconsumeLines(System.Collections.Generic.List{System.Object})">
            <summary>
            Sets inventory status to unconsumed by serialid.
            </summary>
            <param name="serialIds">The serial ids.</param>
            <returns>List errors that may have occured.</returns>
        </member>
        <member name="M:Rendition.Admin.LineStatusChange(System.Int32,System.Collections.Generic.List{System.Object})">
            <summary>
            Changes status of one or more serialIds.
            </summary>
            <param name="statusId">The status id.</param>
            <param name="serialIds">The serial ids.</param>
            <returns>List errors that may have occured.</returns>
        </member>
        <member name="M:Rendition.Admin.GetOrdersTotal(System.Collections.Generic.List{System.Object})">
            <summary>
            Gets aggregates from a list of orderIds.
            </summary>
            <param name="_orderIds">The _order ids.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.PayWithCreditCard(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.Object})">
            <summary>
            Pays with credit card.
            </summary>
            <param name="cardName">Name of the card.</param>
            <param name="cardType">Type of the card.</param>
            <param name="cardNumber">The card number.</param>
            <param name="expMonth">The exp month.</param>
            <param name="expYear">The exp year.</param>
            <param name="secNumber">The sec number.</param>
            <param name="amount">The amount.</param>
            <param name="userId">The user id.</param>
            <param name="postingDate">The posting date.</param>
            <param name="orderIds">The order ids.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.PayWithCheck(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.Object})">
            <summary>
            Pays with check.
            </summary>
            <param name="routingNumber">The routing number.</param>
            <param name="checkNumber">The check number.</param>
            <param name="bankAccountNumber">The bank account number.</param>
            <param name="notes">The notes.</param>
            <param name="amount">The amount.</param>
            <param name="userId">The user id.</param>
            <param name="postingDate">The posting date.</param>
            <param name="orderIds">The order ids.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.PayWithWire(System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.Object})">
            <summary>
            Pays with wire.
            </summary>
            <param name="swift">The swift.</param>
            <param name="bankName">Name of the bank.</param>
            <param name="routingTransitNumber">The routing transit number.</param>
            <param name="amount">The amount.</param>
            <param name="userId">The user id.</param>
            <param name="postingDate">The posting date.</param>
            <param name="orderIds">The order ids.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.PayWithPayPal(System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.Object})">
            <summary>
            Pays with pay pal (not implemented).
            </summary>
            <param name="payPalEmailAddress">The pay pal email Address.</param>
            <param name="amount">The amount.</param>
            <param name="userId">The user id.</param>
            <param name="postingDate">The posting date.</param>
            <param name="orderIds">The order ids.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.PayWithExistingPaymentMethods(System.Collections.Generic.List{System.Object},System.String,System.String,System.String,System.Collections.Generic.List{System.Object})">
            <summary>
            Pays with existing payment.
            </summary>
            <param name="paymentMethodIds">The list of paymentMethodIds.</param>
            <param name="amount">The amount.</param>
            <param name="userId">The userId.</param>
            <param name="postingDate">The posting date.</param>
            <param name="orderIds">The order ids.</param>
            <returns>{error:0,desc:"error description"}.</returns>
        </member>
        <member name="M:Rendition.Admin.PayWithCash(System.String,System.String,System.String,System.Collections.Generic.List{System.Object})">
            <summary>
            Pays with cash.
            </summary>
            <param name="amount">The amount.</param>
            <param name="userId">The user id.</param>
            <param name="postingDate">The posting date.</param>
            <param name="orderIds">The order ids.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.GetPaymentsTotal(System.Collections.Generic.List{System.Object})">
            <summary>
            Gets total amount remaning in a list of paymentMethodIds.
            </summary>
            <param name="paymentMethodIds">The payment method ids.</param>
            <returns>{error:0,desc:"error description",totalRemaning:decimal - total remaning on selected paymentMethods}</returns>
        </member>
        <member name="M:Rendition.Admin.OrderStatusChange(System.Int32,System.Collections.Generic.List{System.Object})">
            <summary>
            Change the status of one or more orders.
            </summary>
            <param name="statusId">The status id.</param>
            <param name="orderIds">The order ids.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.GetFormInfo(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets the form info.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.RefreshAllItemImages(System.String)">
            <summary>
            Refreshes the item images.
            </summary>
            <param name="itemNumber">The item number.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.CopyItemPropertiesToItems(System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Object})">
            <summary>
            Copies the item Properties to items.
            </summary>
            <param name="itemPropertyIds">The item property ids.</param>
            <param name="targetItemNumbers">The target item numbers.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.GetItem(System.String)">
            <summary>
            Gets most of the item's information formated for JSON.
            </summary>
            <param name="itemNumber">The item number.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.BackorderItems(System.Collections.Generic.List{System.Object})">
            <summary>
            wrapper for merchant backorderItems.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.CancelItems(System.Collections.Generic.List{System.Object})">
            <summary>
            wrapper for merchant cancelItems.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.UpdateOrderItem(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            wrapper for merchant updateOrderItem.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.DeleteCartItem(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            wrapper for merchant deleteCartItem.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.LogOn(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            wrapper for merchant logon.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.UpdateCartItem(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            wrapper for merchant.updateCartItem.
            </summary>
            <param name="args">arguments</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.Recalculate(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Wrapper for merchant.reclaculate.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.AddToCart(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Wrapper for merchat add to cart.
            </summary>
            <param name="args">arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.RecalculateOrder(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Wrapper for merchant.recalculateOrder.
            </summary>
            <param name="args">arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.PlaceOrder(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Wrapper for merchant.placeOrder.
            </summary>
            <param name="args">arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.PreviewScript(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Previews the script.
            </summary>
            <param name="id">The id.</param>
            <param name="sourceCode">The source code.</param>
            <param name="language">The language.</param>
            <param name="eventType">Type of the event.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.PreviewTaskScript(System.String,System.String,System.String)">
            <summary>
            Previews the task script.
            </summary>
            <param name="_taskId">The _task id.</param>
            <param name="sourceCode">The source code.</param>
            <param name="language">The language.</param>
            <returns>Error description and function output.</returns>
        </member>
        <member name="M:Rendition.Admin.CompileScript(System.String,System.String)">
            <summary>
            Compiles the script.
            </summary>
            <param name="sourceCode">The source code.</param>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.ExecuteScript(System.String,System.String,System.String,System.String,System.Object[]@,System.Collections.Generic.List{System.Object}@)">
            <summary>
            Executes the script.
            </summary>
            <param name="sourceCode">The source code.</param>
            <param name="language">The language.</param>
            <param name="startClass">The start class.</param>
            <param name="startMethod">The start method.</param>
            <param name="startArgs">The start args.</param>
            <param name="errors">The errors.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.RefreshUserById(System.String)">
            <summary>
            Refreshes the cache for a single user.
            </summary>
            <param name="userId">The user id.</param>
        </member>
        <member name="M:Rendition.Admin.RefreshSiteData">
            <summary>
            Refreshes the site data.
            </summary>
        </member>
        <member name="M:Rendition.Admin.RefreshRewriteCache">
            <summary>
            Refreshes the rewrite cache.
            </summary>
        </member>
        <member name="M:Rendition.Admin.RefreshUsersCache">
            <summary>
            Refreshes the users cache.
            </summary>
        </member>
        <member name="M:Rendition.Admin.RefreshReviewsCache">
            <summary>
            Refreshes the reviews cache.
            </summary>
        </member>
        <member name="M:Rendition.Admin.RefreshSiteImagePlaceholdersCache">
            <summary>
            Refreshes the site image placeholders cache.
            </summary>
        </member>
        <member name="M:Rendition.Admin.RefreshRepliesCache">
            <summary>
            Refreshes the replies cache.
            </summary>
        </member>
        <member name="M:Rendition.Admin.RefreshRedirectors">
            <summary>
            Refreshes the redirectors.
            </summary>
        </member>
        <member name="M:Rendition.Admin.RefreshGalleriesCache">
            <summary>
            Refreshes the galleries cache.
            </summary>
        </member>
        <member name="M:Rendition.Admin.RefreshBlogsCache">
            <summary>
            Refreshes the Blogs cache.
            </summary>
        </member>
        <member name="M:Rendition.Admin.RefreshPropertiesCache">
            <summary>
            Refreshes the Properties cache.
            </summary>
        </member>
        <member name="M:Rendition.Admin.RefreshMenusCache">
            <summary>
            Refreshes the menus cache.
            </summary>
        </member>
        <member name="M:Rendition.Admin.RefreshCarriersCache">
            <summary>
            Refreshes the Carriers cache.
            </summary>
        </member>
        <member name="M:Rendition.Admin.RefreshRatesCache">
            <summary>
            Refreshes the rates cache.
            </summary>
        </member>
        <member name="M:Rendition.Admin.RefreshZonesCache">
            <summary>
            Refreshes the zones cache.
            </summary>
        </member>
        <member name="M:Rendition.Admin.RefreshZipToZonesCache">
            <summary>
            Refreshes the zip to zones cache.
            </summary>
        </member>
        <member name="M:Rendition.Admin.RefreshCountriesCache">
            <summary>
            Refreshes the countries cache.
            </summary>
        </member>
        <member name="M:Rendition.Admin.RefreshDiscountsCache">
            <summary>
            Refreshes the discounts cache.
            </summary>
        </member>
        <member name="M:Rendition.Admin.RefreshItemImagesCache">
            <summary>
            Refreshes the item images cache.
            </summary>
        </member>
        <member name="M:Rendition.Admin.RefreshRenderedImagesCache">
            <summary>
            Refreshes the rendered images cache.
            </summary>
        </member>
        <member name="M:Rendition.Admin.RefreshBillOfMaterialsCache">
            <summary>
            Refreshes the bill of materials cache.
            </summary>
        </member>
        <member name="M:Rendition.Admin.RefreshItemsCache">
            <summary>
            Refreshes the items cache.
            </summary>
        </member>
        <member name="M:Rendition.Admin.RefreshCategoriesCache">
            <summary>
            Refreshes the categories cache.
            </summary>
        </member>
        <member name="M:Rendition.Admin.RefreshSiteSectionsCache">
            <summary>
            Refreshes the site sections cache.
            </summary>
        </member>
        <member name="M:Rendition.Admin.RefreshItemCache(System.String)">
            <summary>
            Refreshes the item cache for a single item number.
            </summary>
            <param name="itemNumber">The item number.</param>
        </member>
        <member name="M:Rendition.Admin.RefreshMenus">
            <summary>
            Refreshes the menus.
            </summary>
        </member>
        <member name="M:Rendition.Admin.RefreshItemImages(System.String,System.String[],System.Guid,System.Guid)">
            <summary>
            Refreshes the item images.
            </summary>
            <param name="itemNumber">The item number.</param>
            <param name="locationArray">The location array.</param>
            <param name="uniqueSiteId">The unique site id.</param>
            <param name="onlyRenderThisImageId">The only render this image id.  Render all when Guid.Empty.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.DeleteImage(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Deletes an item image.
            </summary>
            <param name="args">{imageId}</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.GetItemImages(System.String)">
            <summary>
            Gets the item images for use in a backend application.
            </summary>
            <param name="itemNumber">The item number.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.AddItemImage(System.String,System.String)">
            <summary>
            Adds an image from the specified path to the specified item.
            </summary>
            <param name="itemNumber">The item number.</param>
            <param name="pathToImage">The path to image.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.GetImageStream(System.String)">
            <summary>
            Gets an image from a path and streams the content to the current HttpContext
            </summary>
            <param name="imagePath">The image path.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.GetImage(System.String)">
            <summary>
            Gets an image from a path and returns a Bitmap object from the image
            </summary>
            <param name="imagePath">The image path.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.RenderTemplateImages(System.String,System.String)">
            <summary>
            Renders the template images.  Updates an ProgressInfo matching progressInfoId parameter.
            </summary>
            <param name="templateId">The template id.</param>
            <param name="progressInfoId">The progress info id.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.ApplyImageTemplate(System.String,System.Drawing.Bitmap)">
            <summary>
            Applies the imaging template.
            </summary>
            <param name="templateId">The template id.</param>
            <param name="img">The img.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.PreviewTemplate(System.String,System.String,System.Boolean)">
            <summary>
            Previews a template.
            </summary>
            <param name="templateId">The template id.</param>
            <param name="sampleImage">Path to the sample image.</param>
            <param name="binaryOutput">if set to <c>true</c> [binary output].</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.PreviewTemplateDetail(System.String,System.String,System.Boolean)">
            <summary>
            Previews a single filter in a filter template.
            </summary>
            <param name="templateDetailId">The template detail id.</param>
            <param name="sampleImage">The sample image.</param>
            <param name="binaryOutput">if set to <c>true</c> [binary output].</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.ExecuteImageTemplate(System.Drawing.Bitmap,System.String,System.Collections.Generic.List{System.Object}@)">
            <summary>
            Executes the image template.  This is a reciprecol function.
            </summary>
            <param name="image">The image.</param>
            <param name="imageTemplateId">The image template id.</param>
            <param name="errors">The errors.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.Crop(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Crops the specified image.
            </summary>
            <param name="image">The image.</param>
            <param name="x">x.</param>
            <param name="y">y.</param>
            <param name="w">w.</param>
            <param name="h">h.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.ResizeHighQuality(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Resizes the image using the HighQualityBicubic interpolation method.
            </summary>
            <param name="image">The image.</param>
            <param name="height">The new height.</param>
            <param name="width">The new width.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.PrintOrder(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Prints the order.
            </summary>
            <param name="args">{[orderNumber]:[Number],[shipmentNumber]:[Number],
            [quoteNumber]:[Number],[sessionId]:[Number],[Type]:[invoice,packingslip,quote] }</param>
        </member>
        <member name="M:Rendition.Admin.Print(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Prints the specified doc type.
            </summary>
            <param name="refDoc">The ref doc.</param>
            <param name="queryArguments">The query arguments.</param>
        </member>
        <member name="M:Rendition.Admin.ListConversations">
            <summary>
            Removes the user from a Conversation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.RemoveUserFromConversation(System.String,System.Int64)">
            <summary>
            Removes the user from a Conversation.
            </summary>
            <param name="conversationId">The Conversation id.</param>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.AddUserToConversation(System.String,System.Int64)">
            <summary>
            Adds a user Conversation.
            </summary>
            <param name="conversationId">The Conversation id.</param>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.GetConversation(System.String,System.Int64)">
            <summary>
            Gets a Conversation.
            </summary>
            <param name="conversationId">The Conversation id.</param>
            <param name="version">The version.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.SubmitConversationMessage(System.Int64,System.String,System.String,System.Int64)">
            <summary>
            Submits a Conversation message.
            </summary>
            <param name="userId">The user id.</param>
            <param name="message">The message.</param>
            <param name="conversationId">The Conversation id.</param>
            <param name="version">The version of the Conversation submitting to.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.Iis6Upload">
            <summary>
            Handles file uploads, supplies a progress meter using class ProgressInfo.
            </summary>
        </member>
        <member name="M:Rendition.Admin.GetWordCountCheckMatch(System.String[],System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.String,System.Object,System.String,System.Int32@)">
            <summary>
            Used in getWordCounts to scan substrings.
            </summary>
            <param name="words">The words.</param>
            <param name="results">The results.</param>
            <param name="searchString">The search string.</param>
            <param name="id">The id.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Rendition.Admin.UpdateTotalWordCount(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.String[],System.Int32)">
            <summary>
            Updates the total word count.  Used by getWordCounts.
            </summary>
            <param name="detail">The detail.</param>
            <param name="_words">The _words.</param>
            <param name="totalForAll">The total for all.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.GetWordCounts(System.String)">
            <summary>
            Gets the number of occurances of a word in the system and returns a detailed result list.
            This function scans:
            Meta Descriptions
            Meta Keywords
            Page Titles
            Menu Link Texts
            Item Descriptions
            Item Short Description
            Item HTML
            Site Section Name
            Site Section Description
            Site Section Entry
            </summary>
            <param name="words">The words.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.PreviewGalleryCropping(System.String,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Previews the gallery cropping.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="cropX">The crop X.</param>
            <param name="cropY">The crop Y.</param>
            <param name="cropW">The crop W.</param>
            <param name="cropH">The crop H.</param>
            <param name="imageX">The image X.</param>
            <param name="imageY">The image Y.</param>
            <param name="imageW">The image W.</param>
            <param name="imageH">The image H.</param>
            <param name="destW">The dest W.</param>
            <param name="destH">The dest H.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.RenderImageGallery(System.String,System.String)">
            <summary>
            Renders the image gallery.
            </summary>
            <param name="_galleryId">The _gallery id.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.GalleryCrop(System.Drawing.Bitmap,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Gallery crop method.
            </summary>
            <param name="inputBitmap">The input bitmap.</param>
            <param name="cropX">The crop X.</param>
            <param name="cropY">The crop Y.</param>
            <param name="cropW">The crop W.</param>
            <param name="cropH">The crop H.</param>
            <param name="imageX">The image X.</param>
            <param name="imageY">The image Y.</param>
            <param name="imageW">The image W.</param>
            <param name="imageH">The image H.</param>
            <param name="destW">The dest W.</param>
            <param name="destH">The dest H.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.GetCategoryData(System.String)">
            <summary>
            Gets category data for built in category editor.
            </summary>
            <returns>category data across multiple tables</returns>
        </member>
        <member name="M:Rendition.Admin.SaveCategoryData(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Saves category data for built in category editor.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rendition.Admin.BarOptions">
            <summary>
            Options for the bar code.
            </summary>
        </member>
        <member name="F:Rendition.Admin.BarOptions.Height">
            <summary>
            Height of the chart.
            </summary>
        </member>
        <member name="F:Rendition.Admin.BarOptions.Width">
            <summary>
            Width of the chart.
            </summary>
        </member>
        <member name="F:Rendition.Admin.BarOptions.Foreground">
            <summary>
            Foreground color.
            </summary>
        </member>
        <member name="F:Rendition.Admin.BarOptions.Background">
            <summary>
            Background color.
            </summary>
        </member>
        <member name="F:Rendition.Admin.BarOptions.Type">
            <summary>
            Type of bar code.
            </summary>
        </member>
        <member name="F:Rendition.Admin.BarOptions.IncludeLabel">
            <summary>
            Include a human readable label.
            </summary>
        </member>
        <member name="F:Rendition.Admin.BarOptions.FontFamily">
            <summary>
            Font of the label.
            </summary>
        </member>
        <member name="F:Rendition.Admin.BarOptions.FontSize">
            <summary>
            Font size of the label.
            </summary>
        </member>
        <member name="F:Rendition.Admin.BarOptions.Alignment">
            <summary>
            Alignment of the label.
            </summary>
        </member>
        <member name="F:Rendition.Admin.BarOptions.Rotate">
            <summary>
            Rotation of the bar code.
            </summary>
        </member>
        <member name="T:Rendition.Admin.Timer">
            <summary>
            A Timer that simplifies the class System.Timers.Timer
            </summary>
        </member>
        <member name="F:Rendition.Admin.Timer.TimeUntilElapsed">
            <summary>
            Number of intervals until the Elapsed event is fired.
            </summary>
        </member>
        <member name="F:Rendition.Admin.Timer.Name">
            <summary>
            Name of the Timer.  By default set to "unnamed".
            </summary>
        </member>
        <member name="F:Rendition.Admin.Timer.Message">
            <summary>
            Last return message.
            </summary>
        </member>
        <member name="F:Rendition.Admin.Timer.Error">
            <summary>
            Last return error number.
            </summary>
        </member>
        <member name="F:Rendition.Admin.Timer.Id">
            <summary>
            Id of the event instance - does not need to be unique, but should help you identifiy your Timer.
            </summary>
        </member>
        <member name="M:Rendition.Admin.Timer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Admin.Timer"/> class.
            </summary>
        </member>
        <member name="M:Rendition.Admin.Timer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Admin.Timer"/> class.
            </summary>
            <param name="interval">The interval.</param>
        </member>
        <member name="M:Rendition.Admin.Timer.Start">
            <summary>
            Starts raising the <see cref="E:System.Timers.Timer.Elapsed"/> event by setting <see cref="P:System.Timers.Timer.Enabled"/> to true.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="T:System.Timers.Timer"/> is created with an interval equal to or greater than <see cref="F:System.Int32.MaxValue"/> + 1, or set to an interval less than zero.</exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/>
            </PermissionSet>
        </member>
        <member name="M:Rendition.Admin.Timer.Stop">
            <summary>
            Stops raising the <see cref="E:System.Timers.Timer.Elapsed"/> event by setting <see cref="P:System.Timers.Timer.Enabled"/> to false.
            </summary>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/>
            </PermissionSet>
        </member>
        <member name="M:Rendition.Admin.Timer.OnElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Called when [elapsed].
            </summary>
            <param name="source">The source.</param>
            <param name="e">The <see cref="T:System.Timers.ElapsedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Admin.Timer._OnElapsed(System.EventArgs)">
            <summary>
            on elapsed.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rendition.Admin.Timer._eventArgs">
            <summary>
            Gets or sets the _event args.
            </summary>
            <value>The _event args.</value>
        </member>
        <member name="E:Rendition.Admin.Timer.elapsed">
            <summary>
            Occurs when [elapsed].
            </summary>
        </member>
        <member name="T:Rendition.Admin.Installer">
            <summary>
            Installs Rendition on this or another server
            </summary>
        </member>
        <member name="M:Rendition.Admin.Installer.GetSQLDBList(System.String,System.String,System.String)">
            <summary>
            Gets SQL DB list.
            </summary>
            <param name="SQLServerIP">The SQL server IP.</param>
            <param name="SQLServerName">Name of the SQL server.</param>
            <param name="SQLServerPassword">The SQL server password.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.Installer.CreateDatabase(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates the database.
            </summary>
            <param name="IPAddress">The IP Address.</param>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <param name="newDatabaseName">New name of the database.</param>
            <param name="newAdministratorPassword">The new administrator password.</param>
            <param name="emailServerIP">The email server IP.</param>
            <param name="emailLogonName">Name of the email logon.</param>
            <param name="emailPassword">The email password.</param>
            <param name="emailPort">The email port.</param>
            <param name="friendlySiteName">Name of the friendly site.</param>
            <param name="localZipCode">The local zip code.</param>
            <param name="siteEmailAddress">The site email Address.</param>
            <param name="webSiteHostHeader">The web site host header.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.Installer.AuthUploadDir(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Authenticates the upload dir.
            </summary>
            <param name="directory">The directory.</param>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <param name="domain">The domain.</param>
            <param name="createDirectory">if set to <c>true</c> [create directory].</param>
            <returns>0:logon successful directory exists, -1:cannot logon, -2:directory does not exist</returns>
        </member>
        <member name="M:Rendition.Admin.Installer.AuthSQLServer(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Authenticates the SQL server.
            </summary>
            <param name="SQLServerIP">The SQL server IP.</param>
            <param name="SQLServerName">Name of the SQL server.</param>
            <param name="SQLServerPassword">The SQL server password.</param>
            <param name="SQLDatabaseName">Name of the SQL database.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
            <returns>
            0: logon successful database does not exist yet, -1:cannot logon, -2:not version 10.x, -3:database exists.
            </returns>
        </member>
        <member name="M:Rendition.Admin.Installer.AuthIISServer(System.String,System.String,System.String,System.String)">
            <summary>
            Authenticates the IIS server.
            </summary>
            <param name="IPAddress">The IP Address.</param>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <param name="domain">The domain.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.Installer.GetErrorMessage(System.Int32)">
            <summary>
            Gets the error last win32 error message.
            </summary>
            <param name="errorCode">The error code.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.Installer.CreateWebsite(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates the website.
            </summary>
            <param name="IPAddress">The IP Address.</param>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <param name="domain">The domain.</param>
            <param name="hostHeader">The host header.</param>
            <param name="physicalPath">The physical path.</param>
            <param name="siteName">Name of the site.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.Installer.GetRscString(System.String,System.String)">
            <summary>
            Converts a file path and subjective starting directory to a resource style lookup string.
            that's how they are stored in the res file so it has to get done if the res files are to be looked up.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="sourceDirectory">The source directory.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.Installer.UploadWebSite(System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Uploads the web site reference data (/refrence + subdirs) and writes a web.config based on the
            parameters passed to this method.
            </summary>
            <param name="installDir">if set to <c>true</c> [install dir].</param>
            <param name="installWebConfig">if set to <c>true</c> [install web config].</param>
            <param name="IISServerUploadPath">The IIS server upload path.</param>
            <param name="IISNTUserName">Name of the IIS user.</param>
            <param name="IISNTPassword">The IIS password.</param>
            <param name="IISNTDomain">The IIS domain.</param>
            <param name="SQLServerIP">The SQL server IP.</param>
            <param name="SQLServerDatabaseName">Name of the SQL server database.</param>
            <param name="SQLServerName">Name of the SQL server.</param>
            <param name="SQLServerPassword">The SQL server password.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.Installer.GetNewSiteId(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Retunrs Unique SiteId for the new website
            </summary>
            <param name="serverAddress">The server Address.</param>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <param name="hostHeader">The host header.</param>
            <param name="justAuthenticate">if set to <c>true</c> [just authenticate and return an empty dictionary, don't search the directory].</param>
            <returns></returns>
        </member>
        <member name="T:Rendition.Admin.PieChartPiece">
            <summary>
            For converting JSON object into a set of options for the zedChart object
            </summary>
        </member>
        <member name="F:Rendition.Admin.PieChartPiece.FillAngle">
            <summary>
            Fill angle
            </summary>
        </member>
        <member name="F:Rendition.Admin.PieChartPiece.Value">
            <summary>
            value of the piece
            </summary>
        </member>
        <member name="F:Rendition.Admin.PieChartPiece.StartColor">
            <summary>
            Starting color
            </summary>
        </member>
        <member name="F:Rendition.Admin.PieChartPiece.EndColor">
            <summary>
            Ending color
            </summary>
        </member>
        <member name="T:Rendition.Admin.FillOptions">
            <summary>
            For converting JSON object into a set of options for the zedChart object
            </summary>
        </member>
        <member name="F:Rendition.Admin.FillOptions.Type">
            <summary>
            Type of fill
            </summary>
        </member>
        <member name="F:Rendition.Admin.FillOptions.StartColor">
            <summary>
            Starting color
            </summary>
        </member>
        <member name="F:Rendition.Admin.FillOptions.EndColor">
            <summary>
            Ending color
            </summary>
        </member>
        <member name="F:Rendition.Admin.FillOptions.Angle">
            <summary>
            Fill angle
            </summary>
        </member>
        <member name="T:Rendition.Admin.GraphOptions">
            <summary>
            For converting JSON object into a set of options for the zedChart object
            </summary>
        </member>
        <member name="F:Rendition.Admin.GraphOptions.Title">
            <summary>
            title of the graph
            </summary>
        </member>
        <member name="F:Rendition.Admin.GraphOptions.IsItalic">
            <summary>
            if true then font is italic
            </summary>
        </member>
        <member name="F:Rendition.Admin.GraphOptions.TitleFontSize">
            <summary>
            title font size
            </summary>
        </member>
        <member name="F:Rendition.Admin.GraphOptions.FontFamily">
            <summary>
            Font family
            </summary>
        </member>
        <member name="F:Rendition.Admin.GraphOptions.XAxisTitle">
            <summary>
            xAxis title
            </summary>
        </member>
        <member name="F:Rendition.Admin.GraphOptions.YAxisTitle">
            <summary>
            yAxis title
            </summary>
        </member>
        <member name="F:Rendition.Admin.GraphOptions.XAxisFontAngle">
            <summary>
            xAxis font angle
            </summary>
        </member>
        <member name="F:Rendition.Admin.GraphOptions.XAxisFontSize">
            <summary>
            xAxis font size
            </summary>
        </member>
        <member name="F:Rendition.Admin.GraphOptions.XAxisFormat">
            <summary>
            Format of the xAxis
            </summary>
        </member>
        <member name="F:Rendition.Admin.GraphOptions.NodeLabelFormat">
            <summary>
            Format of the node label
            </summary>
        </member>
        <member name="F:Rendition.Admin.GraphOptions.Height">
            <summary>
            Height of the image
            </summary>
        </member>
        <member name="F:Rendition.Admin.GraphOptions.Width">
            <summary>
            Width of the image
            </summary>
        </member>
        <member name="F:Rendition.Admin.GraphOptions.ShowLegend">
            <summary>
            if true, the legend will be drawn
            </summary>
        </member>
        <member name="F:Rendition.Admin.GraphOptions.NodeLabel">
            <summary>
            if true, node label will be drawn
            </summary>
        </member>
        <member name="F:Rendition.Admin.GraphOptions.NodeLabelFontSize">
            <summary>
            Font size of the label
            </summary>
        </member>
        <member name="F:Rendition.Admin.GraphOptions.NodeLabelRotation">
            <summary>
            Angle of the node lables
            </summary>
        </member>
        <member name="F:Rendition.Admin.GraphOptions.Fill">
            <summary>
            Bar fill options
            </summary>
        </member>
        <member name="F:Rendition.Admin.GraphOptions.Orientation">
            <summary>
            orientation of the bars
            </summary>
        </member>
        <member name="F:Rendition.Admin.GraphOptions.BarSpacing">
            <summary>
            Spacing between bars
            </summary>
        </member>
        <member name="F:Rendition.Admin.GraphOptions.NoDataMessage">
            <summary>
            No data message
            </summary>
        </member>
        <member name="T:Rendition.Admin.Conversation">
            <summary>
            A Conversation between one or more users.
            </summary>
        </member>
        <member name="F:Rendition.Admin.Conversation.Version">
            <summary>
            The version of the Conversation.  When the client requests updates to the Conversation, it the can use the
            version number, which increments by one for each message added, to limit the number of messages returned
            to the client when using the Admin.getConversation().
            </summary>
        </member>
        <member name="F:Rendition.Admin.Conversation.Id">
            <summary>
            The id of the Conversation.
            </summary>
        </member>
        <member name="F:Rendition.Admin.Conversation.Messages">
            <summary>
            List of messages in this Conversation.
            </summary>
        </member>
        <member name="F:Rendition.Admin.Conversation.Users">
            <summary>
            List of user's currently in this Conversation.
            </summary>
        </member>
        <member name="F:Rendition.Admin.Conversation.UserIds">
            <summary>
            List of user's userIds currently in this Conversation.
            </summary>
        </member>
        <member name="F:Rendition.Admin.Conversation.Name">
            <summary>
            Name of the Conversation.
            </summary>
        </member>
        <member name="F:Rendition.Admin.Conversation.Subject">
            <summary>
            Subject of the Conversation.
            </summary>
        </member>
        <member name="F:Rendition.Admin.Conversation.Tags">
            <summary>
            Tags.
            </summary>
        </member>
        <member name="F:Rendition.Admin.Conversation.Password">
            <summary>
            Password.
            </summary>
        </member>
        <member name="F:Rendition.Admin.Conversation.Hidden">
            <summary>
            When this Conversation is hidden then true.
            </summary>
        </member>
        <member name="F:Rendition.Admin.Conversation.OwnerId">
            <summary>
            Owner.
            </summary>
        </member>
        <member name="M:Rendition.Admin.Conversation.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Admin.Conversation"/> class.
            </summary>
            <param name="newConversationId">The new Conversation id.</param>
        </member>
        <member name="M:Rendition.Admin.Conversation.AddMessage(Rendition.Admin.ConversationMessage)">
            <summary>
            Adds a message to this Conversation.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Admin.Conversation.AddUser(Rendition.Commerce.User)">
            <summary>
            Adds a user to the Conversation.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:Rendition.Admin.Conversation.RemoveUser(Rendition.Commerce.User)">
            <summary>
            Removes the user.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="P:Rendition.Admin.Conversation.GetUserNames">
            <summary>
            Gets user names of the users in the Conversation.
            </summary>
        </member>
        <member name="T:Rendition.Admin.ConversationMessage">
            <summary>
            A message in a Conversation.
            </summary>
        </member>
        <member name="F:Rendition.Admin.ConversationMessage.Id">
            <summary>
            The unique id of this message.
            </summary>
        </member>
        <member name="F:Rendition.Admin.ConversationMessage.Message">
            <summary>
            The message value.
            </summary>
        </member>
        <member name="F:Rendition.Admin.ConversationMessage.SentOn">
            <summary>
            The date this message was sent on.
            </summary>
        </member>
        <member name="F:Rendition.Admin.ConversationMessage.User">
            <summary>
            The user who created this message.
            </summary>
        </member>
        <member name="F:Rendition.Admin.ConversationMessage.Version">
            <summary>
            Version of the Conversation this message was created on.
            </summary>
        </member>
        <member name="M:Rendition.Admin.ConversationMessage.#ctor(System.String,Rendition.Commerce.User)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Admin.ConversationMessage"/> class.
            </summary>
            <param name="_message">The _message.</param>
            <param name="_user">The _user.</param>
        </member>
        <member name="P:Rendition.Admin.ConversationMessage.UserId">
            <summary>
            The id of the user who created this message.
            </summary>
        </member>
        <member name="P:Rendition.Admin.ConversationMessage.Handle">
            <summary>
            The handle of the user who created this message.
            </summary>
        </member>
        <member name="T:Rendition.Main">
            <summary>
            This class holds all the static information for the site.  All users share in this data so
            watch out that you don't modify any fields that shouldn't be modified.
            </summary>
        </member>
        <member name="F:Rendition.Main.EVENT_SOURCE">
            <summary>
            The event source name of this module.
            </summary>
        </member>
        <member name="F:Rendition.Main.FTP_AGENT_SIGNATURE">
            <summary>
            Client agent signature for FTP connections.
            </summary>
        </member>
        <member name="F:Rendition.Main.SAD_MESSAGE">
            <summary>
            A sad message for people who want to see the site but cannot.
            </summary>
        </member>
        <member name="F:Rendition.Main.DATABASE_VERSION">
            <summary>
            Version of the /admin/x.sql scripts that will execute against out of date databases on startup
            </summary>
        </member>
        <member name="F:Rendition.Main.SHA1HASHSALT">
            <summary>
            SHA1 Salt
            </summary>
        </member>
        <member name="M:Rendition.Main.Init(System.Web.HttpApplication)">
            <summary>
            Site startup.
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Rendition.Main.readWebConfigAppSetting(System.String[])">
            <summary>
            Reads the web config app setting.
            </summary>
            <param name="keyNames">The key names.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Main.readConfiguration">
            <summary>
            Reads the web.config configuration.
            </summary>
        </member>
        <member name="M:Rendition.Main.RewriteUrl(System.Web.HttpContext)">
            <summary>
            Rewrites the URL.
            </summary>
            <param name="current">The current HttpContext.</param>
            <returns>True when the request was handled by a rewriter.</returns>
        </member>
        <member name="M:Rendition.Main.redirectUrl(System.Web.HttpContext)">
            <summary>
            Redirects the URL.
            </summary>
            <param name="current">The current HttpContext.</param>
            <returns>True when the request was handled by a rewriter.</returns>
        </member>
        <member name="M:Rendition.Main.ErrorPage(System.Web.HttpContext,System.Int32,System.String)">
            <summary>
            Causes a file the not found page to appear.
            </summary>
            <param name="current">The current.</param>
            <param name="errorCode">The error code.</param>
            <param name="description">The description.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Main.sendNeverExpiresHeaders">
            <summary>
            Sends the never expires headers.
            </summary>
        </member>
        <member name="M:Rendition.Main.getCurrentTrustLevel">
            <summary>
            Gets the current trust level.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rendition.Main.getIISVersion">
            <summary>
            Gets the IIS version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rendition.Main.executeResponders(System.Web.HttpContext)">
            <summary>
            Executes the AJAX responders.
            </summary>
            <param name="current">The current HttpContext.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Main.processHTTPRequest(System.Web.HttpApplication)">
            <summary>
            Processes the HTTP request.
            </summary>
            <param name="httpApp">The HTTP app.</param>
            <returns>When true, a AJAX responder was called</returns>
        </member>
        <member name="M:Rendition.Main.isResourceFile(System.String)">
            <summary>
            Checks if the file is a .jpg, .gif, .png, .ico, .js or .css.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>
              Returns true if the file is a .jpg, .gif, .png, .ico, .js or .css file.
            </returns>
        </member>
        <member name="M:Rendition.Main.IsAdminPath(System.String)">
            <summary>
            Determines whether [is an Admin path].
            </summary>
            <returns>
              <c>true</c> if [is Admin path]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rendition.Main.IsVirtualResourcePath(System.String)">
            <summary>
            Determines whether path is a Admin, Admin/responder or responder path.
            </summary>
            <returns>
              <c>true</c> if [is Admin path]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rendition.Main.checkIfSetupMode(System.Web.HttpContext)">
            <summary>
            Returns true when setup mode is set and a page other than
            Admin/setup.html or Admin/responder is requested.
            </summary>
            <param name="current">The current HttpContext.</param>
        </member>
        <member name="F:Rendition.Main.defaultErrorReport">
            <summary>
            The error message generated by the
            http module.
            </summary>
        </member>
        <member name="M:Rendition.Main.BeginRequest(System.Object,System.EventArgs)">
            <summary>
            Begins the HTTP client request.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Main.startShipmentUpdateQueue">
            <summary>
            Starts the shipment update queue.
            </summary>
        </member>
        <member name="M:Rendition.Main.startConnectionChecking">
            <summary>
            Starts database connection checking.
            </summary>
        </member>
        <member name="M:Rendition.Main.startEmailQueue">
            <summary>
            Starts the email queue.
            </summary>
        </member>
        <member name="M:Rendition.Main.OnAppError(System.Object,System.EventArgs)">
            <summary>
            Called when [app error].
            </summary>
            <param name="o">The o.</param>
            <param name="ea">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Main.OnEndRequest(System.Object,System.EventArgs)">
            <summary>
            Called when [end request].
            </summary>
            <param name="o">The o.</param>
            <param name="ea">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Main.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule"/>.
            </summary>
        </member>
        <member name="M:Rendition.Main.waitUntilStartup">
            <summary>
            Holds waiting HTTP threads while the site starts up.
            </summary>
        </member>
        <member name="F:Rendition.Main.publicFiles">
            <summary>
            List of the public files in the lib virtual path.
            </summary>
        </member>
        <member name="F:Rendition.Main.UseFormsBasedAuth">
            <summary>
            Uses a logon HTML page instead of RFC 2617 HTTP Authentication
            </summary>
        </member>
        <member name="F:Rendition.Main.TrustLevel">
            <summary>
            The current trust level of the virtual server.
            </summary>
        </member>
        <member name="F:Rendition.Main.IISVersion">
            <summary>
            The version of the IIS server the application is running on.
            </summary>
        </member>
        <member name="F:Rendition.Main.CanUseSSL">
            <summary>
            Indicates if the HTTP virtual server can facilitate SSL connections.
            </summary>
        </member>
        <member name="F:Rendition.Main.Conversations">
            <summary>
            List of conversations in this application.
            </summary>
        </member>
        <member name="F:Rendition.Main.SystemMessages">
            <summary>
            Messages produced by the utilites.debug for consumption in the client-server sync function Admin.systemMessage
            </summary>
        </member>
        <member name="F:Rendition.Main.Timers">
            <summary>
            Timers this instance is running.
            </summary>
        </member>
        <member name="F:Rendition.Main.MaxLogCacheCount">
            <summary>
            The maximum size the log cache can reach before it begins removing old entries.
            </summary>
        </member>
        <member name="F:Rendition.Main.Log">
            <summary>
            Log cache.  This isn't the log.  This array contains the log for this application instance.
            </summary>
        </member>
        <member name="F:Rendition.Main.Version">
            <summary>
            Version of Rendition.
            </summary>
        </member>
        <member name="F:Rendition.Main.Bitness">
            <summary>
            Which module to use
            </summary>
        </member>
        <member name="F:Rendition.Main.TrackImages">
            <summary>
            Don't log information about images downloaded.  If you're not into huge databases turn this off.
            </summary>
        </member>
        <member name="F:Rendition.Main.MethodTitle">
            <summary>
            Name of the field used to pass JSON method request string in
            </summary>
        </member>
        <member name="F:Rendition.Main.PublicDirectory">
            <summary>
            The directory that users will type into the URL to get to the public scripts and pages.
            </summary>
        </member>
        <member name="F:Rendition.Main.AdminDirectory">
            <summary>
            The directory that users will type into the URL to get to the Admin program.
            </summary>
        </member>
        <member name="F:Rendition.Main.PluginDirectory">
            <summary>
            The directory that plugins must be installed into.
            </summary>
        </member>
        <member name="F:Rendition.Main.UserDirectory">
            <summary>
            The directory that users folders and files will appear when created by default.
            </summary>
        </member>
        <member name="F:Rendition.Main.ImagesDirectory">
            <summary>
            Directory where item and gallery images will render to.
            </summary>
        </member>
        <member name="F:Rendition.Main.TempDirectory">
            <summary>
            Temporary directory for storing uploads before they are turned into files.
            </summary>
        </member>
        <member name="F:Rendition.Main.Responder">
            <summary>
            AJAX responder URL.  Point all the client side AJAX functions to this virtual URL.
            </summary>
        </member>
        <member name="F:Rendition.Main.AdminResponder">
            <summary>
            AJAX Admin responder URL.  Point all the Admin client side AJAX functions to this virtual URL.
            This URL must always be secure!  Only people logged on as administrators can access this URL.
            This URL executes very unsafe functions (execute arbitrary code, execute arbitrary queries).
            </summary>
        </member>
        <member name="F:Rendition.Main.connectionChecker">
            <summary>
            This Timer checks to see that site.cn is stll connected and if not goes into a retry
            state to reconnect to the database.
            </summary>
        </member>
        <member name="F:Rendition.Main.emailQueue">
            <summary>
            This Timer checks the email queue for emails that have not been sent yet, and when it finds them
            it sends them.
            </summary>
        </member>
        <member name="F:Rendition.Main.shipmentUpdateQueue">
            <summary>
            This Timer checks to see if any shipment rows have been updated with tracking information
            </summary>
        </member>
        <member name="F:Rendition.Main.inventoryUpdate">
            <summary>
            This Timer periodically updates the inventory levels
            </summary>
        </member>
        <member name="F:Rendition.Main.emailQueueTableChecksum">
            <summary>
            The last checksum of the email queue table (no longer used).
            </summary>
        </member>
        <member name="F:Rendition.Main.PhysicalApplicationPath">
            <summary>
            Physical path to the application on the server.
            </summary>
        </member>
        <member name="F:Rendition.Main.tConnections">
            <summary>
            Telnet connections
            </summary>
        </member>
        <member name="F:Rendition.Main.Site">
            <summary>
            The site and all its fields and methods and everything.
            </summary>
        </member>
        <member name="F:Rendition.Main.State">
            <summary>
            Startup state of the application.
            0 = Not yet started, -1 cannot logon to SQL, -2 = begining startup, -3 shutting down, 1 = Started, 
            </summary>
        </member>
        <member name="F:Rendition.Main.App">
            <summary>
            The application object.
            </summary>
        </member>
        <member name="F:Rendition.Main.Plugins">
            <summary>
            A list of running plugins.
            </summary>
        </member>
        <member name="F:Rendition.Main.ProgressInfos">
            <summary>
            A list of upload infos.
            </summary>
        </member>
        <member name="F:Rendition.Main.TelnetServerPort">
            <summary>
            The default port for the telnet server.
            </summary>
        </member>
        <member name="F:Rendition.Main.setupMode">
            <summary>
            When the site is in setup mode (can't read in web.config) this is true;
            </summary>
        </member>
        <member name="F:Rendition.Main.elevated_security_user">
            <summary>
            user name for access elevation
            </summary>
        </member>
        <member name="F:Rendition.Main.elevated_security_password">
            <summary>
            password for access elevation
            </summary>
        </member>
        <member name="F:Rendition.Main.elevated_security_domain">
            <summary>
            domain name for access elevation
            </summary>
        </member>
        <member name="F:Rendition.Main.debug">
            <summary>
            Debug trace listener
            </summary>
        </member>
        <member name="M:Rendition.Main.emptyShipmentQueue(System.Object,System.EventArgs)">
            <summary>
            Event handler for shipmentUpdateQueue
            </summary>
        </member>
        <member name="M:Rendition.Main.getRscString(System.String)">
            <summary>
            Converts a file path into the interal resource string hash.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Main.getAdminResource(System.String)">
            <summary>
            Gets a file out of the resx.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Main.emptyEmailQueue(System.Object,System.EventArgs)">
            <summary>
            Empties the email queue.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Main.emailSentCallback(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Async email send callback.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Main.connectionChecker_elapsed(System.Object,System.EventArgs)">
            <summary>
            Handles the elapsed event of the connectionChecker control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Main.GetCurrentSession">
            <summary>
            Gets the current session requesting the HTTP resource.
            </summary>
            <returns>site.session</returns>
        </member>
        <member name="M:Rendition.Main.getPlugins">
            <summary>
            Gets the plugins from the plugin directory.
            </summary>
        </member>
        <member name="P:Rendition.Main.ModuleName">
            <summary>
            Gets the name of the module.
            </summary>
            <value>The name of the module.</value>
        </member>
        <member name="T:Rendition.Main.redirectorTypes">
            <summary>
            What type of plugins are acceptable in this system.
            </summary>
        </member>
        <member name="F:Rendition.Main.redirectorTypes.ResponseFilter">
            <summary>
            A filter that is used on output from Response.Write.
            </summary>
        </member>
        <member name="F:Rendition.Main.redirectorTypes.Rewriter">
            <summary>
            Rewrite filter for URLs. This redirects the page the user sees
            without changing the URL in their Address bar.
            </summary>
        </member>
        <member name="F:Rendition.Main.redirectorTypes.Redirector">
            <summary>
            A redirector redirects users to a new page,
            changing the URL in their Address bar.
            </summary>
        </member>
        <member name="F:Rendition.Main.redirectorTypes.Error">
            <summary>
            An error directive replaces the standard error page with
            a custom one based on the status match (404, 500 etc.)
            </summary>
        </member>
        <member name="T:Rendition.Commerce">
            <summary>
            Rendition.Commerce
            
            This class contains static methods used indirectly by the JSON responder and adminResponder
            and internally by other methods.
            
            The classes Rendition.merchant and Rendition.Admin use System.Reflection to expose
            Their static methods to the JSON responder and adminResponder and wrap some of the
            methods in this class.  Class Rendition.Admin contains all the dangerous CRUD methods
            that should only be avaliable to administrators while Rendition.merchant contains only methods
            that should be avaliable to anonomyous internet users.  
            
            Rendition.Commerce (this class) contains methods that 
            both Rendition.Admin and Rendition.merchant wrap.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.RemoveFromWishlist(System.String)">
            <summary>
            Removes an item from the user's CSV list of items in session.Properties["wishlist"].
            </summary>
            <param name="itemNumber">The item number.</param>
            <returns>{error:0,desc:"error description",wishList:"wishListCSV"}.</returns>
        </member>
        <member name="M:Rendition.Commerce.AddToWishlist(System.String)">
            <summary>
            Adds an item to the user's CSV list of items in session.Properties["wishlist"].
            </summary>
            <param name="itemNumber">The item number.</param>
            <returns>{error:0,desc:"error description",wishList:"wishlistCSV"}.</returns>
        </member>
        <member name="M:Rendition.Commerce.UpdateOrderBy(System.Int32)">
            <summary>
            updates current session's order by setting
            </summary>
            <param name="orderBy">Integer of the order by to write to the current sessions order by setting</param>
            <returns>{error:0,desc:"error description"}.</returns>
        </member>
        <member name="M:Rendition.Commerce.UpdateRecordsPerPage(System.Int32)">
            <summary>
            updates current session's records per page setting
            </summary>
            <param name="records_per_page">Integer of the records per page to write to the current sessions records per page setting</param>
            <returns>{error:0,desc:"error description"}.</returns>
        </member>
        <member name="M:Rendition.Commerce.UpdateListMode(System.Int32)">
            <summary>
            updates current session's list mode setting
            </summary>
            <param name="list_mode">Integer of the list mode to write to the current sessions list mode setting</param>
            <returns>{error:0,desc:"error description",listMode:x}.</returns>
        </member>
        <member name="M:Rendition.Commerce.SetDiscountCode(System.String)">
            <summary>
            Set the session.Properties["discountCode"] value when discountCode matches a discount code in the database.
            </summary>
            <param name="discountCode">The discount code.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Commerce.EmailAFriend(Rendition.Commerce.Item,Rendition.Commerce.User,System.String,System.String)">
            <summary>
            Emails A friend information about this item using the createemail event handler.
            </summary>
            <param name="item">The item.</param>
            <param name="user">The user.</param>
            <param name="message">The message.</param>
            <param name="emailTo">Send the email to.</param>
            <returns>{error:0,desc:"error description"}.</returns>
        </member>
        <member name="M:Rendition.Commerce.ChangePassword(System.Int32,System.String,System.String)">
            <summary>
            Changes the password of a given account when the old password is provided.
            </summary>
            <param name="userId">The user id.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Commerce.ResetPassword(System.String)">
            <summary>
            Resets the password of the account matching the email provided in the argument.
            An email will be sent to the account with the new randomly created password.
            </summary>
            <param name="email">The email.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Commerce.AddFlag(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the flag.  Wrapper for addFlagWithTransaction.
            </summary>
            <param name="_flagType">Type of the _flag.</param>
            <param name="objectType">Type of the object.</param>
            <param name="objectId">The object id.</param>
            <param name="comments">The comments.</param>
            <returns>{error:0,desc:""}</returns>
        </member>
        <member name="M:Rendition.Commerce.InsertFlagHistoryListItem(System.String,System.String,System.String,System.Int32,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Inserts the flag history.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="newId">The new id.</param>
            <param name="objectId">The object id.</param>
            <param name="flagType">Type of the flag.</param>
            <param name="comments">The comments.</param>
            <param name="cn">SQL connection.</param>
            <param name="flagTransaction">SQL transaction.</param>
        </member>
        <member name="M:Rendition.Commerce.AddFlagWithTransaction(System.String,System.String,System.String,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Adds a flag with transaction.  This is the only proper way to add a flag (aka change status).
            </summary>
            <param name="_flagType">Type of the flag.</param>
            <param name="objectType">Type of the object: line, shipment, order.</param>
            <param name="objectId">The object id.</param>
            <param name="comments">The comments.</param>
            <param name="fcn">SQL connection.</param>
            <param name="flagTransaction">SQL transaction.</param>
            <returns>{error:0,desc:""}</returns>
        </member>
        <member name="M:Rendition.Commerce.ExecPlaceOrder(System.Guid,System.Int32,System.Guid,System.Boolean,System.Guid,System.Guid,System.String,System.DateTime,System.Int32,System.Decimal,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Execs the place order.
            </summary>
            <param name="sessionId">The session id.</param>
            <param name="userId">The user id.</param>
            <param name="paymentMethodId">The payment method id.</param>
            <param name="testMode">if set to <c>true</c> [test mode].</param>
            <param name="uniqueSiteId">The unique site id.</param>
            <param name="cartSessionId">The cart session id.</param>
            <param name="purchaseOrder">The purchase order.</param>
            <param name="orderDate">The order date.</param>
            <param name="termId">The term id.</param>
            <param name="discount">The discount.</param>
            <param name="cn">The connection being used.</param>
            <param name="trans">The transaction being used.</param>
            <returns>{error:0,desc:""}</returns>
        </member>
        <member name="M:Rendition.Commerce.PlaceOrder(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Places an order once a cart has been filled with items.
            </summary>
            <param name="args">JSON Object that can contain the following keys (even if blank)		
            sessionId
            userId
            nameOnCard
            cardType
            cardNumber
            expMonth
            expYear
            secNumber
            soldBy
            requisitionedBy
            parentOrderId
            deliverBy
            purchaseOrder
            manifestNumber
            vendorAccountNumber
            FOB
            scannedImage
            comments
            billToContactId
            billToFirstName
            billToLastName
            billToAddress1
            billToAddress2
            billToCity
            billToState
            billToZip
            billToCountry
            billToCompany
            billToEmail
            billToSendShipmentUpdates
            billToHomePhone
            billToWorkPhone
            billToSpecialInstructions
            billToEmailAds
            billToComments
            billToRateId
            shipToContactId
            shipToFirstName
            shipToLastName
            shipToAddress1
            shipToAddress2
            shipToCity
            shipToState
            shipToZip
            shipToCountry
            shipToCompany
            shipToEmail
            shipToSendShipmentUpdates
            shipToHomePhone
            shipToWorkPhone
            shipToSpecialInstructions
            shipToComments
            shipToEmailAds
            shipToRateId
            </param>
            <returns>{billToAddressId:Guid,paymentMethodId:Guid,orderNumber:string,subTotal:float,grandTotal:float,taxTotal:float,shipTotal:float,
            discounted:Guid,printState:string,concatSerialNumbers:string,concatShipmentNumbers:float,concatSerialIds:float,
            concatShipmentIds:Guid,error:Guid,errorDescription:string,orderId:float,discountPct:float,
            discountCode:Guid,termId:int,userId:int,approvedBy:int,scannedImage:string}.</returns>
        </member>
        <member name="M:Rendition.Commerce.PlaceOrderWithTransaction(System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Places an order once a cart has been filled with items using the specified sessionId within a transaction.
            </summary>
            <param name="args">JSON Object that can contain the following keys (even if blank)
            sessionId
            userId
            nameOnCard
            cardType
            cardNumber
            expMonth
            expYear
            secNumber
            soldBy
            requisitionedBy
            parentOrderId
            deliverBy
            purchaseOrder
            manifestNumber
            vendorAccountNumber
            FOB
            scannedImage
            comments
            billToContactId
            billToFirstName
            billToLastName
            billToAddress1
            billToAddress2
            billToCity
            billToState
            billToZip
            billToCountry
            billToCompany
            billToEmail
            billToSendShipmentUpdates
            billToHomePhone
            billToWorkPhone
            billToSpecialInstructions
            billToEmailAds
            billToComments
            billToRateId
            shipToContactId
            shipToFirstName
            shipToLastName
            shipToAddress1
            shipToAddress2
            shipToCity
            shipToState
            shipToZip
            shipToCountry
            shipToCompany
            shipToEmail
            shipToSendShipmentUpdates
            shipToHomePhone
            shipToWorkPhone
            shipToSpecialInstructions
            shipToComments
            shipToEmailAds
            shipToRateId</param>
            <param name="fcn">The FCN.</param>
            <param name="trans">The transaction being used.</param>
            <returns>
            {billToAddressId:Guid,paymentMethodId:Guid,orderNumber:string,subTotal:float,grandTotal:float,taxTotal:float,shipTotal:float,
            discounted:Guid,printState:string,concatSerialNumbers:string,concatShipmentNumbers:float,concatSerialIds:float,
            concatShipmentIds:Guid,error:Guid,errorDescription:string,orderId:float,discountPct:float,
            discountCode:Guid,termId:int,userId:int,approvedBy:int,scannedImage:string}.
            </returns>
        </member>
        <member name="M:Rendition.Commerce.RefreshUserById(System.Int32)">
            <summary>
            Refreshes users data in the site cache.
            </summary>
            <param name="userId">The userId.</param>
        </member>
        <member name="M:Rendition.Commerce.RefreshSiteDataThreaded">
            <summary>
            Refreshes the site data using another thread.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.RefreshSiteData">
            <summary>
            Refreshes the site data.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.RecalculateOrder(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Recalculates the order.
            </summary>
            <param name="args">The order arguments.</param>
            <returns>{error:0,desc:""}</returns>
        </member>
        <member name="M:Rendition.Commerce.RecalculateOrder(System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Recalculates the order.
            </summary>
            <param name="args">The order arguments.</param>
            <param name="fcn">The FCN.</param>
            <param name="ftrans">The ftrans.</param>
            <returns>{error:0,desc:""}</returns>
        </member>
        <member name="M:Rendition.Commerce.CancelItems(System.Collections.Generic.List{System.Object})">
            <summary>
            Cancels the items.
            </summary>
            <param name="args">The args.</param>
            <returns>{error:0,desc:""}</returns>
        </member>
        <member name="M:Rendition.Commerce.BackorderItems(System.Collections.Generic.List{System.Object})">
            <summary>
            Backorders the items.
            </summary>
            <param name="args">The args.</param>
            <returns>{error:0,desc:""}</returns>
        </member>
        <member name="M:Rendition.Commerce.CancelBackorderItems(System.Collections.Generic.List{System.Object},System.Boolean)">
            <summary>
            Cancels or backorders the items in an existing order.
            </summary>
            <param name="args">The args.</param>
            <param name="cancel">if set to <c>true</c> [cancel] else backorder</param>
            <returns>{error:0,desc:""}</returns>
        </member>
        <member name="M:Rendition.Commerce.UpdateOrderItem(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Updates an item that is already in an order.
            </summary>
            <param name="args">The line arguments.</param>
            <returns>{error:0,desc:""}</returns>
        </member>
        <member name="M:Rendition.Commerce.PlacedOrderEmail(Rendition.Commerce.Order,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Emails information about this order using the createemail event handler.
            </summary>
            <param name="order">The order.</param>
            <returns>{error:0,desc:"error description"}.</returns>
        </member>
        <member name="M:Rendition.Commerce.LostPasswordEmail(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Emails the user a copy of their password using the createemail event handler.
            </summary>
            <param name="args">Dictionary containg the userId.</param>
            <returns>{error:0,desc:"error description"}.</returns>
        </member>
        <member name="M:Rendition.Commerce.ShipmentUpdateEmail(Rendition.Commerce.Order,Rendition.ShipmentUpdateArgs)">
            <summary>
            Emails the user a shipment update containing all the information about their shipment.
            </summary>
            <param name="order">The order.</param>
            <param name="args">Dictionary containing the shipmentId.</param>
            <returns>{error:0,desc:"error description"}.</returns>
        </member>
        <member name="M:Rendition.Commerce.SendEmailArgResult(Rendition.CreateEmailEventArgs,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Used internally by other methods to clear the createemail event.
            </summary>
            <param name="emailArgs">The <see cref="T:Rendition.CreateEmailEventArgs"/> instance containing the event data.</param>
            <returns>{error:0,desc:"error description"}.</returns>
        </member>
        <member name="M:Rendition.Commerce.RenderEmail(System.String,Rendition.CreateEmailEventArgs)">
            <summary>
            Renders an email using the information provided in args.
            </summary>
            <param name="pathToEmail">The path to email source code (e.g.: ~/plugins/email/someEmail.cs).</param>
            <param name="args">The <see cref="T:Rendition.CreateEmailEventArgs"/> instance containing the event data.</param>
            <returns>{error:0,desc:"error description",message:"extended error info"}.</returns>
        </member>
        <member name="M:Rendition.Commerce.SendEmail(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Queue email.  This method is used by other methods to enter email into the database queue for clearing.
            </summary>
            <param name="emailMessage">The email message.</param>
            <param name="emailSubject">The email subject.</param>
            <param name="sendTo">The send to.</param>
            <param name="sendFrom">The send from.</param>
            <param name="bcc">The BCC.</param>
        </member>
        <member name="M:Rendition.Commerce.SendEmail(System.String,System.String,System.String,System.String,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Base queue email method.  This method is used by other methods to enter email into the database queue for clearing.
            </summary>
            <param name="emailMessage">The email message.</param>
            <param name="emailSubject">The email subject.</param>
            <param name="sendTo">The send to.</param>
            <param name="sendFrom">The send from.</param>
            <param name="bcc">The BCC.</param>
            <param name="cn">The SQL connection to use.</param>
            <param name="trans">The SQL transaction to use.</param>
        </member>
        <member name="M:Rendition.Commerce.RequestReplace(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Replaces regex pattern &lt;#([^#]+)#&gt; in the query with Request[xxx] variable or one of the queryArguments.  Very dangerous! 
            </summary>
            <param name="query">The query.</param>
            <param name="queryArguments">The query arguments.</param>
            <returns>Resulting rendered string</returns>
        </member>
        <member name="M:Rendition.Commerce.MakeStaticPage(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a PDF page from a file and flattens after adding the dynamics from the dictionary queryArguments to it.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="queryArguments">The query arguments.</param>
            <returns>rendered pdf page</returns>
        </member>
        <member name="M:Rendition.Commerce.GetFontFromDict(System.String)">
            <summary>
            Internal font hash table for reading PDF objects
            </summary>
            <param name="dictValue">The dict value.</param>
            <returns>decoded font string</returns>
        </member>
        <member name="M:Rendition.Commerce.WriteField(System.Int32,System.Int32,System.Single,System.String,iTextSharp.text.pdf.PdfStamper@,System.Collections.Generic.Dictionary{System.String,Rendition.Commerce.AField}@,System.Int32,System.Int32,System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Writes the field into a PDF document from a dataTable.
            </summary>
            <param name="record">The index of the record.</param>
            <param name="fieldType">Type of the field.</param>
            <param name="topAdd">The Y coordnate (should be a running total).</param>
            <param name="fieldKey">The keyname of the field.</param>
            <param name="stamp">PDf stamp object to stamp with.</param>
            <param name="docFields">Collection of fields that may go onto the document.</param>
            <param name="currentPage">The current page.</param>
            <param name="totalPages">The total number of pages.</param>
            <param name="dt">The SQL dataTable.</param>
            <param name="queryArguments">Collection to replace AField values (from docFields) with.</param>
        </member>
        <member name="M:Rendition.Commerce.WriteAFieldCollection(iTextSharp.text.pdf.PdfStamper@,System.Collections.Generic.Dictionary{System.String,Rendition.Commerce.AField},System.String)">
            <summary>
            Writes the a collection of aFields to the destination document.
            </summary>
            <param name="stamp">The stamp.</param>
            <param name="docFields">The doc fields.</param>
        </member>
        <member name="M:Rendition.Commerce.MakePage(System.String,System.Int32@,System.Data.DataTable@,System.Data.DataTable@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Makes a single PDF page by reference.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="x">The running record total.</param>
            <param name="dt">DataTable contaning report query.</param>
            <param name="bdt">DataTable containing the report detail query.</param>
            <param name="verticalSpacing">The vertical spacing between each line in the report detail.</param>
            <param name="rpp">Records Per Page.</param>
            <param name="page">Current Page to read from.</param>
            <param name="currentPage">Current page to write to.</param>
            <param name="totalPages">The total number of pages.</param>
            <param name="queryArguments">The query arguments.</param>
            <returns>rendered pdf page</returns>
        </member>
        <member name="M:Rendition.Commerce.GetRPP(System.String,System.Int32@,System.Int32@,System.Data.DataTable,System.Int32)">
            <summary>
            Gets the RPP value from the PDF.
            </summary>
            <param name="inputRPP">The input name of the RPP input.</param>
            <param name="rpp">By reference the RPP value you want to fill.</param>
            <param name="pOffset">By reference the page offset (page*rpp=x).</param>
            <param name="bdt">The report detail dataTable.</param>
            <param name="y">The current record iteration.</param>
        </member>
        <member name="M:Rendition.Commerce.OutputBuffer(System.IO.MemoryStream,System.String)">
            <summary>
            Outputs the PDF buffer to the HTTP client as a file attachment.
            </summary>
            <param name="os">The PDF memory stream.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Rendition.Commerce.OutputBuffer(System.IO.MemoryStream,System.String,System.Boolean)">
            <summary>
            Outputs the PDF buffer to the HTTP client, optinally as an attachment.
            </summary>
            <param name="os">The PDF memory stream.</param>
            <param name="fileName">Name of the file.</param>
            <param name="attachment">if set to <c>true</c> file will be an attachment (download as a file, not a new window).</param>
        </member>
        <member name="M:Rendition.Commerce.ErrorDocument(System.String)">
            <summary>
            Creates a PDF document with a description of the error that occured.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:Rendition.Commerce.Print(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Prints the specified dynamic PDF document as an attachment.
            These documents must fit the correct specification to be dynamic.
            Dynamic PDF documents contain specially labeled fields that will
            permit the system to execute queries and use the adminResponder virtual
            execution method to return binary images, strings and other data and to execute arbitrary code.
            </summary>
            <param name="refDoc">The ref doc.</param>
            <param name="queryArguments">The query arguments.</param>
        </member>
        <member name="M:Rendition.Commerce.Print(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Prints the specified dynamic PDF document.
            These documents must fit the correct specification to be dynamic.
            Dynamic PDF documents contain specially labeled fields that will
            permit the system to execute queries and use the adminResponder virtual
            execution method to return binary images, strings and other data and to execute arbitrary code.
            </summary>
            <param name="refDoc">The ref doc.</param>
            <param name="queryArguments">The query arguments.</param>
            <param name="asAttachment">if set to <c>true</c> file will download as attachment (as a file, don't open in the current window).</param>
        </member>
        <member name="M:Rendition.Commerce.AddReview(System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
             creates a review for a hash match object accessable later thru _site._reviews
             </summary>
             <param name="args">JSON Object containging
            review_rating,
            review_message,
            review_objId,
            review_objType</param>
             <returns>{reviewId:Guid,userId:Int,rating:Int,value:string,archive:bool
             addDate:date,refType:string,refId:string,error:int,errorDesc:string}.</returns>
        </member>
        <member name="M:Rendition.Commerce.SetReplyState(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Can add a approve,disapprove or inappropriate to a reply using its replyId.  It will return
            the updated list of how many approves,disapproves or inappropriates this reply has recieved.
            </summary>
            <param name="args">The dictionary containing the keys:{
            	sessionId,
            	one of approve,disapprove or inappropriate as a boolean
            	replyId
            }.</param>
            <returns>{approve:x,disapprove:x,inappropriate:x,error:0,desc:"error description"}.</returns>
        </member>
        <member name="M:Rendition.Commerce.AddReply(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adds a reply to the reply or Blog matching the replyId key.
            Uses a SQL transaction to roll back changes if the boolean key "preview"
            is true, but still shows what would have happened.
            </summary>
            <param name="args">The argument dictionary {
            	replyId
            	email
            	subject
            	rating
            	userId
            	comment
            	addedOn
            	parentId
            	reference
            	disabled
            	approves
            	disapproves
            	flaggedInappropriate
            	message
            }</param>
            <returns>Dictionary containing {error:0,desc:"",subject:"blah",message:"blah"} when successfull or the error. </returns>
        </member>
        <member name="M:Rendition.Commerce.Recalculate(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            recalculates the selected sessionId
            </summary>
            <param name="args">The args.</param>
            <returns>
            {error:int,errorDescription:string,subTotal:float,taxTotal:float,estShipTotal:float,discountTotal:float,grandTotal:float}.
            </returns>
        </member>
        <member name="M:Rendition.Commerce.UpdateCart(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Updates the cart based on the dictionary provided.
            Pass the quantity of the item as qty+jguid(cartId) or as the jguid(cartId)
            All other form variables should be passed using their cartDetailId.
            </summary>
            <param name="args">The args.</param>
            <returns>{error:0,desc:"error description",items:item Collection,subTotal:x,taxTotal:x,estShipTotal:x,discountTotal:x,grandTotal:x,addresses:addressCollection}.</returns>
        </member>
        <member name="M:Rendition.Commerce.UpdateCartItem(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            updates an item or items in the selected sessions cart
            </summary>
            <param name="args">Dictionary Object containing sessionId, cartId, qty, and form inputs {key/value...}</param>
            <returns>Json Item Description with cart totals.</returns>
        </member>
        <member name="M:Rendition.Commerce.DeleteCartItem(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Deletes the cart item.
            </summary>
            <param name="args">{cartId:cartId}</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Commerce.EmptyCart(System.String)">
            <summary>
            empty the selected cart
            </summary>
            <param name="sessionId">Guid sessionId.</param>
            <returns>{success:bool}.</returns>
        </member>
        <member name="M:Rendition.Commerce.AddToCartProc(System.String,System.Int32,Rendition.Site.Session,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object,System.Boolean,System.Boolean)">
            <summary>
            Returns a _cart_item AND adds the selected item to the user's cart
            </summary>
            <param name="item_number">Number of the item you want to add to the user's cart</param>
            <param name="item_qty">Quantity of the item you want to add</param>
            <param name="session">session</param>
            <param name="args">The args.</param>
            <param name="price">The price.</param>
            <param name="allowPreorder">if set to <c>true</c> [allow preorder].</param>
            <param name="allow_priceOverride">if set to <c>true</c> [allow_price override].</param>
            <returns>
            Returns an empty string rather than a null from the Request[] object.
            </returns>
        </member>
        <member name="M:Rendition.Commerce.addToCartProc(System.String,System.Int32,Rendition.Site.Session,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object,System.Boolean,System.Boolean,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Returns a _cart_item AND adds the selected item to the user's cart within a transaction
            </summary>
            <param name="item_number">Number of the item you want to add to the user's cart</param>
            <param name="item_qty">Quantity of the item you want to add</param>
            <param name="session">session</param>
            <param name="args">The args.</param>
            <param name="price">The price.</param>
            <param name="allowPreorder">if set to <c>true</c> [allow preorder].</param>
            <param name="allow_price_override">if set to <c>true</c> [allow_price_override].</param>
            <param name="cn">The connection being used.</param>
            <param name="trans">The transaction being used.</param>
            <returns>
            Returns an empty string rather than a null from the Request[] object.
            </returns>
        </member>
        <member name="M:Rendition.Commerce.DuplicateCartId(System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Duplicates an item into a new cart with transactions
            </summary>
            <param name="args">{cartId:string}</param>
            <param name="cn">The connection being used.</param>
            <param name="trans">The transaction being used.</param>
            <returns>
            {error:int,description:string + more}.
            </returns>
        </member>
        <member name="M:Rendition.Commerce.AddToCart(System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Adds an item to the selected sessions cart with transactions
            </summary>
            <param name="args">{itemnumber:string,qty:int,sessionid:Guid,other misc item form inputs}</param>
            <param name="cn">The connection being used.</param>
            <param name="trans">The transaction being used.</param>
            <returns>
            {itemNumber:string,price:float,qty:int,cartId:Guid,addressId:Guid
            sessionId:Guid,packingSlipImage:string,auxillaryImage:string,cartImage:string,detailImage:string,
            fullSizeImage:string,listingImage:string,listing2Image:string,description:string,
            form:string,error_id:int,error_desc:string,inputs:Dictionary}.
            </returns>
        </member>
        <member name="M:Rendition.Commerce.PostJournalEntries(System.Collections.Generic.List{System.Object})">
            <summary>
            Posts the journal entries.
            </summary>
            <param name="journalEntries">The journal entries.
            Must be a JSON object in this format:
            	{
            		userId: int userId,
            		debit: float debit,
            		credit: float credit,
            		date: string date (MM/DD/YYYY),
            		comments: string comments
            	}
            </param>
            <returns>{error:0,desc:"error description"}</returns>
        </member>
        <member name="M:Rendition.Commerce.PostPaymentsToGeneralLedger(System.Collections.Generic.List{System.Object},System.String,System.String,System.Boolean)">
            <summary>
            Posts payments to general ledger.
            </summary>
            <param name="ids">The payment ids.</param>
            <param name="postingDate">The posting date.</param>
            <param name="postingNotes">The posting notes.</param>
            <param name="preview">if set to <c>true</c> [preview].</param>
            <returns>{error:0,desc:"error description",preview:false,
            generalLedgerEntries:{
            	drDate,
            	drDetails,
            	drReference,
            	drAmount,
            	crDate,
            	crDetails,
            	crReference,
            	crAmount
            },
            rawGL:{
            	generalLedgerId,
            	creditRecord,
            	debitRecord,
            	amount,
            	userId,
            	termId,
            	addDate,
            	reference,
            	orderId,
            	generalLedgerId
            },
            rawGLDetail:{
            	generalLedgerDetailId,
            	generalLedgerId,
            	refId,
            	refType
            }
            }.</returns>
        </member>
        <member name="M:Rendition.Commerce.PostOrdersToGeneralLedger(System.Collections.Generic.List{System.Object},System.String,System.String,System.Boolean)">
            <summary>
            Posts orders to general ledger.
            </summary>
            <param name="ids">The order ids.</param>
            <param name="postingDate">The posting date.</param>
            <param name="postingNotes">The posting notes.</param>
            <param name="preview">if set to <c>true</c> [preview].</param>
            <returns>{error:0,desc:"error description",preview:false,
            generalLedgerEntries:{
            	drDate,
            	drDetails,
            	drReference,
            	drAmount,
            	crDate,
            	crDetails,
            	crReference,
            	crAmount
            },
            rawGL:{
            	generalLedgerId,
            	creditRecord,
            	debitRecord,
            	amount,
            	userId,
            	termId,
            	addDate,
            	reference,
            	orderId,
            	generalLedgerId
            },
            rawGLDetail:{
            	generalLedgerDetailId,
            	generalLedgerId,
            	refId,
            	refType
            }
            }.</returns>
        </member>
        <member name="M:Rendition.Commerce.UpdateContact(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            updates a contact in the database
            </summary>
            <param name="args">JSON Object </param>
            <returns>{error:0,desc:""}</returns>
        </member>
        <member name="M:Rendition.Commerce.UpdateContactWithTransaction(System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            updates a contact in the database within a transaction
            </summary>
            <param name="args">JSON Object containing:
            contactId,userId,firstName,lastName,address1,address2,city,
            state,zip,country,homePhone,workPhone,email,specialInstructions,comments,
            sessionId,sendShipmentUpdates,emailads,company,defaultContact,rate</param>
            <param name="cn">The connection being used.</param>
            <param name="trans">The transaction being used.</param>
            <returns>{error:0,desc:""}</returns>
        </member>
        <member name="T:Rendition.Commerce.FlagType">
            <summary>
            A flag (AKA status) in the system.  A flag can be placed on one of:
            order, line, shipment to determine the status of the order, line or shipment.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.Id">
            <summary>
            Id of the flag as specified in the table flagTypes.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.FlagTypeName">
            <summary>
            Name of the flag.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.FlagTypeDesc">
            <summary>
            Description of the flag.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.UserLevel">
            <summary>
            What user level can implement the flag? (not implemented).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.ShipmentFlag">
            <summary>
            Can this flag be used for a shipment?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.UserFlag">
            <summary>
            Can this flag be used for a user? (not implemented).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.OrderFlag">
            <summary>
            Can this flag be used for an order?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.LineFlag">
            <summary>
            Can this flag be used for a line?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.LineDetailFlag">
            <summary>
            Can this flag be used for a line detail? (not implemented).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.CustomerReadable">
            <summary>
            Description of what the customer will for the status of this object.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.AgingDaysStatus1">
            <summary>
            How many days in this flag state from the day ordered is this aging status 1.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.AgingDaysStatus2">
            <summary>
            How many days in this flag state from the day ordered is this aging status 2.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.AgingDaysStatus3">
            <summary>
            How many days in this flag state from the day ordered is this aging status 3.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.AgingDaysStatus4">
            <summary>
            How many days in this flag state from the day ordered is this aging status 4.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.AgingDaysStatus5">
            <summary>
            How many days in this flag state from the day ordered is this aging status 5.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.ShowInProductionAgingReport">
            <summary>
            Does this flag show up in the production aging report?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.ProductionAgingReportOrder">
            <summary>
            What order does this flag appear in in the production aging report?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.CannotOccurBeforeFlagId">
            <summary>
            This flag cannot occur until this other flag occurs. (via dbo.serial_line.tr_line_deplete_inventory_UPDATE)
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.CannotOccurAfterFlagId">
            <summary>
            This flag cannot occur after this other flag has occured. (via dbo.serial_line.tr_line_deplete_inventory_UPDATE)
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.PurchaseOrderFlag">
            <summary>
            This flag can show up on purchase orders.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.PurchaseShipmentFlag">
            <summary>
            This flag can show up on purchase order shipments.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.PurchaseLineFlag">
            <summary>
            This flag can show up on purchase order lines.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.CreatesNewPurchaseOrder">
            <summary>
            When this flag occurs a new purchase order with the same set of line items is created. (not implemented)
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.FinishedPurchaseOrderFlag">
            <summary>
            When this flag occurs the line items on the purchase order will be turned into inventory items (cannot undo).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagType.Color">
            <summary>
            Color of the flag in various reports
            </summary>
        </member>
        <member name="M:Rendition.Commerce.FlagType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.  Returns FlagType.flagTypeName.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rendition.Commerce.FlagType.#ctor(System.Int32,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.FlagType"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="flagTypeName">Name of the flag type.</param>
            <param name="flagTypeDesc">The flag type desc.</param>
            <param name="userLevel">The user level.</param>
            <param name="shipmentFlag">if set to <c>true</c> [shipment flag].</param>
            <param name="userFlag">if set to <c>true</c> [user flag].</param>
            <param name="orderFlag">if set to <c>true</c> [order flag].</param>
            <param name="lineFlag">if set to <c>true</c> [line flag].</param>
            <param name="lineDetailFlag">if set to <c>true</c> [line detail flag].</param>
            <param name="customerReadable">The customer readable.</param>
            <param name="agingDaysStatus1">The aging days status1.</param>
            <param name="agingDaysStatus2">The aging days status2.</param>
            <param name="agingDaysStatus3">The aging days status3.</param>
            <param name="agingDaysStatus4">The aging days status4.</param>
            <param name="agingDaysStatus5">The aging days status5.</param>
            <param name="showInProductionAgingReport">if set to <c>true</c> [show in production aging report].</param>
            <param name="productionAgingReportOrder">The production aging report order.</param>
            <param name="cannotOccurBeforeFlagId">The cannot occur before flag id.</param>
            <param name="cannotOccurAfterFlagId">The cannot occur after flag id.</param>
            <param name="purchaseOrderFlag">if set to <c>true</c> [purchase order flag].</param>
            <param name="purchaseShipmentFlag">if set to <c>true</c> [purchase shipment flag].</param>
            <param name="purchaseLineFlag">if set to <c>true</c> [purchase line flag].</param>
            <param name="createsNewPurchaseOrder">if set to <c>true</c> [creates new purchase order].</param>
            <param name="finishedPurchaseOrderFlag">if set to <c>true</c> [finished purchase order flag].</param>
            <param name="color">The color.</param>
        </member>
        <member name="P:Rendition.Commerce.FlagType.Name">
            <summary>
            Gets the name.  Same as FlagType.flagTypeName.
            </summary>
        </member>
        <member name="T:Rendition.Commerce.FlagTypes">
            <summary>
            Collection of flags for the site to hold in its cache.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.FlagTypes.List">
            <summary>
            List of the flags.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.FlagTypes.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.FlagTypes"/> class.
            </summary>
            <param name="site">The site to read from.</param>
        </member>
        <member name="T:Rendition.Commerce.User">
            <summary>
            This class represents the user once they have logged on to the site
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.Email">
            <summary>
            The email Address of this user.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.Password">
            <summary>
            The user's password.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.UserId">
            <summary>
            The user's account number/userId
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.UserLevel">
            <summary>
            The user's level.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.Handle">
            <summary>
            The account's name.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.WholesaleDealer">
            <summary>
            Does this user get wholesale price lists?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.LastVisit">
            <summary>
            The last time this user visited the site.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.Comments">
            <summary>
            Coments about this user.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.Administrator">
            <summary>
            Is this user an administrator?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.WouldLikEmail">
            <summary>
            Does this user want to recieve ads in their email?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.CreateDate">
            <summary>
            The date this account was created.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.SessionId">
            <summary>
            The last sessionId this user logged in with.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.QuotaWholesale">
            <summary>
            The quota this user must meet to place an order (not implemented).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.QuotaComplete">
            <summary>
            The quota is complete (not implemented).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.Quota">
            <summary>
            The quota that must be met (not implemented).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.Credit">
            <summary>
            How much non monitary credit this user has (not implemented).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.LoggedIn">
            <summary>
            Is the user currently logged in (not implemented).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.PurchaseAccount">
            <summary>
            The account number used by your vendor.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.CreditLimit">
            <summary>
            The credit limit of this account (not implemented).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.Contact">
            <summary>
            Contact name for this account.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.Address1">
            <summary>
            Address line 1.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.Address2">
            <summary>
            Address line 2.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.Zip">
            <summary>
            Zip code.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.State">
            <summary>
            State.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.Country">
            <summary>
            Country.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.City">
            <summary>
            City.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.HomePhone">
            <summary>
            Home phone.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.WorkPhone">
            <summary>
            Work phone.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.CompanyEmail">
            <summary>
            Company email.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.Fax">
            <summary>
            Fax.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.WWW">
            <summary>
            Web site.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.FirstName">
            <summary>
            First name.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.LastName">
            <summary>
            Last name.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.TermId">
            <summary>
            Term Id this account uses by default.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.UsesTerms">
            <summary>
            This account uses terms (not implemented).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.AccountType">
            <summary>
            Type of account 0 = AR, 1 = AP, 2 = operator.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.Quote">
            <summary>
            Path to the custom quote PDF.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.Invoice">
            <summary>
            Path to the custom invoice PDF.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.PackingSlip">
            <summary>
            Path to the custom packing slip PDF.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.NoTax">
            <summary>
            Is this user exempt from taxation?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.AllowPreorders">
            <summary>
            Allow placing order on items that have no stock.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.FOB">
            <summary>
            Freight on board defalut for this user.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.LogonRedirect">
            <summary>
            When this user logs on, redirect to another location.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.AdminScript">
            <summary>
            Instead of the default Admin script use another Admin script.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.RateId">
            <summary>
            The default rate id for new orders in this account.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.SendShipmentUpdates">
            <summary>
            Send shipment updates default for new orders in this account.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.AutoFillOrderForm">
            <summary>
            Use account defaults on new orders.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.EstLeadTime">
            <summary>
            Default estimated lead time for new orders in this account.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.EstTransitTime">
            <summary>
            Default estimated time in transit for orders in this account.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.AssetAccount">
            <summary>
            The asset account for this user.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.UIJson">
            <summary>
            The script to run each time the UI inits
            </summary>
        </member>
        <member name="F:Rendition.Commerce.User.DefaultPrinterPath">
            <summary>
            The default printer path for this user
            </summary>
        </member>
        <member name="M:Rendition.Commerce.User.RefreshUserContacts">
            <summary>
            Refreshes the user contacts.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.User.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.  Returns handle, contact or userId as a string.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rendition.Commerce.User.#ctor(System.String,System.String,System.Int32,System.Int32,System.String,System.Boolean,System.DateTime,System.String,System.Boolean,System.Boolean,System.DateTime,System.Guid,System.Boolean,System.Boolean,System.Int32,System.Decimal,System.Boolean,System.String,System.Decimal,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.Int32,System.String,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Boolean,System.Boolean,System.Int32,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:user"/> class.
            </summary>
            <param name="f_email">The f_email.</param>
            <param name="f_password">The f_password.</param>
            <param name="f_userId">The f_user id.</param>
            <param name="f_userLevel">The f_user level.</param>
            <param name="f_handle">The f_handle.</param>
            <param name="f_wholesaledealer">if set to <c>true</c> [f_wholesaledealer].</param>
            <param name="f_lastVisit">The f_last visit.</param>
            <param name="f_comments">The f_comments.</param>
            <param name="f_administrator">if set to <c>true</c> [f_administrator].</param>
            <param name="f_wouldlikemail">if set to <c>true</c> [f_wouldlikemail].</param>
            <param name="f_createdate">The f_createdate.</param>
            <param name="f_SessionID">The f_ session ID.</param>
            <param name="f_quotaWholesale">if set to <c>true</c> [f_quota wholesale].</param>
            <param name="f_quotaComplete">if set to <c>true</c> [f_quota complete].</param>
            <param name="f_quota">The f_quota.</param>
            <param name="f_credit">The f_credit.</param>
            <param name="f_loggedIn">if set to <c>true</c> [f_logged in].</param>
            <param name="f_purchaseaccount">The f_purchaseaccount.</param>
            <param name="f_creditlimit">The f_creditlimit.</param>
            <param name="f_purchasecontact">The f_purchasecontact.</param>
            <param name="f_purchaseaddress">The f_purchaseaddress.</param>
            <param name="f_purchaseaddress2">The f_purchaseaddress2.</param>
            <param name="f_purchasezip">The f_purchasezip.</param>
            <param name="f_purchasestate">The f_purchasestate.</param>
            <param name="f_purchasecountry">The f_purchasecountry.</param>
            <param name="f_purchasecity">The f_purchasecity.</param>
            <param name="f_purchasephone">The f_purchasephone.</param>
            <param name="f_purchaseemail">The f_purchaseemail.</param>
            <param name="f_purchasefax">The f_purchasefax.</param>
            <param name="f_purchasewww">The f_purchasewww.</param>
            <param name="f_purchaseFirstName">First name of the f_purchase.</param>
            <param name="f_purchaseLastName">Last name of the f_purchase.</param>
            <param name="f_termID">The f_term ID.</param>
            <param name="f_usesTerms">if set to <c>true</c> [f_uses terms].</param>
            <param name="f_accounttype">The f_accounttype.</param>
            <param name="f_packingSlipID">The f_packing slip ID.</param>
            <param name="f_notax">if set to <c>true</c> [f_notax].</param>
            <param name="f_allowPreorders">if set to <c>true</c> [f_allow preorders].</param>
            <param name="f_customQuote">The f_custom quote.</param>
            <param name="f_customInvoice">The f_custom invoice.</param>
            <param name="f_FOBId">The f_ FOB id.</param>
            <param name="f_logon_redirect">The f_logon_redirect.</param>
            <param name="f_admin_script">The f_admin_script.</param>
            <param name="f_rateId">The f_rate id.</param>
            <param name="f_workPhone">The f_work phone.</param>
            <param name="f_autoFillOrderform">if set to <c>true</c> [f_auto fill orderform].</param>
            <param name="f_sendShipmentUpdates">if set to <c>true</c> [f_send shipment updates].</param>
            <param name="f_estLeadTime">The f_est lead time.</param>
            <param name="f_estTransitTime">The f_est transit time.</param>
            <param name="f_UI_JSON">The script to run each time the UI inits.</param>
            <param name="f_assetAccount">The asset account.</param>
            <param name="f_defaultPrinterPath">The default printer path.</param>
        </member>
        <member name="P:Rendition.Commerce.User.Contacts">
            <summary>
            Gets the list of contacts for this user using a SQL query.
            </summary>
        </member>
        <member name="P:Rendition.Commerce.User.Rate">
            <summary>
            The default rate id for new orders in this account.
            </summary>
        </member>
        <member name="P:Rendition.Commerce.User.Term">
            <summary>
            Term this account uses by default.
            </summary>
        </member>
        <member name="T:Rendition.Commerce.Users">
            <summary>
            This is a list of all the users cached in memory.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Users.List">
            <summary>
            List of all the users cached in memory.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Users.GetUserByEmail(System.String)">
            <summary>
            Gets the user by email.
            </summary>
            <param name="email">The email.</param>
            <returns>Email Address.</returns>
        </member>
        <member name="M:Rendition.Commerce.Users.GetUserByHandle(System.String)">
            <summary>
            Gets the user by handle.
            </summary>
            <param name="handle">The handle.</param>
            <returns>Handle</returns>
        </member>
        <member name="M:Rendition.Commerce.Users.GetUserById(System.Int32)">
            <summary>
            Gets the user by id.
            </summary>
            <param name="userId">The user id.</param>
            <returns>The selected user</returns>
        </member>
        <member name="M:Rendition.Commerce.Users.RefreshUserById(System.Int32)">
            <summary>
            Refreshes the user by id.
            </summary>
            <param name="userId">The user id.</param>
        </member>
        <member name="M:Rendition.Commerce.Users.GetUserFromDataReader(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Gets the user from data reader.
            </summary>
            <param name="user_list">The user_list.</param>
            <returns>User from database</returns>
        </member>
        <member name="M:Rendition.Commerce.Users.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Users"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="T:Rendition.Commerce.Discounts">
            <summary>
            Discount list
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Discounts.List">
            <summary>
            A list of the discounts in dbo.discount
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Discounts.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Discounts"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="M:Rendition.Commerce.Discounts.Add(Rendition.Commerce.Discount)">
            <summary>
            Adds the specified new discount.
            </summary>
            <param name="newProperty">The new discount.</param>
        </member>
        <member name="T:Rendition.Commerce.Countries">
            <summary>
            country list, for easy consistant form creation
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Countries.List">
            <summary>
            List of the countries in dbo.countries 
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Countries.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Countries"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="T:Rendition.Commerce.Zones">
            <summary>
            List of all the zones in all services in all cariers.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Zones.List">
            <summary>
            List of all the zones in all services in all cariers.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Zones.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Zones"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="T:Rendition.Commerce.Properties">
            <summary>
            This class creates a list of item Properties for use in the item class
            you can use the Properties list to filter items or just view addtional information
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Properties.List">
            <summary>
            List of the Properties for all items.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Properties.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Properties"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="M:Rendition.Commerce.Properties.Add(Rendition.Commerce.Property)">
            <summary>
            Adds the specified new property.
            </summary>
            <param name="newProperty">The new property.</param>
        </member>
        <member name="T:Rendition.Commerce.Rates">
            <summary>
            A list of rates avalible on the site for all services and Carriers.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Rates.List">
            <summary>
            A list of rates avalible on the site for all services and Carriers.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Rates.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Rates"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="T:Rendition.Commerce.Carriers">
            <summary>
            Shipping Carriers on the site.  Carriers in the root class for rates, zones etc.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Carriers.List">
            <summary>
            List of the Carriers.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Carriers.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Carriers"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="T:Rendition.Commerce.ZipToZones">
            <summary>
            Zip to zone lookup for all Carriers on the site.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.ZipToZones.List">
            <summary>
            List of the zip to zone entries
            </summary>
        </member>
        <member name="M:Rendition.Commerce.ZipToZones.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.ZipToZones"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="T:Rendition.Commerce.Reviews">
            <summary>
            This is a list of all reviews on the site.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Reviews.List">
            <summary>
            This is a list of all reviews on the site.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Reviews.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Reviews"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="T:Rendition.Commerce.Discount">
            <summary>
            Discount drawn from the table dbo.discount
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Discount.Code">
            <summary>
            discount code - the code the customer enters to get the discount.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Discount.Percent">
            <summary>
            Percentage off when this discount code is used.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Discount.Comments">
            <summary>
            Description of the discount.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Discount.#ctor(System.String,System.Single,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Discount"/> class.
            </summary>
            <param name="f_code">The f_code.</param>
            <param name="pct">The PCT.</param>
            <param name="f_comments">The f_comments.</param>
        </member>
        <member name="T:Rendition.Commerce.Property">
            <summary>
            This represents a single physical or metaphysical property of the item.
            For example. height:30" or manufacture:Jim's Cogs
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Property.Id">
            <summary>
            The id of the property.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Property.ItemNumber">
            <summary>
            The item number this property belongs to.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Property.Name">
            <summary>
            The name of this property.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Property.Value">
            <summary>
            The value of the property.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Property.Text">
            <summary>
            The human readable version of the value for this property.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Property.Order">
            <summary>
            What order this property shows up in relation to other Properties of the same item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Property.IsItem">
            <summary>
            If this property refers to an item in the database this is true.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Property.Price">
            <summary>
            The price of this property when it is selected.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Property.Taxable">
            <summary>
            When true, this property will be added to the taxable total.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Property.ShowOnInvoice">
            <summary>
            When true this property will appear on the invoice beneath the parent item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Property.ShowInFilter">
            <summary>
            When true this property will appear in the "filter by" list in the item listings.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Property.#ctor(System.Guid,System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.Decimal,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Property"/> class.
            </summary>
            <param name="f_id">The f_id.</param>
            <param name="f_itemNumber">The f_item number.</param>
            <param name="f_property">The f_property.</param>
            <param name="f_value">The f_value.</param>
            <param name="f_text">The f_text.</param>
            <param name="f_order">The f_order.</param>
            <param name="f_isItem">if set to <c>true</c> [f_is item].</param>
            <param name="f_price">The f_price.</param>
            <param name="f_taxable">if set to <c>true</c> [f_taxable].</param>
            <param name="f_showOnInvoice">if set to <c>true</c> [f_show on invoice].</param>
            <param name="f_showInFilter">if set to <c>true</c> [f_show in filter].</param>
        </member>
        <member name="T:Rendition.Commerce.Redirectors">
            <summary>
            A list of URL redrectors/rewriters.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Redirectors.List">
            <summary>
            A list of URL redrectors/rewriters.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Redirectors.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Redirectors"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="T:Rendition.Commerce.Redirector">
            <summary>
            A directive for redirecting/rewriting URLs
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Redirector.Id">
            <summary>
            Id of this redirector.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Redirector.UrlMatchPattern">
            <summary>
            Pattern to match in the URL.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Redirector.UrlToRedirectTo">
            <summary>
            URL to redirect to based on the urlMatchPattern.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Redirector.ErrorMatch">
            <summary>
            status number to match for this redirector to work. (e.g.: 404 or 200)
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Redirector.Order">
            <summary>
            The order in which this directive is loaded
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Redirector.Enabled">
            <summary>
            When true this directive is processed.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Redirector.RedirectorType">
            <summary>
            Can be one of: 
            "Response Filter",
            "Rewriter"
            "Redirector" in the database.
            When used directly the type is enum main.redirectorTypes
            (some redirector types must be accompanied 
            by an error match code value in the errorMatch column,
            for example 200, 404, 302 etc.) 
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Redirector.ContentType">
            <summary>
            The type of content this directive applies to.  This usues regular expressions.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Redirector.#ctor(System.Guid,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Redirector"/> class.
            </summary>
            <param name="_id">The _id.</param>
            <param name="_urlMatchPattern">The _url match pattern.</param>
            <param name="_urlToRedirectTo">The _url to redirect to.</param>
            <param name="_errorMatch">The _error match.</param>
            <param name="_contentType">Type of the _content.</param>
            <param name="_redirectorType">Type of the _redirector.</param>
            <param name="_order">The _order.</param>
            <param name="_enabled">if set to <c>true</c> [_enabled].</param>
        </member>
        <member name="T:Rendition.Commerce.SEOListMetaUtilities">
            <summary>
            Search Engine Optimization that manages the title/keywords/descripton of item listing pages.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.SEOListMetaUtilities.List">
            <summary>
            List of the SEO objects.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.SEOListMetaUtilities.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.SEOListMetaUtilities"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="M:Rendition.Commerce.SEOListMetaUtilities.GetSEOListMetaUtilityByName(System.String)">
            <summary>
            Gets the SEO list meta utility by category name.
            </summary>
            <param name="id">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Commerce.SEOListMetaUtilities.GetSEOListMetaUtilityById(System.Guid)">
            <summary>
            Gets the SEO list meta utility by id.
            </summary>
            <param name="id">The id.</param>
            <returns>Selected SEOListMetaUtility</returns>
        </member>
        <member name="T:Rendition.Commerce.SEOListMetaUtility">
            <summary>
            Search Engine Optimization utitliy for setting the  title/keywords/descripton of item listing pages.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.SEOListMetaUtility.Id">
            <summary>
            Id of this utility.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.SEOListMetaUtility.Page">
            <summary>
            Listing page this utitlity is for.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.SEOListMetaUtility.Category">
            <summary>
            Category name this utility is for.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.SEOListMetaUtility.Title">
            <summary>
            Title of the page.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.SEOListMetaUtility.MetaDescription">
            <summary>
            Descripton of the page.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.SEOListMetaUtility.MetaKeywords">
            <summary>
            Keywords of the page.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.SEOListMetaUtility.#ctor(System.Guid,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.SEOListMetaUtility"/> class.
            </summary>
            <param name="_id">The _id.</param>
            <param name="_page">The _page.</param>
            <param name="_category">The _category.</param>
            <param name="_title">The _title.</param>
            <param name="_metaDescription">The _meta description.</param>
            <param name="_metaKeywords">The _meta keywords.</param>
        </member>
        <member name="T:Rendition.Commerce.Terms">
            <summary>
            List of terms in the site.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Terms.List">
            <summary>
            The actual list of terms
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Terms.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Terms"/> class.
            </summary>
            <param name="_site">The _site.</param>
        </member>
        <member name="T:Rendition.Commerce.Term">
            <summary>
            Terms of payment for purchase orders and work orders.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Term.Id">
            <summary>
            id of the term (as defined in the dbo.terms table)
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Term.Name">
            <summary>
            Name of this term.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Term.TermDays">
            <summary>
            How many days until this term becomes payment due.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Term.Accrued">
            <summary>
            Does this term create sales reciepts (false) or invoice recievables (true)
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Term.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rendition.Commerce.Term.#ctor(System.Int32,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Term"/> class.
            </summary>
            <param name="_id">The _id.</param>
            <param name="_name">The _name.</param>
            <param name="_termDays">The _term days.</param>
            <param name="_accrued">if set to <c>true</c> [_accrued].</param>
        </member>
        <member name="T:Rendition.Commerce.Country">
            <summary>
            A country in the list of countries.  Like tears in the rain.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Country.Name">
            <summary>
            Name of the country
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Country.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rendition.Commerce.Country.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Country"/> class.
            </summary>
            <param name="f_name">The f_name.</param>
        </member>
        <member name="T:Rendition.Commerce.Shipment">
            <summary>
            Represents a shipment.  One box with a tracking number, date shipped etc.
            Orders have a list of shipments that have occured for that order.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Shipment.Address">
            <summary>
            The Address the shipment is being shipped to.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Shipment.Order">
            <summary>
            The order being shipped.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Shipment.Id">
            <summary>
            The id of the shipment in the dbo.addressUpdate table.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Shipment.ShipmentNumber">
            <summary>
            The shipmentNumber of the shipment in the dbo.cart table.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Shipment.Tracking">
            <summary>
            The tracking number of the shipment.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Shipment.DateShipped">
            <summary>
            The date the shipping terminal reports the item being shipped.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Shipment.ActualWeight">
            <summary>
            The actual weight of the shipment.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Shipment.ActualService">
            <summary>
            Actual service used as reported by the shipping terminal.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Shipment.ActualCost">
            <summary>
            Actual cost of the shipment.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Shipment.ActualBilledWeight">
            <summary>
            Actual billed weight.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Shipment.PackageLength">
            <summary>
            Actual package length.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Shipment.PackageWidth">
            <summary>
            Actual package width.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Shipment.PackageHeight">
            <summary>
            Actual package height.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Shipment.ThirdPartyAccount">
            <summary>
            Third part account used if any.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Shipment.VoidStatus">
            <summary>
            Void status. Value varries by Carrier.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Shipment.EmailSent">
            <summary>
            Date the email was sent about this shipment.  Inserting routines should leave this column null.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Shipment.AddDate">
            <summary>
            The date the record was added to the database.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Shipment.#ctor(Rendition.Commerce.Address,Rendition.Commerce.Order,System.Guid,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Shipment"/> class.
            </summary>
            <param name="_address">The _address.</param>
            <param name="_order">The _order.</param>
            <param name="_id">The _id.</param>
            <param name="_shipmentNumber">The _shipment number.</param>
            <param name="_tracking">The _tracking.</param>
            <param name="_dateShipped">The _date shipped.</param>
            <param name="_actualWeight">The _actual weight.</param>
            <param name="_actualService">The _actual service.</param>
            <param name="_actualCost">The _actual cost.</param>
            <param name="_actualBilledWeight">The _actual billed weight.</param>
            <param name="_packageLength">Length of the _package.</param>
            <param name="_packageWidth">Width of the _package.</param>
            <param name="_packageHeight">Height of the _package.</param>
            <param name="_thirdPartyAccount">The _third party account.</param>
            <param name="_voidStatus">The _void status.</param>
            <param name="_emailSent">The _email sent.</param>
            <param name="_addDate">The _add date.</param>
        </member>
        <member name="M:Rendition.Commerce.Shipment.GetBestShipment(System.Collections.Generic.List{Rendition.Commerce.Shipment})">
            <summary>
            Gets the best shipment.
            </summary>
            <param name="shipments">The shipments.</param>
            <returns></returns>
        </member>
        <member name="T:Rendition.Commerce.Line">
            <summary>
            Represents a single line item in a order.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.FormName">
            <summary>
            The name of the form if any, drawn from order_line_forms.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.SourceCode">
            <summary>
            The source code of the form if any, drawn from order_line_forms.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line._form">
            <summary>
            Internal holder for form
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.LineDetail">
            <summary>
            Line detail - content of cartDetail for this order's line items.
            Use this line's form property to access line detail information.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.CartId">
            <summary>
            The unique id of this line item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.SessionId">
            <summary>
            the sesisonId of this line item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.Qty">
            <summary>
            Quantity of this line item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.ItemNumber">
            <summary>
            Item number of this line item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.Price">
            <summary>
            Price of the line item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.AddTime">
            <summary>
            Date this line item was added to the order.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.OrderId">
            <summary>
            The order id this line item belongs to.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.SerialId">
            <summary>
            The serial id of this line item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.OrderNumber">
            <summary>
            The order number of this line item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.SerialNumber">
            <summary>
            The serial number of this line item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.AddressId">
            <summary>
            The Address id of this line item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.ShipmentId">
            <summary>
            The shipment id this line item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.ShipmentNumber">
            <summary>
            The shipment number of this line item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.LineNumber">
            <summary>
            The line number of this line.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.EPSMMCSOutput">
            <summary>
            The print status of this line item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.EPSMMCSAIFileName">
            <summary>
            The file name of this line item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.ValueCostTotal">
            <summary>
            The total cost of the form selections.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.NoTaxValueCostTotal">
            <summary>
            The total cost of the line items that is not taxable.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.FulfillmentDate">
            <summary>
            The date this line item should be fulfilled on.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.EstimatedFulfillmentDate">
            <summary>
            The date the line item is expected to be fulfilled.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.ParentCartId">
            <summary>
            The parent line item of this line item (in the case of a backorder).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.BackorderedQty">
            <summary>
            Quantity of this line item that has been backordered.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.CanceledQty">
            <summary>
            Quantity of this line item that has been canceled.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.Item">
            <summary>
            The item for this line item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.Address">
            <summary>
            The Address of this line item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.CustomLineNumber">
            <summary>
            The custom line number of this item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.KitAllocationId">
            <summary>
            Sub componet id of item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.KitQty">
            <summary>
            Quantity of this subcomponet.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.ShowAsSeperateLineOnInvoice">
            <summary>
            Show this subcomponet as a seperate line on the invoice.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.VendorItemKitAssignmentId">
            <summary>
            When inventory is allocated to this sub componet this is the id of the row in dbo.vendorItemKitAssignment that it was assigned from.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.KitAllocationCartId">
            <summary>
            The cartId (from dbo.cart) of the parent/virtual item that this sub componet is a part of.  If cartId == kitAllocationCartId than this is the parent/virtual item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Line.LastStatusId">
            <summary>
            The last status id of the line item
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Line.#ctor(System.Guid,System.Guid,System.Int32,System.String,System.Decimal,System.DateTime,System.Int32,System.Int32,System.String,System.String,System.Guid,System.Int32,System.String,System.Int32,System.String,System.String,System.Decimal,System.Decimal,System.DateTime,System.DateTime,System.Guid,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Guid,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="!:line"/> class.
            </summary>
            <param name="f_cartId">The f_cart id.</param>
            <param name="f_SessionId">The f_ session id.</param>
            <param name="f_qty">The f_qty.</param>
            <param name="f_itemNumber">The f_item number.</param>
            <param name="f_price">The f_price.</param>
            <param name="f_addTime">The f_add time.</param>
            <param name="f_orderId">The f_order id.</param>
            <param name="f_serialId">The f_serial id.</param>
            <param name="f_orderNumber">The f_order number.</param>
            <param name="f_serialNumber">The f_serial number.</param>
            <param name="f_addressId">The f_address id.</param>
            <param name="f_shipmentId">The f_shipment id.</param>
            <param name="f_shipmentnumber">The f_shipmentnumber.</param>
            <param name="f_lineNumber">The f_line number.</param>
            <param name="f_epsmmcsOutput">The f_epsmmcs output.</param>
            <param name="f_epsmmcsAIFilename">The f_epsmmcs AI filename.</param>
            <param name="f_valueCostTotal">The f_value cost total.</param>
            <param name="f_noTaxValueCostTotal">The f_no tax value cost total.</param>
            <param name="f_fulfillmentDate">The f_fulfillment date.</param>
            <param name="f_estimatedFulfillmentDate">The f_estimated fulfillment date.</param>
            <param name="f_parentCartId">The f_parent cart id.</param>
            <param name="f_backorderedQty">The f_backordered qty.</param>
            <param name="f_canceledQty">The f_canceled qty.</param>
            <param name="f_customLineNumber">The f_custom line number.</param>
            <param name="f_kitAllocationId">The f_kit allocation id.</param>
            <param name="f_kitQty">The f_kit qty.</param>
            <param name="f_showAsSeperateLineOnInvoice">if set to <c>true</c> [f_show as seperate line on invoice].</param>
            <param name="f_vendorItemKitAssignmentId">The f_vendor item kit assignment id.</param>
            <param name="f_kitAllocationCartId">The f_kit allocation cart id.</param>
        </member>
        <member name="P:Rendition.Commerce.Line.Form">
            <summary>
            The form this item uses.
            </summary>
        </member>
        <member name="P:Rendition.Commerce.Line.LastStatus">
            <summary>
            The last FlagType status of the line item
            </summary>
        </member>
        <member name="T:Rendition.Commerce.Order">
            <summary>
            This class represents an order
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.OrderId">
            <summary>
            The order id.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.OrderDate">
            <summary>
            The order date.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.GrandTotal">
            <summary>
            The grand total.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.TaxTotal">
            <summary>
            The tax total.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.SubTotal">
            <summary>
            The sub total.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.ShippingTotal">
            <summary>
            The shipping total.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.Service1">
            <summary>
            service 1 (not implemented).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.Service2">
            <summary>
            service 1 (not implemented).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.Manifest">
            <summary>
            Manifest number this order belongs to if any.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.PurchaseOrder">
            <summary>
            Purchase order this order belongs to if any.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.Discount">
            <summary>
            The discount total.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.Comment">
            <summary>
            Comments provided by the customer.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.Paid">
            <summary>
            Amount paid.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.BillToAddressId">
            <summary>
            Address id of the bill to Address.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.Closed">
            <summary>
            Is this order closed?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.Canceled">
            <summary>
            Is this order canceled?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.PaymentMethodId">
            <summary>
            The paymentMethodId of this order's payment method.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.TermId">
            <summary>
            The term id of this order's terms.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.UserId">
            <summary>
            The account number this order belongs to.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.OrderNumber">
            <summary>
            The order number.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.CreditMemo">
            <summary>
            Is this order a credit memo (not implemented).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.ScannedOrderImage">
            <summary>
            File name of scanned order image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.ReadyForExport">
            <summary>
            Date this order was ready for export.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.RecalculatedOn">
            <summary>
            Last date this order was recalculated (via dbo.placeOrder).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.SessionId">
            <summary>
            The sessionId of this order.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.SoldBy">
            <summary>
            The user id of the account that sold this order.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.RequisitionedBy">
            <summary>
            The user id of the account that requisitioned this order.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.ApprovedBy">
            <summary>
            The user id of the account that approved this order.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.DeliverBy">
            <summary>
            The date this order should be delivered by.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.VendorAccountNumber">
            <summary>
            The account number your vendor refers to you with.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.FOB">
            <summary>
            Freight on board for this order or blank.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.ParentOrderId">
            <summary>
            The parent order Id of this order (in case of a chained purchase order).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.BillToAddress">
            <summary>
            The bill to Address.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.ShipToAddresses">
            <summary>
            The list of ship to addresses.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.ShipToAddress">
            <summary>
            The primary ship to Address.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.Lines">
            <summary>
            The list of line items on this order.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.User">
            <summary>
            The user/account this order belongs to.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Order.Shipments">
            <summary>
            the shipments in this order
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Order.GetOrderJson">
            <summary>
            Gets most of the order's by order id using provided connection. Formated for JSON.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Order.GetOrderJson(System.Int32,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Gets most of the order's by order id using provided connection. Formated for JSON.
            </summary>
            <param name="orderId">The order id.</param>
            <param name="cn">The cn.</param>
            <param name="trans">The trans.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Commerce.Order.GetOrderJson(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Gets most of the order's by order number using provided connection. Formated for JSON.
            </summary>
            <param name="orderNumber">The order number.</param>
            <param name="cn">The cn.</param>
            <param name="trans">The trans.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Commerce.Order.GetOrderJson(Rendition.Commerce.Order)">
            <summary>
            Gets most of the order's info by reading an existing order object. Formated for JSON.
            </summary>
            <param name="order">The order.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Commerce.Order.GetOrderJson(System.Int32)">
            <summary>
            Gets most of the order's info by order id.  Formated for JSON.
            </summary>
            <param name="orderId">The order id.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Commerce.Order.GetOrderJson(System.String)">
            <summary>
            Gets most of the order's by order number.  Formated for JSON.
            </summary>
            <param name="orderNumber">The order number.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Rendition.Commerce.Order.GetOrderJson(System.String,System.Int32,Rendition.Commerce.Order,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)" -->
        <member name="M:Rendition.Commerce.Order.GetChildOrdersBySerialId(System.Int32,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Gets the child orders by serial id.
            </summary>
            <param name="serialId">The serial id.</param>
            <param name="cn">SQL connection.</param>
            <param name="trns">SQL transaction.</param>
            <returns>
            A list of orders matching the serial ids.
            </returns>
        </member>
        <member name="M:Rendition.Commerce.Order.GetChildOrdersByOrderId(System.Int32,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Gets the child orders by order id.
            </summary>
            <param name="orderId">The order id.</param>
            <param name="cn">SQL connection.</param>
            <param name="trns">SQL transaction.</param>
            <returns>A list of orders matching the serial ids.</returns>
        </member>
        <member name="M:Rendition.Commerce.Order.GetOrdersByUserId(System.Int32)">
            <summary>
            Gets all the orders for the account.
            </summary>
            <param name="userId">The user id.</param>
            <returns>A list of orders for the account.</returns>
        </member>
        <member name="M:Rendition.Commerce.Order.GetOrdersByUserId(System.Int32,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Gets all the orders for the account.
            </summary>
            <param name="userId">The user id.</param>
            <param name="cn">SQL connection.</param>
            <param name="trns">SQL transaction.</param>
            <returns>A list of orders for the account.</returns>
        </member>
        <member name="M:Rendition.Commerce.Order.GetOrderBySessionId(System.Guid,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Gets the order by session id.
            </summary>
            <param name="sessionId">The session id.</param>
            <param name="cn">SQL connection.</param>
            <param name="trns">SQL transaction.</param>
            <returns>The matching order.</returns>
        </member>
        <member name="M:Rendition.Commerce.Order.GetOrderByPurchaseOrder(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Gets the order by purchase order number.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <param name="cn">SQL connection.</param>
            <param name="trns">SQL transaction.</param>
            <returns>The matching order.</returns>
        </member>
        <member name="M:Rendition.Commerce.Order.GetOrderByOrderNumber(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Gets the order by order number.
            </summary>
            <param name="shipmentNumber">The shipment number.</param>
            <param name="cn">SQL connection.</param>
            <param name="trns">SQL transaction.</param>
            <returns>The matching order.</returns>
        </member>
        <member name="M:Rendition.Commerce.Order.GetOrderBySerialNumber(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Gets the order by serial number.
            </summary>
            <param name="serialNumber">The serialNumber number.</param>
            <param name="cn">SQL connection.</param>
            <param name="trns">SQL transaction.</param>
            <returns>The matching order.</returns>
        </member>
        <member name="M:Rendition.Commerce.Order.GetOrderByShipmentNumber(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Gets the order by shipment number.
            </summary>
            <param name="shipmentNumber">The shipment number.</param>
            <param name="cn">SQL connection.</param>
            <param name="trns">SQL transaction.</param>
            <returns>The matching order.</returns>
        </member>
        <member name="M:Rendition.Commerce.Order.GetOrderByCartId(System.Guid,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Gets the order by cart id.
            </summary>
            <param name="serialId">The cart id.</param>
            <param name="cn">SQL connection.</param>
            <param name="trns">SQL transaction.</param>
            <returns>The matching order.</returns>
        </member>
        <member name="M:Rendition.Commerce.Order.GetOrderBySerialId(System.Int32,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Gets the order by serial id.
            </summary>
            <param name="serialId">The serial id.</param>
            <param name="cn">SQL connection.</param>
            <param name="trns">SQL transaction.</param>
            <returns>The matching order.</returns>
        </member>
        <member name="M:Rendition.Commerce.Order.GetOrderByOrderId(System.Int32)">
            <summary>
            Gets the order by order id.
            </summary>
            <param name="id">The id.</param>
            <returns>The matching order</returns>
        </member>
        <member name="M:Rendition.Commerce.Order.GetOrderByOrderId(System.Int32,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Gets the order by order id.
            </summary>
            <param name="id">The id.</param>
            <param name="cn">SQL connection.</param>
            <param name="trns">SQL transaction.</param>
            <returns>The matching order.</returns>
        </member>
        <member name="M:Rendition.Commerce.Order.GetOrdersByOrderIds(System.Int32[],System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Gets the orders by order ids.
            </summary>
            <param name="ids">The ids.</param>
            <param name="fcn">SQL connection.</param>
            <param name="ftrns">SQL transaction.</param>
            <returns>The matching orders.</returns>
        </member>
        <member name="M:Rendition.Commerce.Order.ParentOrder">
            <summary>
            The parent order.
            </summary>
            <returns>Parent order.</returns>
        </member>
        <member name="M:Rendition.Commerce.Order.ParentOrder(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Parents the order.
            </summary>
            <param name="cn">SQL connection.</param>
            <param name="trns">SQL transaction.</param>
            <returns>Parent order.</returns>
        </member>
        <member name="F:Rendition.Commerce.Order.LastStatusId">
            <summary>
            The last FlagType id status the order passed through.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Order.#ctor(System.Int32,System.DateTime,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.String,System.String,System.Decimal,System.String,System.Decimal,System.Guid,System.Boolean,System.Boolean,System.Guid,System.Int32,System.Int32,System.String,System.Boolean,System.String,System.DateTime,System.DateTime,System.Guid,System.Int32,System.Int32,System.Int32,System.DateTime,System.String,System.String,System.Int32,System.Collections.Generic.List{Rendition.Commerce.Line},System.Int32,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Initializes a new instance of the <see cref="!:order"/> class.
            </summary>
            <param name="orderId">The order id.</param>
            <param name="orderDate">The order date.</param>
            <param name="grandTotal">The grand total.</param>
            <param name="taxTotal">The tax total.</param>
            <param name="subTotal">The sub total.</param>
            <param name="shippingTotal">The shipping total.</param>
            <param name="service1">The service1.</param>
            <param name="service2">The service2.</param>
            <param name="manifest">The manifest.</param>
            <param name="purchaseOrder">The purchase order.</param>
            <param name="discount">The discount.</param>
            <param name="comment">The comment.</param>
            <param name="paid">The paid.</param>
            <param name="billToAddressId">The bill to Address id.</param>
            <param name="closed">if set to <c>true</c> [closed].</param>
            <param name="canceled">if set to <c>true</c> [canceled].</param>
            <param name="paymentMethodId">The payment method id.</param>
            <param name="termId">The term id.</param>
            <param name="userId">The user id.</param>
            <param name="orderNumber">The order number.</param>
            <param name="creditMemo">if set to <c>true</c> [credit memo].</param>
            <param name="scanned_order_image">The scanned_order_image.</param>
            <param name="readyForExport">The ready for export.</param>
            <param name="recalculatedOn">The recalculated on.</param>
            <param name="sessionId">The session id.</param>
            <param name="soldBy">The sold by.</param>
            <param name="requisitionedBy">The requisitioned by.</param>
            <param name="approvedBy">The approved by.</param>
            <param name="deliverBy">The deliver by.</param>
            <param name="vendor_accountNo">The vendor_account no.</param>
            <param name="FOB">The FOB.</param>
            <param name="parentOrderId">The parent order id.</param>
            <param name="lines">The lines.</param>
            <param name="cn">The connection being used.</param>
            <param name="trans">The transaction being used.</param>
        </member>
        <member name="P:Rendition.Commerce.Order.Term">
            <summary>
            Gets the terms of this order.
            </summary>
            <value>The term.</value>
        </member>
        <member name="P:Rendition.Commerce.Order.LastStatus">
            <summary>
            The last FlagType status of the order
            </summary>
        </member>
        <member name="T:Rendition.Commerce.AField">
            <summary>
            field variable in PDF rendering system.
            </summary>
        </member>
        <member name="T:Rendition.Commerce.Review">
            <summary>
            This class creates a single review made of an item
            An instance of rendtion._site must exist to use this class
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Review.Id">
            <summary>
            Id of the view
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Review.UserId">
            <summary>
            userId of ther user who made the review.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Review.Rating">
            <summary>
            Rating the user gave this object.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Review.Value">
            <summary>
            The message attached to the review.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Review.Archive">
            <summary>
            If this review has been placed in the archive (no longer visible).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Review.Date">
            <summary>
            The date this review as made on.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Review.RefId">
            <summary>
            The reference for this review (e.g.: the item number being reviewed).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Review.RefType">
            <summary>
            What type of object is being reviewed (e.g.: "itemNumber")
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Review.User">
            <summary>
            The user who created the review.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Review.#ctor(System.Guid,System.Int32,System.Double,System.String,System.Boolean,System.DateTime,System.String,System.String,Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Review"/> class.
            </summary>
            <param name="f_id">The f_id.</param>
            <param name="f_userId">The f_user id.</param>
            <param name="f_rating">The f_rating.</param>
            <param name="f_value">The f_value.</param>
            <param name="f_archive">if set to <c>true</c> [f_archive].</param>
            <param name="f_date">The f_date.</param>
            <param name="f_refId">The f_ref id.</param>
            <param name="f_refType">Type of the f_ref.</param>
            <param name="site">The site.</param>
        </member>
        <member name="T:Rendition.Commerce.Category">
            <summary>
            A category consists of a list of items.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Category.Name">
            <summary>
            The name of the category.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Category.Id">
            <summary>
            The id of the category.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Category.Items">
            <summary>
            The list of items in this category.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Category.#ctor(System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Category"/> class.
            </summary>
            <param name="categoryName">Name of the category.</param>
            <param name="categoryId">The category id.</param>
        </member>
        <member name="T:Rendition.Commerce.Categories">
            <summary>
            This class creates a list of categories and associated items.
            This class, when instantiated, connects to the data base and
            refreshes the list of items in categories.
            This list can be refreshed using the Rendition.Admin.refreshCategoriesCache() method.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Categories.List">
            <summary>
            List of categories.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Categories.GetCategoryByName(System.String)">
            <summary>
            Gets the category by looking up the name in the database.
            </summary>
            <param name="f_categoryName">Name of the category.</param>
            <returns>Selected category or null</returns>
        </member>
        <member name="M:Rendition.Commerce.Categories.GetCategoryById(System.Guid)">
            <summary>
            Gets the category by its id in the database.
            </summary>
            <param name="f_categoryId">The category id.</param>
            <returns>Selected category or null</returns>
        </member>
        <member name="M:Rendition.Commerce.Categories.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Categories"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="T:Rendition.Commerce.ValidationRule">
            <summary>
            This class represents a rule that was created to validate Requests going into inputs
            </summary>
        </member>
        <member name="M:Rendition.Commerce.ValidationRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.ValidationRule"/> class.
            </summary>
        </member>
        <member name="T:Rendition.Commerce.InputOption">
            <summary>
            Select, radio or other multi option inputs.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.InputOption.InnerText">
            <summary>
            The innerText of this option.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.InputOption.Value">
            <summary>
            The value of this option.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.InputOption.Ordinal">
            <summary>
            Ordinal (order number) of this option.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.InputOption.Selected">
            <summary>
            When true, this option is selected, on, true, whatever.
            </summary>
        </member>
        <member name="T:Rendition.Commerce.Input">
            <summary>
            This class creates a single input for the _form class
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Input.Attributes">
            <summary>
            The attributes of this DHTML element.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Input.Name">
            <summary>
            Name of the input on the form.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Input.Value">
            <summary>
            Value of the input on the form.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Input.FormName">
            <summary>
            Name of the form.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Input.Id">
            <summary>
            Id of the form.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Input.Rule">
            <summary>
            Validation rule form must adhere to
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Input.Valid">
            <summary>
            Is the input valid?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Input.Options">
            <summary>
            List of options for this input.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Input.MaxLength">
            <summary>
            The maxlength attribute of this input.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Input.Type">
            <summary>
            DHTML element attribute type.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Input.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Input"/> class.
            </summary>
            <param name="_name">The _name.</param>
            <param name="_value">The _value.</param>
        </member>
        <member name="T:Rendition.Commerce.Form">
            <summary>
            This class is a form that attaches to the _item class
            An instance of rendtion._site must exist to use this class
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Form._inputs">
            <summary>
            The list of inputs in the form.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Form.FormErrors">
            <summary>
            Errors found while compiling the form.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Form.Extention">
            <summary>
            Extention of the source code file name.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Form.Name">
            <summary>
            The name of the form.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Form.Path">
            <summary>
            Path to the form.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Form.Item">
            <summary>
            Parent item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Form.CartItem">
            <summary>
            Parent cart item.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Form.#ctor(Rendition.Commerce.Item)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Form"/> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Rendition.Commerce.Form.#ctor(Rendition.Commerce.Item,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Form"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Rendition.Commerce.Form.#ctor(Rendition.Commerce.Item,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Form"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="formSourceCode">The form source code.</param>
            <param name="formName">Name of the form.</param>
        </member>
        <member name="M:Rendition.Commerce.Form.RenderForm(System.String)">
            <summary>
            Renders the form.
            </summary>
            <param name="scriptText">The script text.</param>
            <returns>Rendered HTML form.</returns>
        </member>
        <member name="M:Rendition.Commerce.Form.WriteInputNames(System.String,System.String)">
            <summary>
            Writes the input names.
            </summary>
            <param name="sourceCode">The source code.</param>
            <param name="XMLId">The XML id.</param>
            <returns>List of input names</returns>
        </member>
        <member name="M:Rendition.Commerce.Form.HtmlWithValues">
            <summary>
            Writes the form with the values from the provided List of inputs inserted into the form inputs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rendition.Commerce.Form.HtmlWithValues(System.Collections.Generic.List{Rendition.Commerce.Input})">
            <summary>
            Writes the form with the values from the provided List of inputs inserted into the form inputs.
            </summary>
            <param name="__inputs">The _inputs.</param>
            <returns>Rendered HTML form with values input from list.</returns>
        </member>
        <member name="P:Rendition.Commerce.Form.SourceCode">
            <summary>
            Gets the source code.
            </summary>
            <value>The source code.</value>
        </member>
        <member name="P:Rendition.Commerce.Form.Html">
            <summary>
            Gets the HTML.
            </summary>
            <value>The HTML.</value>
        </member>
        <member name="P:Rendition.Commerce.Form.Inputs">
            <summary>
            The list of inputs in the form.
            </summary>
            <value>The inputs.</value>
        </member>
        <member name="T:Rendition.Commerce.Warning">
            <summary>
            This class represents a warning generated by the validation class (not implemented)
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Warning.Error">
            <summary>
            number of the warning
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Warning.Description">
            <summary>
            Description of the warning
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Warning.Source">
            <summary>
            Source of the warning
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Warning.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Warning"/> class.
            </summary>
            <param name="_num">The _num.</param>
            <param name="_desc">The _desc.</param>
            <param name="_source">The _source.</param>
        </member>
        <member name="T:Rendition.Commerce.Warnings">
            <summary>
            This class creates a list of warnings raised from the Request submission of a client (not implemented)
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Warnings.Items">
            <summary>
            list of warnings
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Warnings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Warnings"/> class.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Warnings.add(Rendition.Commerce.Warning)">
            <summary>
            Adds the specified item_to_add.
            </summary>
            <param name="item_to_add">The item_to_add.</param>
        </member>
        <member name="T:Rendition.Commerce.Image">
            <summary>
            An image associated with an item or gallery.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Image.Height">
            <summary>
            Height of the image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Image.Width">
            <summary>
            Width of the image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Image.HorizontalAspectRatio">
            <summary>
            Horizontal Aspect Ratio.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Image.VerticalAspectRatio">
            <summary>
            Vertical Aspect Ratio.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Image.FileName">
            <summary>
            Name of the file.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Image.LocationType">
            <summary>
            Type of image (List, Cart, Invoice etc.).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Image.ItemNumber">
            <summary>
            Item Number this image is associated with (if any).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Image.Url">
            <summary>
            URL to the image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Image.Id">
            <summary>
            Id of the image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Image.Siblings">
            <summary>
            other images that belong in the same group of images.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Image.#ctor(System.Guid,System.String,System.String,System.Int32,System.Int32,System.String,Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Image"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="itemNumber">The item number.</param>
            <param name="fileName">Name of the file.</param>
            <param name="height">The height.</param>
            <param name="width">The width.</param>
            <param name="locationType">Type of the location.</param>
            <param name="_site">The _site.</param>
        </member>
        <member name="T:Rendition.Commerce.ItemImages">
            <summary>
            Images associated with a particular item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.ItemImages.List">
            <summary>
            List of image associated with a particular item.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.ItemImages.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.ItemImages"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="T:Rendition.Commerce.RenderedImages">
            <summary>
            A list of all images created by this program.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.RenderedImages.List">
            <summary>
            All images created by this program.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.RenderedImages.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.RenderedImages"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="T:Rendition.Commerce.Item">
            <summary>
            This class creates a single item.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Item.GetEffectivePrice">
            <summary>
            Gets the effective price based on the user logged on and the on sale status.
            </summary>
            <returns>Price</returns>
        </member>
        <member name="F:Rendition.Commerce.Item.CategoryOrder">
            <summary>
            The order this item shows up in when ordered by 'featured item'
            or the natural way the items are listed in the category editor
            (categoryDetail.listOrder asc).  The dictionary contains the
            categoryId and the order int for this item in the category.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.AvaliableToSell">
            <summary>
            Quantity of this item avaliable to sell.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.Volume">
            <summary>
            Quantity of this item on the production floor.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.Prebook">
            <summary>
            Quantity of this item allocated for sale but not yet sold.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.WorkInProgress">
            <summary>
            Quantity of this item being worked on by production or awaiting receipt from a vendor.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.Consumed">
            <summary>
            Quantity of this item consumed by orders.  This number always counts up.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.AvailableOn">
            <summary>
            The date this time will be available to sell again based on when the next PO containing the item's due date.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.StockStatus">
            <summary>
            Status of the inventory.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.Number">
            <summary>
            The item number. Same as itemNumber.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.ItemNumber">
            <summary>
            The item number. Same as number.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.DisplayPrice">
            <summary>
            Price to show when this item has a variable price range.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.Price">
            <summary>
            The retail price of the item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.SalePrice">
            <summary>
            The sale price of the item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.WholeSalePrice">
            <summary>
            The wholesale price of the item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.IsOnSale">
            <summary>
            Is this item on sale?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.Description">
            <summary>
            Description of the item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.ShortCopy">
            <summary>
            A short bit of ad copy (not implemented).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.ReorderPoint">
            <summary>
            The point at which a stock alert will go out to the item's operator.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.BOMOnly">
            <summary>
            This item is a bill of material item only and should not show up in item listings.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.ProductCopy">
            <summary>
            Ad copy (not implmented).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.HomeCategoryId">
            <summary>
            What category can users trace this item back to.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.AltCategoryId">
            <summary>
            What category should be displayed on this items detail page.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.Weight">
            <summary>
            The weight of the item to pack and ship.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.Quantifier">
            <summary>
            Unit of measure when selling this item (e.g.: ea, set, pair).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.ShortDescription">
            <summary>
            Short descripton of the item (not implmented).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.FreeShipping">
            <summary>
            When true this item will ship for free (weight not calculated).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.Keywords">
            <summary>
            Keywords associated with this item in a CSV list.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.SearchPriority">
            <summary>
            When the user searches and this item would show up in the same spot as another item in a list, for example by price
            whcih item should be displayed first.  The higher the number the higher on the list the item will be displayed.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.WorkCreditValue">
            <summary>
            How much is this item worth for a production line worker to work on (should be multiple e..g: 1.1 or .75).
            Used to multiply against the pay rate for the line worker.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.NoTax">
            <summary>
            Do not charge tax for this item. (not in tax subtotal list)
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.Deleted">
            <summary>
            This item is removed and cannot be purchased.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.RemoveAfterPurchase">
            <summary>
            This item is unique and cannot be purchased more than one time.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.ParentItemnumber">
            <summary>
            The parent item number of this item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.SwatchId">
            <summary>
            The swatchId of this item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.AllowPreorders">
            <summary>
            Does this item allow orders to be placed against it when it is out of stock?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.InventoryOperator">
            <summary>
            The userId of the user resposible for this item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.InventoryDepletesOnFlagId">
            <summary>
            When this item is in an order and passes through this flag state inventory will be depleted via TR_LINE_DEPLETE_INVENTORY.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.InventoryRestockOnFlagId">
            <summary>
            When this item is in an order and passes through this flag state inventory will be restocked via TR_LINE_DEPLETE_INVENTORY.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.ItemIsConsumedOnFlagId">
            <summary>
            When this item is in an order and passes through this flag state inventory will be consumed via TR_LINE_DEPLETE_INVENTORY.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.RevenueAccount">
            <summary>
            The revenue account number.  Used while exporting data to a real accouting system (not this janky one).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.SizeId">
            <summary>
            The id of the size of the product.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.Ratio">
            <summary>
            The ratio for purchasing this:sibling items in a size/color matrix.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.DivisionId">
            <summary>
            The id of the division this item belongs to.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.ListOrder">
            <summary>
            The order this item shows up in in a given listing.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.HomeCategoryName">
            <summary>
            Name of the category users can trace this item back to.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.AltCategoryName">
            <summary>
            Name of the category that should show up on this items detail page.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.SiteImagePrefixPath">
            <summary>
            The prefix path of images for this item.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Item.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.  Returns item number + description or just item number if description is blank.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rendition.Commerce.Item.RefreshCategoryList">
            <summary>
            Refreshes the home and alt category lists associated with this item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.FormName">
            <summary>
            Name of the form for this item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Item.Html">
            <summary>
            HTML Ad Copy associated with this item.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Item.RefreshReviews">
            <summary>
            Refreshes the reviews.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Item.RefreshImages">
            <summary>
            Refreshes the images associated with this item.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Item.RefreshImages(Rendition.Site)">
            <summary>
            Refreshes the images associated with this item using another site object.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="M:Rendition.Commerce.Item.RefreshImages(Rendition.Site,System.String)">
            <summary>
            Refreshes the images associated with this item.
            </summary>
            <param name="site">The site.</param>
            <param name="locationType">Type of the location.</param>
        </member>
        <member name="M:Rendition.Commerce.Item.#ctor(Rendition.Site,System.String,System.String,System.Decimal,System.Decimal,System.Decimal,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.Guid,System.Guid,System.Double,System.String,System.String,System.Boolean,System.String,System.Int32,System.Decimal,System.Boolean,System.Boolean,System.Boolean,System.String,System.Guid,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Guid,System.Double,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="!:item"/> class.
            </summary>
            <param name="site">The site.</param>
            <param name="item_number">The item_number.</param>
            <param name="displayprice">The displayprice.</param>
            <param name="price">The price.</param>
            <param name="salePrice">The sale price.</param>
            <param name="wholeSalePrice">The whole sale price.</param>
            <param name="IsOnSale">if set to <c>true</c> [is on sale].</param>
            <param name="description">The description.</param>
            <param name="shortCopy">The short copy.</param>
            <param name="packingSlipImage">The packing slip image.</param>
            <param name="auxillaryImage">The auxillary image.</param>
            <param name="cartImage">The cart image.</param>
            <param name="formName">Name of the form.</param>
            <param name="productCopy">The product copy.</param>
            <param name="HTML">The HTML.</param>
            <param name="detailImage">The detail image.</param>
            <param name="fullSizeImage">The full size image.</param>
            <param name="listingImage">The listing image.</param>
            <param name="listing2Image">The listing2 image.</param>
            <param name="reorderpoint">The reorderpoint.</param>
            <param name="BOMOnly">if set to <c>true</c> [BOM only].</param>
            <param name="HomeCategory">The home category.</param>
            <param name="HomeAltCategory">The home alt category.</param>
            <param name="Weight">The weight.</param>
            <param name="quantifier">The quantifier.</param>
            <param name="shortDescription">The short description.</param>
            <param name="freeShipping">if set to <c>true</c> [free shipping].</param>
            <param name="keywords">The keywords.</param>
            <param name="searchPriority">The search priority.</param>
            <param name="workCreditValue">The work credit value.</param>
            <param name="notax">if set to <c>true</c> [notax].</param>
            <param name="deleted">if set to <c>true</c> [deleted].</param>
            <param name="removeafterpurchase">if set to <c>true</c> [removeafterpurchase].</param>
            <param name="parentItemnumber">The parent itemnumber.</param>
            <param name="swatchId">The swatch id.</param>
            <param name="allowPreorders">if set to <c>true</c> [allow preorders].</param>
            <param name="inventoryOperator">The inventory operator.</param>
            <param name="inventoryDepletesOnFlagId">The inventory depletes on flag id.</param>
            <param name="inventoryRestockOnFlagId">The inventory restock on flag id.</param>
            <param name="itemIsConsumedOnFlagId">The item is consumed on flag id.</param>
            <param name="revenueaccount">The revenueaccount.</param>
            <param name="sizeId">The size id.</param>
            <param name="ratio">The ratio.</param>
            <param name="divisionId">The division id.</param>
        </member>
        <member name="P:Rendition.Commerce.Item.Size">
            <summary>
            Gets the size of the item.
            </summary>
        </member>
        <member name="P:Rendition.Commerce.Item.Swatch">
            <summary>
            Gets the swatch of the item.
            </summary>
        </member>
        <member name="P:Rendition.Commerce.Item.Images">
            <summary>
            Images associated with this item.
            </summary>
            <value>The images.</value>
        </member>
        <member name="P:Rendition.Commerce.Item.Thumbnails">
            <summary>
            Thumbnail images associated with this item.
            </summary>
            <value>The thumbnails.</value>
        </member>
        <member name="P:Rendition.Commerce.Item.BillOfMaterial">
            <summary>
            Bill of material for this item.
            </summary>
            <value>The bill of material.</value>
        </member>
        <member name="P:Rendition.Commerce.Item.ParentItem">
            <summary>
            This item's parent item if any.
            </summary>
            <value>The parent item.</value>
        </member>
        <member name="P:Rendition.Commerce.Item.HomeCategory">
            <summary>
            Gets the home category.
            </summary>
            <value>The home category.</value>
        </member>
        <member name="P:Rendition.Commerce.Item.AltCategory">
            <summary>
            Gets the alt category.
            </summary>
            <value>The alt category.</value>
        </member>
        <member name="P:Rendition.Commerce.Item.Properties">
            <summary>
            Gets the Properties.
            </summary>
            <value>The Properties.</value>
        </member>
        <member name="P:Rendition.Commerce.Item.Reviews">
            <summary>
            Gets the reviews.
            </summary>
            <value>The reviews.</value>
        </member>
        <member name="P:Rendition.Commerce.Item.Form">
            <summary>
            Gets the form.
            </summary>
            <value>The form.</value>
        </member>
        <member name="P:Rendition.Commerce.Item.PackingSlipImage">
            <summary>
            Gets the packing slip image.
            </summary>
            <value>The packing slip image.</value>
        </member>
        <member name="P:Rendition.Commerce.Item.AuxillaryImage">
            <summary>
            Gets the auxillary image.
            </summary>
            <value>The auxillary image.</value>
        </member>
        <member name="P:Rendition.Commerce.Item.CartImage">
            <summary>
            Gets the cart image.
            </summary>
            <value>The cart image.</value>
        </member>
        <member name="P:Rendition.Commerce.Item.DetailImage">
            <summary>
            Gets the detail image.
            </summary>
            <value>The detail image.</value>
        </member>
        <member name="P:Rendition.Commerce.Item.FullSizeImage">
            <summary>
            Gets the full size image.
            </summary>
            <value>The full size image.</value>
        </member>
        <member name="P:Rendition.Commerce.Item.ListingImage">
            <summary>
            Gets the listing image.
            </summary>
            <value>The listing image.</value>
        </member>
        <member name="P:Rendition.Commerce.Item.Listing2Image">
            <summary>
            Gets the listing2 image.
            </summary>
            <value>The listing2 image.</value>
        </member>
        <member name="P:Rendition.Commerce.Item.ChildItems">
            <summary>
            Gets the child items.
            </summary>
            <value>The child items.</value>
        </member>
        <member name="T:Rendition.Commerce.Items">
            <summary>
            This class creates a list of all the items in the database
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Items.List">
            <summary>
            List of the items.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Items.GetItemByItemNumber(System.String)">
            <summary>
            Gets the item by its item number.
            </summary>
            <param name="itemNumberToGet">The item number to get.</param>
            <returns>Seletced item number or null</returns>
        </member>
        <member name="M:Rendition.Commerce.Items.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Items"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="M:Rendition.Commerce.Items.#ctor(Rendition.Site,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Items"/> class.
            </summary>
            <param name="site">The site.</param>
            <param name="limitItemsToThisList">The limit items to this list.</param>
        </member>
        <member name="M:Rendition.Commerce.Items.LoadItems(Rendition.Site,System.String[])">
            <summary>
            Loads the items.
            </summary>
            <param name="site">The site.</param>
            <param name="limitItemsToThisList">The limit items to this list.</param>
        </member>
        <member name="T:Rendition.Commerce.Zone">
            <summary>
            Represents a zone to ship to in a shipping rate.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Zone.Id">
            <summary>
            The unique id of the zone.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Zone.Rate">
            <summary>
            The shipping rate this zone belongs to.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Zone.Weight">
            <summary>
            The weight for this zone.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Zone.ShipZone">
            <summary>
            The zone.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Zone.Cost">
            <summary>
            The cost for this zone.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Zone.#ctor(System.Guid,System.Int32,System.Double,System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Zone"/> class.
            </summary>
            <param name="f_id">The f_id.</param>
            <param name="f_rate">The f_rate.</param>
            <param name="f_weight">The f_weight.</param>
            <param name="f_shipzone">The f_shipzone.</param>
            <param name="f_cost">The f_cost.</param>
        </member>
        <member name="T:Rendition.Commerce.Carrier">
            <summary>
            Shipping Carrier.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Carrier.Id">
            <summary>
            Id of the Carrier.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Carrier.Name">
            <summary>
            Name of the Carrier.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Carrier.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Carrier"/> class.
            </summary>
            <param name="f_id">The f_id.</param>
            <param name="f_name">The f_name.</param>
        </member>
        <member name="T:Rendition.Commerce.Rate">
            <summary>
            Shipping rate.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Rate.Id">
            <summary>
            Id of the rate.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Rate.Name">
            <summary>
            Name of the rate.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Rate.Order">
            <summary>
            The order this rate shows up in.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Rate.International">
            <summary>
            Is this rate for shipment outside of this country?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Rate.Enabled">
            <summary>
            Is this rate enabled?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Rate.RateType">
            <summary>
            What type of rate is this (not implemented).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Rate.ZoneCarrierId">
            <summary>
            The zone Carrier id.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Rate.ZoneServiceClass">
            <summary>
            Zone service class.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Rate.DiscountRate">
            <summary>
            Is this a discountable rate?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Rate.TrackingLink">
            <summary>
            The link that displays information on the Carriers website about this shipment.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Rate.CmrAreaSurch">
            <summary>
            Commercial area surcharge.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Rate.ResAreaSurchg">
            <summary>
            Residential area surcharge.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Rate.GroundFuelSurchgPct">
            <summary>
            Ground fuel surcharge.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Rate.AirFuelSurchgPct">
            <summary>
            Air fuel surcharge.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Rate.ShowsUpInRetailCart">
            <summary>
            This rate shows up in the retail cart.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Rate.ShowsUpInWholesaleCart">
            <summary>
            This rate shows up it the wholesale cart.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Rate.ShowsUpInOrderEntry">
            <summary>
            This rate shows up in order entry application.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Rate.EstShippingCost">
            <summary>
            Estimated shipping cost (not implemented).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Rate.ShipZone">
            <summary>
            Ship Zone (not implemented).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Rate.Selected">
            <summary>
            Selected (not implemented).
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Rate.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.  Returns rate.name.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rendition.Commerce.Rate.#ctor(System.Int32,System.String,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Boolean,System.String,System.Decimal,System.Decimal,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Rate"/> class.
            </summary>
            <param name="f_id">The f_id.</param>
            <param name="f_name">The f_name.</param>
            <param name="f_order">The f_order.</param>
            <param name="f_international">if set to <c>true</c> [f_international].</param>
            <param name="f_enabled">if set to <c>true</c> [f_enabled].</param>
            <param name="f_ratetype">The f_ratetype.</param>
            <param name="f_zoneCarrierId">The f_zone Carrier id.</param>
            <param name="f_ZoneServiceClass">The f_ zone service class.</param>
            <param name="f_discountRate">if set to <c>true</c> [f_discount rate].</param>
            <param name="f_trackingLink">The f_tracking link.</param>
            <param name="f_cmrAreaSurch">The F_CMR area surch.</param>
            <param name="f_resAreaSurchg">The f_res area surchg.</param>
            <param name="f_groundFuelSurchgPct">The f_ground fuel surchg PCT.</param>
            <param name="f_airFuelSurchgPct">The f_air fuel surchg PCT.</param>
            <param name="f_showsUpInRetailCart">if set to <c>true</c> [f_shows up in retail cart].</param>
            <param name="f_showsUpInWholesaleCart">if set to <c>true</c> [f_shows up in wholesale cart].</param>
            <param name="f_showsUpInOrderEntry">if set to <c>true</c> [f_shows up in order entry].</param>
        </member>
        <member name="T:Rendition.Commerce.ZipToZone">
            <summary>
            Zip to zone hash table.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.ZipToZone.Id">
            <summary>
            Id of the zip to zone entry.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.ZipToZone.CarrierId">
            <summary>
            The Carrier the zip to zone table belongs to.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.ZipToZone.SourceZip">
            <summary>
            The source zip code of this zip to zone table.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.ZipToZone.RateId">
            <summary>
            The rate Id this zip to zone table belongs to.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.ZipToZone.FromZip">
            <summary>
            The from zip code of this zone.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.ZipToZone.ToZip">
            <summary>
            The to zip code of this zone.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.ZipToZone.ShipZone">
            <summary>
            The zone.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.ZipToZone.#ctor(System.Guid,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.ZipToZone"/> class.
            </summary>
            <param name="f_id">The f_id.</param>
            <param name="f_carrierId">The f_carrier id.</param>
            <param name="f_sourceZip">The f_source zip.</param>
            <param name="f_rateId">The f_rate id.</param>
            <param name="f_fromzip">The f_fromzip.</param>
            <param name="f_tozip">The f_tozip.</param>
            <param name="f_shipzone">The f_shipzone.</param>
        </member>
        <member name="T:Rendition.Commerce.PaymentReference">
            <summary>
            A refrence to an order associated with a payment.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.PaymentReference.Id">
            <summary>
            The id of the refrence.  paymentMethodDetailId in paymentMethodsDetail.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.PaymentReference.Payment">
            <summary>
            The payment this refrence belongs to.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.PaymentReference.OrderId">
            <summary>
            The orderId associated with this reference.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.PaymentReference.Amount">
            <summary>
            The amount paid towards this order by this payment.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.PaymentReference.#ctor(System.Guid,Rendition.Commerce.Payment,System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.PaymentReference"/> class.
            </summary>
            <param name="_id">The _id.</param>
            <param name="_payment">The _parent id.</param>
            <param name="_orderId">The _order id.</param>
            <param name="_amount">The _amount.</param>
        </member>
        <member name="P:Rendition.Commerce.PaymentReference.Order">
            <summary>
            Gets the order.
            </summary>
            <value>The order.</value>
        </member>
        <member name="T:Rendition.Commerce.Payment">
            <summary>
            An existing payment and the orders the payment is related to related to.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Payment.SessionId">
            <summary>
            The session that created this payment.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Payment.AddressId">
            <summary>
            The addressId of the payment.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Payment.Id">
            <summary>
            The id of this payment.  paymentMethodId in dbo.paymentMethods.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Payment.PaymentType">
            <summary>
            A value describing this payment.  For instance: "Credit Card".
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Payment.Notes">
            <summary>
            Notes about the payment.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Payment.Amount">
            <summary>
            Payment amount.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Payment.Address">
            <summary>
            Addresse of this payment.  This uses the site connection without a transaction. 
            If you're using a conneciton besides site.cn, use the overload method to pass your
            connection and transaction.
            </summary>
            <returns>The Address associated with this payment.</returns>
        </member>
        <member name="M:Rendition.Commerce.Payment.Address(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Addresse of this payment.
            </summary>
            <param name="cn">The connection being used.</param>
            <param name="trans">The transaction being used.</param>
            <returns>The Address associated with this payment.</returns>
        </member>
        <member name="F:Rendition.Commerce.Payment.PaymentRefrences">
            <summary>
            A list of orders and the amounts allocated.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Payment.UserId">
            <summary>
            The userId associated with this payment.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Payment.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="!:payment"/> class.
            </summary>
            <param name="paymentMethodId">The payment method id.</param>
        </member>
        <member name="P:Rendition.Commerce.Payment.IsCash">
            <summary>
            Gets a value indicating whether this instance is cash.
            </summary>
            <value><c>true</c> if this instance is cash; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rendition.Commerce.Payment.IsPaypal">
            <summary>
            Gets a value indicating whether this instance is paypal.
            </summary>
            <value><c>true</c> if this instance is paypal; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rendition.Commerce.Payment.IsWire">
            <summary>
            Gets a value indicating whether this instance is a wire transfer.
            </summary>
            <value><c>true</c> if this instance is wire; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rendition.Commerce.Payment.IsCheck">
            <summary>
            Gets a value indicating whether this instance is a check.
            </summary>
            <value><c>true</c> if this instance is check; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rendition.Commerce.Payment.IsCreditCard">
            <summary>
            Gets a value indicating whether this instance is a credit card transaction.
            </summary>
            <value>
            	<c>true</c> if this instance is credit card; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rendition.Commerce.Payment.PayPal">
            <summary>
            Gets the PayPal details for this payment.  Returns null if there are no details.
            </summary>
            <value>The pay pal.</value>
        </member>
        <member name="P:Rendition.Commerce.Payment.Check">
            <summary>
            Gets the check details for this payment.  Returns null if there are no details.
            </summary>
            <value>The check.</value>
        </member>
        <member name="P:Rendition.Commerce.Payment.Wire">
            <summary>
            Gets the wire details for this payment.  Returns null if there are no details.
            </summary>
            <value>The wire.</value>
        </member>
        <member name="P:Rendition.Commerce.Payment.CreditCard">
            <summary>
            Gets the credit card details for this payment.  Returns null if there are no details.
            </summary>
            <value>The credit card.</value>
        </member>
        <member name="P:Rendition.Commerce.Payment.User">
            <summary>
            Gets the user associated with this payment.
            </summary>
            <value>The user.</value>
        </member>
        <member name="T:Rendition.Commerce.MakePayment">
            <summary>
            Allows you to pay off orders (purchase/work orders)
            This is the only way to enter payments (credit records)
            Payments are not posted until you post them to the GL
            </summary>
        </member>
        <member name="M:Rendition.Commerce.MakePayment.PayWithCreditCard(System.String,System.String,System.String,System.String,System.String,System.String,System.Decimal,System.Int32,System.DateTime,System.Collections.Generic.List{System.Object},System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Pays with a credit card.
            </summary>
            <param name="cardName">Name on the card.</param>
            <param name="cardType">Type of card (not used or recorded).</param>
            <param name="cardNumber">The card number.</param>
            <param name="expMonth">The exp month (two digit).</param>
            <param name="expYear">The exp year (two digit).</param>
            <param name="secNumber">The security number.</param>
            <param name="amount">The amount.</param>
            <param name="userId">The userId.</param>
            <param name="postingDate">The posting date.</param>
            <param name="orderIds">The order ids.</param>
            <param name="cn">The sql connection (or null).</param>
            <param name="trans">The sql transaction (or null).</param>
            <returns>{error:0,desc:"error description"}.</returns>
        </member>
        <member name="M:Rendition.Commerce.MakePayment.PayWithWire(System.String,System.String,System.String,System.Decimal,System.Int32,System.DateTime,System.Collections.Generic.List{System.Object},System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Pays with a wire transfer.
            </summary>
            <param name="swift">The SWIFT number.</param>
            <param name="bankName">Name of the bank.</param>
            <param name="routingTransitNumber">The routing transit number.</param>
            <param name="amount">The amount.</param>
            <param name="userId">The userId.</param>
            <param name="postingDate">The posting date.</param>
            <param name="orderIds">The order ids.</param>
            <param name="cn">The sql connection (or null).</param>
            <param name="trans">The sql transaction (or null).</param>
            <returns>{error:0,desc:"error description"}.</returns>
        </member>
        <member name="M:Rendition.Commerce.MakePayment.PayWithCash(System.Decimal,System.Int32,System.DateTime,System.Collections.Generic.List{System.Object},System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Pays with cash.
            </summary>
            <param name="amount">The amount.</param>
            <param name="userId">The userId.</param>
            <param name="postingDate">The posting date.</param>
            <param name="orderIds">The order ids.</param>
            <param name="cn">The sql connection (or null).</param>
            <param name="trans">The sql transaction (or null).</param>
            <returns>{error:0,desc:"error description"}.</returns>
        </member>
        <member name="M:Rendition.Commerce.MakePayment.PayWithCheck(System.String,System.String,System.String,System.String,System.Decimal,System.Int32,System.DateTime,System.Collections.Generic.List{System.Object},System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Pays with check.
            </summary>
            <param name="routingNumber">The routing number.</param>
            <param name="checkNumber">The check number.</param>
            <param name="bankAccountNumber">The bank account number.</param>
            <param name="notes">The notes.</param>
            <param name="amount">The amount.</param>
            <param name="userId">The userId.</param>
            <param name="postingDate">The posting date.</param>
            <param name="orderIds">The order ids.</param>
            <param name="cn">The sql connection (or null).</param>
            <param name="trans">The sql transaction (or null).</param>
            <returns>{error:0,desc:"error description"}.</returns>
        </member>
        <member name="M:Rendition.Commerce.MakePayment.PayWithPayPal(System.String,System.Decimal,System.Int32,System.DateTime,System.Collections.Generic.List{System.Object},System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Pays with pay pal.
            </summary>
            <param name="payPalEmailAddress">The pay pal email Address.</param>
            <param name="amount">The amount.</param>
            <param name="userId">The userId.</param>
            <param name="postingDate">The posting date.</param>
            <param name="orderIds">The order ids.</param>
            <param name="cn">The sql connection (or null).</param>
            <param name="trans">The sql transaction (or null).</param>
            <returns>{error:0,desc:"error description"}.</returns>
        </member>
        <member name="M:Rendition.Commerce.MakePayment.PayWithExistingPaymentMethods(System.Collections.Generic.List{System.Object},System.Decimal,System.Int32,System.DateTime,System.Collections.Generic.List{System.Object},System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Pays with existing payment.
            </summary>
            <param name="paymentMethodIds">The list of paymentMethodIds.</param>
            <param name="amount">The amount.</param>
            <param name="userId">The userId.</param>
            <param name="postingDate">The posting date.</param>
            <param name="orderIds">The order ids.</param>
            <param name="cn">The sql connection (or null).</param>
            <param name="trans">The sql transaction (or null).</param>
            <returns>{error:0,desc:"error description"}.</returns>
        </member>
        <member name="M:Rendition.Commerce.MakePayment.UpdateOrders(System.Collections.Generic.List{System.Object},System.Decimal,System.Guid,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            This method is used internally only
            Updates the orders payment amount. I was watching x-files S2E6:Ascension via Netflix instant watch when I wrote it.
            </summary>
            <param name="orderIds">The order ids.</param>
            <param name="amount">The amount to be paid across the selected orders, in sequential until amount param is used up.</param>
            <param name="paymentMethodId">The payment method id.</param>
            <param name="cn">The sql connection (or null).</param>
            <param name="trans">The sql transaction (or null).</param>
        </member>
        <member name="T:Rendition.Commerce.PromiseToPay">
            <summary>
            This class represents the validation of an accrued payment.  This system is setup using a set of checks and balances.
            In order for an order to be placed, there must be a matching payment method, even if the ammount = 0
            So a payment must be made before an order can be placed.  This class is a promise to pay based on the terms of the order 
            as specified in the placeOrder procedure or the users account settings.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.PromiseToPay.Name">
            <summary>
            Name of the payment method.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.PromiseToPay.Error">
            <summary>
            When an error occurs this will be set to somthing other than 0
            </summary>
        </member>
        <member name="F:Rendition.Commerce.PromiseToPay.Description">
            <summary>
            When an error occurs (error!=0) this wll describe the error
            </summary>
        </member>
        <member name="M:Rendition.Commerce.PromiseToPay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.PromiseToPay"/> class.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.PromiseToPay.Insert(System.Guid,System.Int32,System.Guid,System.Int32,System.String,System.Decimal,System.DateTime,System.Collections.Generic.List{System.Int32},System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Inserts the specified payment into paymentMethods.
            </summary>
            <param name="paymentMethodId">The payment method id.</param>
            <param name="userId">The user id.</param>
            <param name="sessionId">The session id.</param>
            <param name="termId">The term id.</param>
            <param name="reference">The reference.</param>
            <param name="amount">The amount.</param>
            <param name="postingDate">The posting date.</param>
            <param name="orderIds">The order ids.</param>
            <param name="notes">The notes.</param>
            <param name="cn">The connection being used.</param>
            <param name="trans">The transaction being used.</param>
        </member>
        <member name="T:Rendition.Commerce.Wire">
            <summary>
            represents a payment using a wire transfer
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Wire.Name">
            <summary>
            Name of the payment method.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Wire.SWIFT">
            <summary>
            SWIFT Number (no validation, only recorded)
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Wire.BankName">
            <summary>
            Name of Bank (no validation, only recorded)
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Wire.RoutingTransitNumber">
            <summary>
            Routing Transit Number (no validation, only recorded)
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Wire.Error">
            <summary>
            When an error occurs this will be set to somthing other than 0
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Wire.Description">
            <summary>
            When an error occurs (error!=0) this wll describe the error
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Wire.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Wire"/> class.
            </summary>
            <param name="_swift">SWIFT Number.</param>
            <param name="_bankName">Name of Bank.</param>
            <param name="_routingTransitNumber">Routing Transit Number.</param>
        </member>
        <member name="M:Rendition.Commerce.Wire.Insert(System.Guid,System.Int32,System.Guid,System.Int32,System.String,System.Decimal,System.DateTime,System.Collections.Generic.List{System.Int32},System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Inserts the specified payment into paymentMethods.
            </summary>
            <param name="paymentMethodId">The payment method id.</param>
            <param name="userId">The user id.</param>
            <param name="sessionId">The session id.</param>
            <param name="termId">The term id.</param>
            <param name="reference">The reference.</param>
            <param name="amount">The amount.</param>
            <param name="postingDate">The posting date.</param>
            <param name="orderIds">The order ids.</param>
            <param name="notes">The notes.</param>
            <param name="cn">The connection being used.</param>
            <param name="trans">The transaction being used.</param>
        </member>
        <member name="T:Rendition.Commerce.PayPal">
            <summary>
            PayPal THIS DOES NOT WORK
            </summary>
        </member>
        <member name="F:Rendition.Commerce.PayPal.Name">
            <summary>
            Name of the payment method.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.PayPal.PayPalEmail">
            <summary>
            PayPal email
            </summary>
        </member>
        <member name="F:Rendition.Commerce.PayPal.Notes">
            <summary>
            Notes
            </summary>
        </member>
        <member name="M:Rendition.Commerce.PayPal.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.PayPal"/> class.
            </summary>
            <param name="_payPalEmail">The _pay pal email.</param>
        </member>
        <member name="M:Rendition.Commerce.PayPal.ChargeAmount(System.Decimal)">
            <summary>
            Charges the amount.
            </summary>
            <param name="amountToCharge">The amount to charge.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Commerce.PayPal.Insert(System.Guid,System.Int32,System.Guid,System.Int32,System.String,System.Decimal,System.DateTime,System.Collections.Generic.List{System.Int32},System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Inserts the specified payment into paymentMethods.
            </summary>
            <param name="paymentMethodId">The payment method id.</param>
            <param name="userId">The user id.</param>
            <param name="sessionId">The session id.</param>
            <param name="termId">The term id.</param>
            <param name="reference">The reference.</param>
            <param name="amount">The amount.</param>
            <param name="postingDate">The posting date.</param>
            <param name="orderIds">The order ids.</param>
            <param name="notes">The notes.</param>
            <param name="cn">The connection being used.</param>
            <param name="trans">The transaction being used.</param>
        </member>
        <member name="T:Rendition.Commerce.Check">
            <summary>
            repersents a payment of a check for an order
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Check.Name">
            <summary>
            Name of the payment method.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Check.CheckNumber">
            <summary>
            Check Number.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Check.RoutingNumber">
            <summary>
            Routing number.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Check.BankAccountNumber">
            <summary>
            Bank account number.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Check.Notes">
            <summary>
            Notes on the check.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Check.Error">
            <summary>
            When an error occurs this will be set to somthing other than 0
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Check.Description">
            <summary>
            When an error occurs (error!=0) this wll describe the error
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Check.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:check"/> class.
            </summary>
            <param name="_checkNumber">Check Number.</param>
            <param name="_routingNumber">Routing number.</param>
            <param name="_bankAccountNumber">Bank account number.</param>
            <param name="_notes">Notes on the check.</param>
        </member>
        <member name="M:Rendition.Commerce.Check.Insert(System.Guid,System.Int32,System.Guid,System.Int32,System.String,System.Decimal,System.DateTime,System.Collections.Generic.List{System.Int32},System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Inserts the specified payment into paymentMethods.
            </summary>
            <param name="paymentMethodId">The payment method id.</param>
            <param name="userId">The user id.</param>
            <param name="sessionId">The session id.</param>
            <param name="termId">The term id.</param>
            <param name="reference">The reference.</param>
            <param name="amount">The amount.</param>
            <param name="postingDate">The posting date.</param>
            <param name="orderIds">The order ids.</param>
            <param name="notes">The notes.</param>
            <param name="cn">The connection being used.</param>
            <param name="trans">The transaction being used.</param>
        </member>
        <member name="T:Rendition.Commerce.Cash">
            <summary>
            this class represents a payment of cash for an order
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Cash.Name">
            <summary>
            Name of the payment method.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Cash.Currency">
            <summary>
            Curreny Type
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Cash.Error">
            <summary>
            When an error occurs this will be set to somthing other than 0
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Cash.Description">
            <summary>
            When an error occurs (error!=0) this wll describe the error
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Cash.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Cash"/> class.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Cash.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Cash"/> class.
            </summary>
            <param name="_currency">The type of currency.</param>
        </member>
        <member name="M:Rendition.Commerce.Cash.Insert(System.Guid,System.Int32,System.Guid,System.Int32,System.String,System.Decimal,System.DateTime,System.Collections.Generic.List{System.Int32},System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Inserts the specified payment into the paymentMethods table.
            </summary>
            <param name="paymentMethodId">The payment method id.</param>
            <param name="userId">The user id.</param>
            <param name="sessionId">The session id.</param>
            <param name="termId">The term id.</param>
            <param name="reference">The reference.</param>
            <param name="amount">The amount.</param>
            <param name="postingDate">The posting date.</param>
            <param name="orderIds">The order ids.</param>
            <param name="notes">The notes.</param>
            <param name="cn">The connection being used.</param>
            <param name="trans">The transaction being used.</param>
        </member>
        <member name="T:Rendition.Commerce.CreditCard">
            <summary>
            represents a payment using a credit card, also includes methods for charging the instatiated card via xhttp request 
            </summary>
        </member>
        <member name="F:Rendition.Commerce.CreditCard.Name">
            <summary>
            Name of the payment method.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.CreditCard.CardNumber">
            <summary>
            Card number.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.CreditCard.NameOnCard">
            <summary>
            Name on card.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.CreditCard.SecCode">
            <summary>
            Security Code
            </summary>
        </member>
        <member name="F:Rendition.Commerce.CreditCard.ExpYear">
            <summary>
            Experation Year (2 digits).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.CreditCard.ExpMonth">
            <summary>
            Experation Month (2 digits).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.CreditCard.CardType">
            <summary>
            Card Type (not recorded or used).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.CreditCard.Error">
            <summary>
            When an error occurs this will be set to somthing other than 0
            </summary>
        </member>
        <member name="F:Rendition.Commerce.CreditCard.Description">
            <summary>
            When an error occurs (error!=0) this wll describe the error
            </summary>
        </member>
        <member name="M:Rendition.Commerce.CreditCard.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.CreditCard"/> class.
            </summary>
            <param name="_cardType">Type of card (not recorded or used).</param>
            <param name="_cardNumber">The card number.</param>
            <param name="_nameOnCard">The name on the card.</param>
            <param name="_secCode">The security code.</param>
            <param name="_expMonth">The exp month (2 digits).</param>
            <param name="_expYear">The exp year (2 digits).</param>
        </member>
        <member name="M:Rendition.Commerce.CreditCard.Insert(System.Guid,System.Guid,System.Int32,System.Guid,System.Int32,System.String,System.Decimal,System.DateTime,System.Collections.Generic.List{System.Int32},System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Inserts the specified payment into the paymentMethods table.
            </summary>
            <param name="paymentMethodId">The payment method id.</param>
            <param name="addressId">The Address id.</param>
            <param name="userId">The user id.</param>
            <param name="sessionId">The session id.</param>
            <param name="termId">The term id.</param>
            <param name="reference">The reference.</param>
            <param name="amount">The amount.</param>
            <param name="postingDate">The posting date.</param>
            <param name="orderIds">The order ids.</param>
            <param name="notes">The notes.</param>
            <param name="cn">The connection being used.</param>
            <param name="trans">The transaction being used.</param>
        </member>
        <member name="T:Rendition.Commerce.VirtualTerminal">
            <summary>
            This class is used for charging credit cards via HTTPWebRequest obejct.
            This class can be overridden using the onpaymentgateway event handler
            The table site_configration contains
            merchant_message_match - > the Regex pattern that matches the 
            merchant_message_match_index
            merchant_sucsess_match
            </summary>
        </member>
        <member name="M:Rendition.Commerce.VirtualTerminal.InsertPaymentHistory(Rendition.PaymentGatewayEventArgs)">
            <summary>
            internal method to insert virtual terminal history into the database.
            </summary>
            <param name="args">The <see cref="T:Rendition.PaymentGatewayEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Commerce.VirtualTerminal.DefaultPaymentGatewayProcessor(Rendition.PaymentGatewayEventArgs@)">
            <summary>
            Defaults gateway processor.  Used when there is no onpaymentgateway event handler specified
            </summary>
            <param name="args">The <see cref="T:Rendition.PaymentGatewayEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Commerce.VirtualTerminal.ChargeCreditCard(Rendition.Commerce.Address,Rendition.Commerce.Address,Rendition.Commerce.CreditCard,System.Decimal,System.Guid,System.String,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Charges the credit card using the internal CC processor function or the onpaymentgateway even handler.
            </summary>
            <param name="billToAddress">The bill to Address.</param>
            <param name="shipToAddress">The ship to Address.</param>
            <param name="card">The card.</param>
            <param name="amount">The amount.</param>
            <param name="orderSession">The order session.</param>
            <param name="orderNumber">The order number.</param>
            <param name="purchaseOrder">The purchase order.</param>
            <param name="cn">The sql connection (or null).</param>
            <param name="trans">The sql transaction (or null).</param>
            <returns>{error:0,desc:"error description"}.</returns>
        </member>
        <member name="T:Rendition.Commerce.Sizes">
            <summary>
            List of all Apparel Sizes
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Sizes.List">
            <summary>
            List of sizes.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Sizes.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Sizes"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="T:Rendition.Commerce.Swatches">
            <summary>
            List of all Apparel Swatches
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Swatches.List">
            <summary>
            List of swatches
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Swatches.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Swatches"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="T:Rendition.Commerce.Swatch">
            <summary>
            The color or pattern of an item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Swatch.Id">
            <summary>
            Unique id of the swatch
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Swatch.Name">
            <summary>
            Name or code of the swatch.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Swatch.Description">
            <summary>
            Descripton of the swatch
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Swatch.PathToSampleImages">
            <summary>
            Path to all the sample images.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Swatch.#ctor(System.Guid,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Swatch"/> class.
            </summary>
            <param name="_id">The _id.</param>
            <param name="_description">The _description.</param>
            <param name="_name">The _name.</param>
            <param name="_pathToSampleImages">The _path to sample images.</param>
        </member>
        <member name="P:Rendition.Commerce.Swatch.SampleImages">
            <summary>
            Gets the sample images as a list of paths.
            </summary>
        </member>
        <member name="T:Rendition.Commerce.Size">
            <summary>
            The size of an item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Size.Id">
            <summary>
            Unique id of the size.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Size.Name">
            <summary>
            Name of the size.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Size.Description">
            <summary>
            Description of the size.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Size.NumericSize">
            <summary>
            Numeric size of the size for ordering in lists with other sizes.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Size.#ctor(System.Guid,System.String,System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Size"/> class.
            </summary>
            <param name="_id">The _id.</param>
            <param name="_name">The _name.</param>
            <param name="_description">The _description.</param>
            <param name="_numericSize">Size of the _numeric.</param>
        </member>
        <member name="T:Rendition.Commerce.Menus">
            <summary>
            This class creates a list of menus drawn from the database
            for use in making hierarchal menus.  This class is used by
            the site during initalization and cache refresh, not to make menus.
            To create menus use the menu class instead.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Menus.List">
            <summary>
            Rawl list of hierarchal menus from the database.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Menus.Count">
            <summary>
            Count of the menus.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Menus.BuildHierarchies">
            <summary>
            Builds the menu hierarchies.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Menus.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Menus"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="M:Rendition.Commerce.Menus.Menu(System.Int32)">
            <summary>
            Get the menu of the specified menu ordinal.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns>Selected menu or null</returns>
        </member>
        <member name="M:Rendition.Commerce.Menus.GetMenuByName(System.String)">
            <summary>
            Gets the menu by name.
            </summary>
            <param name="name">The name.</param>
            <returns>Selected menu or null</returns>
        </member>
        <member name="M:Rendition.Commerce.Menus.GetMenuById(System.Guid)">
            <summary>
            Gets the menu by id.
            </summary>
            <param name="name">The name.</param>
            <returns>Selected menu or null</returns>
        </member>
        <member name="M:Rendition.Commerce.Menus.GetIdByName(System.String)">
            <summary>
            Gets id of the menu by its name.
            </summary>
            <param name="name">The name.</param>
            <returns>The selected menu Id</returns>
        </member>
        <member name="T:Rendition.Commerce.Menu">
            <summary>
            This class creates a single menu for use with the menus class
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Menu.Menus">
            <summary>
            List of menus that belong to this menu.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Menu.Href">
            <summary>
            The link this menus goes to when you click on it.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Menu.Enabled">
            <summary>
            When true this menu should show up in the list.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Menu.ChildType">
            <summary>
            Type of children.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Menu.Type">
            <summary>
            Type of menu.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Menu.Name">
            <summary>
            Name of the menu.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Menu.ChildFilter">
            <summary>
            Only show the children that match this pattern.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Menu.MaxChildren">
            <summary>
            Maximum number of children to show in this menu.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Menu.ExpandOnPageName">
            <summary>
            Expand by default when page name matches this pattern.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Menu.JId">
            <summary>
            ECMA/DHTML safe unique id.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Menu.Id">
            <summary>
            The unique id of this menu.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Menu.ParentId">
            <summary>
            The unique id of this menu's parent.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Menu.#ctor(System.Guid,System.Guid,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Menu"/> class.
            </summary>
            <param name="f_id">The f_id.</param>
            <param name="f_parentId">The f_parent id.</param>
            <param name="f_name">The f_name.</param>
            <param name="f_href">The f_href.</param>
            <param name="f_enabled">if set to <c>true</c> [f_enabled].</param>
            <param name="f_order">The f_order.</param>
            <param name="f_childType">Type of the f_child.</param>
            <param name="f_childOrder">The f_child order.</param>
            <param name="f_type">The f_type.</param>
            <param name="f_child_filter">The f_child_filter.</param>
            <param name="f_max_children">The f_max_children.</param>
            <param name="f_expand_on_pageName">Name of the f_expand_on_page.</param>
        </member>
        <member name="M:Rendition.Commerce.Menu.ChildOrder">
            <summary>
            The order the child menus are in.
            </summary>
            <returns>Ordering method.</returns>
        </member>
        <member name="M:Rendition.Commerce.Menu.Order">
            <summary>
            The order number of this menu in relation to its siblings.
            </summary>
            <returns>This objects order</returns>
        </member>
        <member name="M:Rendition.Commerce.Menu.MenuHierarchy">
            <summary>
            Creates a HTML menu hierarchy by creating a ul/li list.
            </summary>
            <returns>HTML UL/LI list based on this menu.</returns>
        </member>
        <member name="M:Rendition.Commerce.Menu.MenuHierarchy(Rendition.MenuCollectionCode,Rendition.MenuCollectionCode)">
            <summary>
            Creates a HTML menu hierarchy by creating list using the MenuCollectionCode specified.
            </summary>
            <param name="rootCode">The root code.</param>
            <param name="childCode">The child code.</param>
            <returns>HTML UL/LI list based on this menu.</returns>
        </member>
        <member name="M:Rendition.Commerce.Menu.MenuHierarchy(Rendition.MenuCollectionCode,Rendition.MenuCollectionCode,System.String,System.String)">
            <summary>
            Creates a HTML menu hierarchy by creating list using the MenuCollectionCode specified.
            </summary>
            <param name="rootCode">The root code.</param>
            <param name="childCode">The child code.</param>
            <param name="rewriteFilter">The rewrite filter.</param>
            <param name="rewriteReplace">The rewrite replace string.</param>
            <returns>HTML UL/LI list based on this menu.</returns>
        </member>
        <member name="M:Rendition.Commerce.Menu.BuildMenu(Rendition.Commerce.Menu,Rendition.MenuCollectionCode,Rendition.MenuCollectionCode,System.String,System.String,System.Boolean)">
            <summary>
            Internal method used by menuHierarchy to create HTML menus.
            </summary>
            <param name="menu">The menu.</param>
            <param name="childCode">The child code.</param>
            <param name="rootCode">The root code.</param>
            <param name="rewriteFilter">Rewrite Match Pattern.</param>
            <param name="rewriteReplace">Rewrite Replace.</param>
            <param name="recursive">if set to <c>true</c> child menus will be rendered.</param>
            <returns>
            built string
            </returns>
        </member>
        <member name="T:Rendition.Commerce.Replies">
            <summary>
            Replies to Blogs or replies on the site.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Replies.List">
            <summary>
            Replies to Blogs or replies on the site.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Replies.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Replies"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="M:Rendition.Commerce.Replies.BuildReplyHierarchy">
            <summary>
            Builds the reply hierarchy.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Replies.Refresh(Rendition.Site)">
            <summary>
            Refreshes the list of replies on the site.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="M:Rendition.Commerce.Replies.ReplyNode(System.Collections.Generic.List{Rendition.Commerce.Reply},System.Boolean)">
            <summary>
            Generates a generic hierarchial HTML structure to represent
            replies to an article or other reply-able object.
            </summary>
            <param name="replies">The replies.</param>
            <param name="hierarchial">if set to <c>true</c> [hierarchial].</param>
        </member>
        <member name="M:Rendition.Commerce.Replies.ReplyNode(System.Collections.Generic.List{Rendition.Commerce.Reply})">
            <summary>
            Generates a generic hierarchial HTML structure to represent
            replies to an article or other reply-able object.
            </summary>
            <param name="replies">The replies.</param>
        </member>
        <member name="M:Rendition.Commerce.Replies.ReplyNode(System.Collections.Generic.List{Rendition.Commerce.Reply},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Generates a generic hierarchial HTML structure to represent
            replies to an article or other reply-able object.
            </summary>
            <param name="replies">The replies.</param>
            <param name="hierarchial">if set to <c>true</c> [hierarchial].</param>
            <param name="approvesButton">if set to <c>true</c> [approves button] is visible.</param>
            <param name="disapprovesButton">if set to <c>true</c> [disapproves button] is visible.</param>
            <param name="inappropriateButton">if set to <c>true</c> [inappropriate button] is visible.</param>
        </member>
        <member name="T:Rendition.Commerce.Reply">
            <summary>
            A single reply to a Blog or reply.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Reply.Replies">
            <summary>
            List of replies that belong to this reply.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Reply.Id">
            <summary>
            Id of this reply.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Reply.Email">
            <summary>
            Email Address of the person who replied (when not logged on).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Reply.Subject">
            <summary>
            Subject of the reply.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Reply.Rating">
            <summary>
            Rating of the reply.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Reply.UserId">
            <summary>
            UserId of the user who made the reply.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Reply.Comment">
            <summary>
            Message on the reply.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Reply.AddedOn">
            <summary>
            Date this reply was added.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Reply.ParentId">
            <summary>
            The parent objectId (blogId,replyId).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Reply.Reference">
            <summary>
            What type of parent this reply has (Blog,reply).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Reply.Disabled">
            <summary>
            Is this reply enabled?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Reply.Approves">
            <summary>
            How many times approve has been hit.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Reply.Disapproves">
            <summary>
            How many times disapprove has been hit.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Reply.FlaggedInappropriate">
            <summary>
             How many times flag inappropriate has been hit.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Reply.FlaggedOk">
            <summary>
            Did the administrator flag this Ok?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Reply.User">
            <summary>
            User who added this reply.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Reply.#ctor(System.Guid,System.String,System.String,System.Int32,System.Int32,System.String,System.DateTime,System.Guid,System.String,System.Boolean,System.Int32,System.Int32,System.Int32,System.Boolean,Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Reply"/> class.
            </summary>
            <param name="_replyId">The _reply id.</param>
            <param name="_email">The _email.</param>
            <param name="_subject">The _subject.</param>
            <param name="_rating">The _rating.</param>
            <param name="_userId">The _user id.</param>
            <param name="_comment">The _comment.</param>
            <param name="_addedOn">The _added on.</param>
            <param name="_parentId">The _parent id.</param>
            <param name="_reference">The _reference.</param>
            <param name="_disabled">if set to <c>true</c> [_disabled].</param>
            <param name="_approves">The _approves.</param>
            <param name="_disapproves">The _disapproves.</param>
            <param name="_flaggedInappropriate">The _flagged inappropriate.</param>
            <param name="_flaggedOk">if set to <c>true</c> [_flagged ok].</param>
            <param name="site">The site.</param>
        </member>
        <member name="T:Rendition.Commerce.Blogs">
            <summary>
            This class creates is a list of Blogs and their associated entries
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Blogs.List">
            <summary>
            List of Blogs on the site.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Blogs.AllEntries">
            <summary>
            All Blog entries across all Blogs.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Blogs.GetBlogEntryById(System.String)">
            <summary>
            Gets the Blog entry by id.
            </summary>
            <param name="entryId">The entry id.</param>
            <returns>Selected Blog entry.</returns>
        </member>
        <member name="M:Rendition.Commerce.Blogs.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Blogs"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="M:Rendition.Commerce.Blogs.GetBlogByName(System.String)">
            <summary>
            Gets the Blog by name.
            </summary>
            <param name="name">The name.</param>
            <returns>Selected Blog.</returns>
        </member>
        <member name="M:Rendition.Commerce.Blogs.GetBlogById(System.Guid)">
            <summary>
            Gets the Blog by id.
            </summary>
            <param name="id">The id.</param>
            <returns>Selected Blog.</returns>
        </member>
        <member name="T:Rendition.Commerce.BlogEntry">
            <summary>
            This class creates is a single Blog entry.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.Id">
            <summary>
            Id of this Blog entry.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.Replies">
            <summary>
            Relies belonging to this Blog entry.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.Subject">
            <summary>
            Subject of this Blog.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.Message">
            <summary>
            Blog message body.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.Comments">
            <summary>
            Comments on the Blog.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.Tags">
            <summary>
            Tags associated with the Blog in a CSV list.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.EditorId">
            <summary>
            The userId of the user who is the editor for this Blog entry.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.AuthorId">
            <summary>
            The userId of the user who is the Author for this Blog entry.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.Author">
            <summary>
            The Author of this Blog entry.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.Editor">
            <summary>
            The editor of this Blog entry.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.AddDate">
            <summary>
            The date this Blog entry was added.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.DateChanged">
            <summary>
            The date this Blog entry was last changed.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.LastEditor">
            <summary>
            The userId of the last person who edited this Blog entry (not implemented).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.Annotations">
            <summary>
            Annotations for this Blog entry (not implmented).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.Enabled">
            <summary>
            Is this Blog entry enabled?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.AuditComments">
            <summary>
            Does the Author/editor want to audit all comments before they are publicly visible?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.AllowComments">
            <summary>
            Does the Author/editor want to allow comments on this Blog entry?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.EmailUpdates">
            <summary>
            Does the Author/editor want to be updated via email when this Blog entry has a comment posted to it?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.BlogImage">
            <summary>
            The path to the single image associated with this Blog.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.PublicBlog">
            <summary>
            Is this Blog editable by any administrative user or only by the Author/editor?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.ListOrder">
            <summary>
            The order this Blog will appear in when ordered by list order.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.Archive">
            <summary>
            Is this Blog archnived (no longer visible)?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.Introduction">
            <summary>
            The lead in to the Blog entry.  Specified by a h6 html block in the main article.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.Blog">
            <summary>
            the Blog this Blog entry belongs to.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.GalleryId">
            <summary>
            the galleryId that this Blog is associated with.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.Gallery">
            <summary>
            The gallery that belongs to this Blog.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BlogEntry.HasIntroduction">
            <summary>
            If this Blog has a h6 block for the introduction area this will be set true.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.BlogEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.BlogEntry"/> class.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.BlogEntry.#ctor(System.Guid,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.DateTime,System.DateTime,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.Int32,System.Boolean,System.Guid,Rendition.Commerce.Blog,Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.BlogEntry"/> class.
            </summary>
            <param name="f_id">The f_id.</param>
            <param name="f_subject">The f_subject.</param>
            <param name="f_message">The f_message.</param>
            <param name="f_comments">The f_comments.</param>
            <param name="f_tags">The f_tags.</param>
            <param name="f_editor">The f_editor.</param>
            <param name="f_author">The f_author.</param>
            <param name="f_addDate">The f_add date.</param>
            <param name="f_dateChanged">The f_date changed.</param>
            <param name="f_lastEditor">The f_last editor.</param>
            <param name="f_annotations">The f_annotations.</param>
            <param name="f_enabled">if set to <c>true</c> [f_enabled].</param>
            <param name="f_auditComments">if set to <c>true</c> [f_audit comments].</param>
            <param name="f_allowComments">if set to <c>true</c> [f_allow comments].</param>
            <param name="f_emailUpdates">if set to <c>true</c> [f_email updates].</param>
            <param name="f_blogImage">The f_blog image.</param>
            <param name="f_publicBlog">if set to <c>true</c> [f_public Blog].</param>
            <param name="f_listOrder">The f_list order.</param>
            <param name="f_archive">if set to <c>true</c> [f_archive].</param>
            <param name="f_galleryId">The f_gallery id.</param>
            <param name="_blog">The _blog.</param>
            <param name="site">The site.</param>
        </member>
        <member name="T:Rendition.Commerce.Blog">
            <summary>
            This class creates is a Blog (news section) - a collection of Blog entries (articles).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Blog.Entries">
            <summary>
            List of all the entries for this Blog.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Blog.Id">
            <summary>
            Id of this Blog.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Blog.CategoryName">
            <summary>
            The name of this Blog.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Blog.PublicCategory">
            <summary>
            Is this Blog editable by any administrative user or only the Author/editor.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Blog.AuthorId">
            <summary>
            the userId of the Author.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Blog.Author">
            <summary>
            The Author.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Blog.ShowInTicker">
            <summary>
            This Blog shows up in the news ticker.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Blog.BlogPage">
            <summary>
            The page this Blog feels at home on.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Blog.#ctor(System.Guid,System.String,System.Boolean,System.Int32,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Blog"/> class.
            </summary>
            <param name="f_id">The f_id.</param>
            <param name="f_categoryName">Name of the f_category.</param>
            <param name="f_publicCategory">if set to <c>true</c> [f_public category].</param>
            <param name="f_author">The f_author.</param>
            <param name="f_showInTicker">if set to <c>true</c> [f_show in ticker].</param>
            <param name="f_blogPage">The f_blog page.</param>
        </member>
        <member name="M:Rendition.Commerce.Blog.#ctor(System.Guid,System.String,System.Boolean,System.Int32,System.Boolean,System.String,Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Blog"/> class.
            </summary>
            <param name="f_id">The f_id.</param>
            <param name="f_categoryName">Name of the f_category.</param>
            <param name="f_publicCategory">if set to <c>true</c> [f_public category].</param>
            <param name="f_author">The f_author.</param>
            <param name="f_showInTicker">if set to <c>true</c> [f_show in ticker].</param>
            <param name="f_blogPage">The f_blog page.</param>
            <param name="site">The site.</param>
        </member>
        <member name="M:Rendition.Commerce.Blog.LoadBlog(System.Guid,System.String,System.Boolean,System.Int32,System.Boolean,System.String,Rendition.Site)">
            <summary>
            Loads the Blog.
            </summary>
            <param name="f_id">The f_id.</param>
            <param name="f_categoryName">Name of the f_category.</param>
            <param name="f_publicCategory">if set to <c>true</c> [f_public category].</param>
            <param name="f_author">The f_author.</param>
            <param name="f_showInTicker">if set to <c>true</c> [f_show in ticker].</param>
            <param name="f_blogPage">The f_blog page.</param>
            <param name="site">The site.</param>
        </member>
        <member name="M:Rendition.Commerce.Blog.Add(Rendition.Commerce.BlogEntry)">
            <summary>
            Adds the specified new_blog.
            </summary>
            <param name="new_blog">The new_blog.</param>
        </member>
        <member name="M:Rendition.Commerce.Blog.PagesTotal(System.Int32)">
            <summary>
            Gets the total number of Blog pages.  This is a 1 based count. e.g.: 1,2,3,4,5...
            </summary>
            <param name="blogsPerPage">The Blogs per page.</param>
            <returns>Total number of Blog pages</returns>
        </member>
        <member name="M:Rendition.Commerce.Blog.GetPage(System.Int32,System.Int32)">
            <summary>
            Gets a list of Blog entries for a certain page.  The page is 1 based so page 1 is 1, not 0.
            </summary>
            <param name="page">The page.</param>
            <param name="blogsPerPage">Enter per page.</param>
            <returns></returns>
        </member>
        <member name="T:Rendition.Commerce.Cart">
            <summary>
            This class creates a cart with items drawn from the database
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Cart.Session">
            <summary>
            The session of this cart.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Cart.Items">
            <summary>
            List of cart items in this cart.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Cart.Addresses">
            <summary>
            List of addresses associated with line items in this account.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Cart.EstShippingCost">
            <summary>
            Estimated shipping cost.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Cart.EstShipTotal">
            <summary>
            The estimated total of all shipping costs.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Cart.SubTotal">
            <summary>
            Sub total.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Cart.GrandTotal">
            <summary>
            Grand Total.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Cart.TaxTotal">
            <summary>
            Tax total.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Cart.DiscountTotal">
            <summary>
            Discount Total.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Cart.Site">
            <summary>
            The site this cart belongs to.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Cart.#ctor(Rendition.Site.Session,Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Cart"/> class.
            </summary>
            <param name="f_session">The f_session.</param>
            <param name="f_site">The f_site.</param>
        </member>
        <member name="M:Rendition.Commerce.Cart.GetItemById(System.Guid)">
            <summary>
            Creates an item used to populate the class _cart. 
            This method does not add items to the database.
            </summary>
            <param name="cartId">Cart Id of the item</param>
            <returns>matching _cart_item</returns>
        </member>
        <member name="M:Rendition.Commerce.Cart.Refresh">
            <summary>
            Emptys cart in memory and then refreshes it from the database
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Cart.Refresh(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Emptys cart in memory and then refreshes it from the database
            </summary>
        </member>
        <member name="T:Rendition.Commerce.CartItem">
            <summary>
            This class represents an item in the cart class
            This class contains the item that is in the cart
            as well as quantity, Address and other information.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.CartItem.AddedOn">
            <summary>
            Date this item was added to the cart.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.CartItem.Item">
            <summary>
            Item for this line.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.CartItem.CartId">
            <summary>
            Unique id of this item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.CartItem.Price">
            <summary>
            Price of this item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.CartItem.Qty">
            <summary>
            Quantity of this item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.CartItem.Inputs">
            <summary>
            List of inputs in this item's form.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.CartItem.AddressId">
            <summary>
            Id of the Address associated with this line item.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.CartItem.Form">
            <summary>
            The form used by this line item, if any.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.CartItem.ParentCartId">
            <summary>
            The related parent cartId if any.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.CartItem.Session">
            <summary>
            The session this cart line belongs to.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.CartItem.XMLAddressId">
            <summary>
            the Address id encoded for ECMA/DHTML
            </summary>
        </member>
        <member name="F:Rendition.Commerce.CartItem.XMLId">
            <summary>
            the cart id encoded for ECMA/DHTML
            </summary>
        </member>
        <member name="F:Rendition.Commerce.CartItem.Error_Id">
            <summary>
            Any errors that may occur on this line.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.CartItem.Error_Description">
            <summary>
            The description of any errors that occured.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.CartItem.#ctor(System.String,System.Guid,System.Decimal,System.Int32,System.Guid,System.DateTime,Rendition.Site.Session)">
            <summary>
            Creates an item used to populate the class _cart.  This method does not add items to the database.
            </summary>
            <param name="_item_number">Item Number</param>
            <param name="_cartId">Cart Id from the table cart</param>
            <param name="_price">Price of the item in the cart</param>
            <param name="_qty">Quantity of this line item</param>
            <param name="_addressId">Address Id of the Address to ship to</param>
            <param name="addTime">The add time.</param>
            <param name="session">_session to attach this item to</param>
        </member>
        <member name="P:Rendition.Commerce.CartItem.HtmlWithValues">
            <summary>
            Gets the HTML with values.
            </summary>
            <value>The HTML with values.</value>
        </member>
        <member name="P:Rendition.Commerce.CartItem.Address">
            <summary>
            The Address of this line item.
            </summary>
            <value>The Address.</value>
        </member>
        <member name="T:Rendition.Commerce.GalleryImage">
            <summary>
            This class creates a single image for the gallery class
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.Id">
            <summary>
            Id of the image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.Path">
            <summary>
            path to the orginal image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.Link">
            <summary>
            Link for when the image is clicked.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.Title">
            <summary>
            Title of the image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.CropX">
            <summary>
            Cropping X coordinate.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.CropY">
            <summary>
            Cropping Y coordinate.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.CropH">
            <summary>
            Cropping height.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.CropW">
            <summary>
            Cropping width.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.Height">
            <summary>
            Height of the image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.Width">
            <summary>
            Width of the image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.Comments">
            <summary>
            Comments.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.Description">
            <summary>
            Description of the image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.Enabled">
            <summary>
            Does this image show up in the list?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.RotatorOrder">
            <summary>
            The order this image appears in in the rotating list.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.ThumbOrder">
            <summary>
            The order this image appears in in the thumbnail list.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.RotatorHeight">
            <summary>
            Height of the rotator image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.RotatorWidth">
            <summary>
            Width of the rotator image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.ThumbHeight">
            <summary>
            Height of the thumbnail image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.ThumbWidth">
            <summary>
            Width of the thumbnail image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.UserId">
            <summary>
            The userId of the user who uploaded this image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.AddDate">
            <summary>
            The date this image was added.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.BlogHeight">
            <summary>
            The height of the Blog image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.BlogWidth">
            <summary>
            The width of the Blog image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.PortfolioHeight">
            <summary>
            The height of the portfolio image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.PortfolioWidth">
            <summary>
            The width of the portfolio image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.Tags">
            <summary>
            Tags, in a CSV list associated with this image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.TagsToSearchFor">
            <summary>
            Tags that when this image is clicked the system should search for.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.EXIF">
            <summary>
            EXIF data associated with this image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.Rotator">
            <summary>
            Rotator image path.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.Thumb">
            <summary>
            Thumbnail image path.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.Full">
            <summary>
            Full size image path (not original).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.Portfolio">
            <summary>
            Portfolio image path.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.GalleryImage.Blog">
            <summary>
            Blog image path.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.GalleryImage.#ctor(System.Guid,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.GalleryImage"/> class.
            </summary>
            <param name="f_id">The f_id.</param>
            <param name="f_path">The f_path.</param>
            <param name="f_link">The f_link.</param>
            <param name="f_title">The f_title.</param>
            <param name="f_cropX">The f_crop X.</param>
            <param name="f_cropY">The f_crop Y.</param>
            <param name="f_cropH">The f_crop H.</param>
            <param name="f_cropW">The f_crop W.</param>
            <param name="f_height">The f_height.</param>
            <param name="f_width">The f_width.</param>
            <param name="f_comments">The f_comments.</param>
            <param name="f_description">The f_description.</param>
            <param name="f_enabled">if set to <c>true</c> [f_enabled].</param>
            <param name="f_rotator_order">The f_rotator_order.</param>
            <param name="f_thumb_order">The f_thumb_order.</param>
            <param name="f_rotatorHeight">Height of the f_rotator.</param>
            <param name="f_rotatorWidth">Width of the f_rotator.</param>
            <param name="f_thumbHeight">Height of the f_thumb.</param>
            <param name="f_thumbWidth">Width of the f_thumb.</param>
            <param name="f_userid">The f_userid.</param>
            <param name="f_addDate">The f_add date.</param>
            <param name="f_blogHeight">Height of the f_blog.</param>
            <param name="f_blogWidth">Width of the f_blog.</param>
            <param name="f_portfolioHeight">Height of the f_portfolio.</param>
            <param name="f_portfolioWidth">Width of the f_portfolio.</param>
            <param name="f_tags">The f_tags.</param>
            <param name="f_tagsToSearchFor">The f_tags to search for.</param>
            <param name="f_exif">The f_exif.</param>
            <param name="imageX">The image X.</param>
            <param name="imageY">The image Y.</param>
            <param name="categoryName">Name of the category.</param>
            <param name="categoryId">The category id.</param>
        </member>
        <member name="T:Rendition.Commerce.Gallery">
            <summary>
            This class creates a list of image galleries and associated images
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Gallery.Images">
            <summary>
            List of images in this gallery.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Gallery.Count">
            <summary>
            Count of images in this gallery.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Gallery.Id">
            <summary>
            Id of this gallery.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Gallery.Name">
            <summary>
            Name of this gallery.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Gallery.Height">
            <summary>
            Height of the gallery rotator.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Gallery.Width">
            <summary>
            Width of the gallery rotator.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Gallery.ResizeMethod">
            <summary>
            Resize method (not implemented).
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Gallery.RotatorTemplate">
            <summary>
            The template Id used to create the rotator image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Gallery.ThumbTemplate">
            <summary>
            The template Id used to create the thumbnail image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Gallery.FullSizeTemplate">
            <summary>
            The template Id used to create the full size image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Gallery.PortfolioTemplate">
            <summary>
            The template Id used to create the portfolio image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Gallery.BlogTemplate">
            <summary>
            The template Id used to create the Blog image.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Gallery.IsGallery">
            <summary>
            Is this a gallery?
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Gallery.GalleryDescription">
            <summary>
            Descripton of the gallery.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Gallery.GalleryOrder">
            <summary>
            The order this gallery appears in with its siblings.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Gallery.Tags">
            <summary>
            CSV list of keywords associated with this gallery.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Gallery.#ctor(System.Guid,System.String,System.Int32,System.Int32,System.Int32,System.Guid,System.Guid,System.Guid,System.Guid,System.Guid,System.Boolean,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Gallery"/> class.
            </summary>
            <param name="f_id">The f_id.</param>
            <param name="f_name">The f_name.</param>
            <param name="f_height">The f_height.</param>
            <param name="f_width">The f_width.</param>
            <param name="f_resizeMethod">The f_resize method.</param>
            <param name="f_rotatorTemplate">The f_rotator template.</param>
            <param name="f_thumbTemplate">The f_thumb template.</param>
            <param name="f_fullsizeTemplate">The f_fullsize template.</param>
            <param name="f_portfolioTemplate">The f_portfolio template.</param>
            <param name="f_blogTemplate">The f_blog template.</param>
            <param name="f_gallery">if set to <c>true</c> [f_gallery].</param>
            <param name="f_gallery_description">The f_gallery_description.</param>
            <param name="f_gallery_order">The f_gallery_order.</param>
            <param name="f_tags">The f_tags.</param>
        </member>
        <member name="M:Rendition.Commerce.Gallery.Add(Rendition.Commerce.GalleryImage)">
            <summary>
            Adds the specified new_image.
            </summary>
            <param name="new_image">The new_image.</param>
        </member>
        <member name="T:Rendition.Commerce.Galleries">
            <summary>
            A list of galleries from the database
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Galleries.List">
            <summary>
            Every gallery in the database.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Galleries.GetGallery(System.String)">
            <summary>
            Gets the entire gallery by looking up an image in the gallery.
            </summary>
            <param name="galleryImageId">The gallery image id.</param>
            <returns>{error:0,desc:"error description",gallery:GalleryObject}.</returns>
        </member>
        <member name="M:Rendition.Commerce.Galleries.GetNextGalleryImage(System.String)">
            <summary>
            Gets the 'next' image.
            </summary>
            <param name="galleryImageId">The gallery image id.</param>
            <returns>{error:0,desc:"error description",rotator:path,Blog:path,full:path,portfolio:path,
            thumb:path,title:title,description:description,link:link,exif:exif data,tags:tag CSV,tagsToSearchFor:search tags CSV}.</returns>
        </member>
        <member name="M:Rendition.Commerce.Galleries.GetGalleryByName(System.String)">
            <summary>
            Gets the gallery by looking up its name in the database.
            </summary>
            <param name="galleryName">Name of the gallery.</param>
            <returns>Selected gallery or null</returns>
        </member>
        <member name="M:Rendition.Commerce.Galleries.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Galleries"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="M:Rendition.Commerce.Galleries.Add(Rendition.Commerce.Gallery)">
            <summary>
            Adds the specified new_gallery.
            </summary>
            <param name="new_gallery">The new_gallery.</param>
        </member>
        <member name="T:Rendition.Commerce.BillOfMaterial">
            <summary>
            A single bill of material link.
            This class describes how one item is related to another.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BillOfMaterial.Id">
            <summary>
            Unique if of the bill of material
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BillOfMaterial.ItemNumber">
            <summary>
            Item number of assembly
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BillOfMaterial.SubItemNumber">
            <summary>
            Item number of the componet part
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BillOfMaterial.Qty">
            <summary>
            Quantity of the componet part
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BillOfMaterial.ShowAsSeperateLineOnInvoice">
            <summary>
            Show up on invoice
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BillOfMaterial.OnlyWhenSelectedOnForm">
            <summary>
            Only when selected on form
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BillOfMaterial.ItemComponetType">
            <summary>
            Group of componets this componet part belongs to
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BillOfMaterial.Depth">
            <summary>
            How deep is this assembly nested
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BillOfMaterial.ItemQty">
            <summary>
            quantity of requested assembly
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BillOfMaterial.KitStock">
            <summary>
            Stock level of requested assembly
            </summary>
        </member>
        <member name="M:Rendition.Commerce.BillOfMaterial.#ctor(System.Guid,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.BillOfMaterial"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="itemNumber">The item number.</param>
            <param name="subItemNumber">The sub item number.</param>
            <param name="qty">The qty.</param>
            <param name="depth">The depth.</param>
            <param name="itemQty">The item qty.</param>
            <param name="kitStock">The kit stock.</param>
            <param name="showAsSeperateLineOnInvoice">if set to <c>true</c> [show as seperate line on invoice].</param>
            <param name="onlyWhenSelectedOnForm">if set to <c>true</c> [only when selected on form].</param>
            <param name="itemComponetType">Type of the item componet.</param>
        </member>
        <member name="T:Rendition.Commerce.BillOfMaterials">
            <summary>
            Collection of all the bill of material links.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.BillOfMaterials.List">
            <summary>
            List of the assemblies in this site
            </summary>
        </member>
        <member name="M:Rendition.Commerce.BillOfMaterials.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.BillOfMaterials"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="T:Rendition.Commerce.Address">
            <summary>
            An Address with shipping information, potential rates and shipping cost estimates.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Address.Id">
            <summary>
            The id of the Address.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Address.FirstName">
            <summary>
            First name.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Address.LastName">
            <summary>
            Last name.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Address.Address1">
            <summary>
            Address line 1.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Address.Address2">
            <summary>
            Address line 2.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Address.City">
            <summary>
            City.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Address.State">
            <summary>
            State.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Address.Zip">
            <summary>
            Zip code.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Address.Country">
            <summary>
            Country.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Address.HomePhone">
            <summary>
            Home phone.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Address.WorkPhone">
            <summary>
            Work phone.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Address.Email">
            <summary>
            Email Address.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Address.SpecialInstructions">
            <summary>
            Special shipping instructions.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Address.Comments">
            <summary>
            Comments.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Address.SendShipmentUpdates">
            <summary>
            Send shipment updates via email when the status changes.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Address.EmailAds">
            <summary>
            It's ok to email this Address ads.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Address.Rate">
            <summary>
            The selected rate of this Address.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Address.DateCreated">
            <summary>
            The date this Address was created.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Address.Company">
            <summary>
            Company.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Address.EstShippingCost">
            <summary>
            Estimated shipping cost.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.Address.Rates">
            <summary>
            List of avaliable shipping rates for this Address.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Address.CreateAddress">
            <summary>
            Creates a blank Address.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rendition.Commerce.Address.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rendition.Commerce.Address.Save(Rendition.Site.Session)">
            <summary>
            Saves the Address.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Rendition.Commerce.Address.Save(Rendition.Site.Session,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Saves the Address.
            </summary>
            <param name="session">The session.</param>
            <param name="cn">The cn.</param>
            <param name="trans">The trans.</param>
        </member>
        <member name="M:Rendition.Commerce.Address.#ctor(System.Guid,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Address"/> class.
            </summary>
            <param name="f_id">The id of the Address.</param>
            <param name="cn">SQL connection.</param>
            <param name="trn">The TRN.</param>
        </member>
        <member name="M:Rendition.Commerce.Address.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Address"/> class.
            </summary>
        </member>
        <member name="M:Rendition.Commerce.Address.#ctor(System.Guid,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,Rendition.Commerce.Rate,System.DateTime,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.Address"/> class.
            </summary>
            <param name="f_id">The f_id.</param>
            <param name="f_firstName">Name of the f_first.</param>
            <param name="f_lastName">Name of the f_last.</param>
            <param name="f_address1">The f_address1.</param>
            <param name="f_address2">The f_address2.</param>
            <param name="f_city">The f_city.</param>
            <param name="f_state">The f_state.</param>
            <param name="f_zip">The f_zip.</param>
            <param name="f_country">The f_country.</param>
            <param name="f_homePhone">The f_home phone.</param>
            <param name="f_workPhone">The f_work phone.</param>
            <param name="f_email">The f_email.</param>
            <param name="f_specialInstructions">The f_special instructions.</param>
            <param name="f_comments">The f_comments.</param>
            <param name="f_sendshipmentupdates">if set to <c>true</c> [f_sendshipmentupdates].</param>
            <param name="f_emailAds">if set to <c>true</c> [f_email ads].</param>
            <param name="f_rate">The f_rate.</param>
            <param name="f_dateCreated">The f_date created.</param>
            <param name="f_company">The f_company.</param>
        </member>
        <member name="M:Rendition.Commerce.Address.CreateAddressBlock">
            <summary>
            Creates an HTML table with the Address information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rendition.Commerce.Address.CreateShortAddressBlock(System.String)">
            <summary>
            Creates a short Address block seperated by seperator character.
            </summary>
            <param name="seperatorCharacter">The seperator character.</param>
            <returns></returns>
        </member>
        <member name="T:Rendition.Commerce.SiteSectionEntry">
            <summary>
            An entry in a site section.  Sections are made up of one or more entries.
            Only one entry can be 'active' at a time.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.SiteSectionEntry.Id">
            <summary>
            unique id of this entry
            </summary>
        </member>
        <member name="F:Rendition.Commerce.SiteSectionEntry.ParentId">
            <summary>
            unique id of the parent of this entry
            </summary>
        </member>
        <member name="F:Rendition.Commerce.SiteSectionEntry.AddDate">
            <summary>
            Date the entry was added
            </summary>
        </member>
        <member name="F:Rendition.Commerce.SiteSectionEntry.Name">
            <summary>
            The name of the section
            </summary>
        </member>
        <member name="F:Rendition.Commerce.SiteSectionEntry.Active">
            <summary>
            If the entry is active
            </summary>
        </member>
        <member name="F:Rendition.Commerce.SiteSectionEntry.Source">
            <summary>
            Source of the page section entry
            </summary>
        </member>
        <member name="F:Rendition.Commerce.SiteSectionEntry.Description">
            <summary>
            Descripton of this entry
            </summary>
        </member>
        <member name="M:Rendition.Commerce.SiteSectionEntry.#ctor(System.Guid,System.Guid,System.String,System.DateTime,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.SiteSectionEntry"/> class.
            </summary>
            <param name="_id">The _id.</param>
            <param name="_parentId">The parent id.</param>
            <param name="_source">The source code.</param>
            <param name="_addDate">The _add date.</param>
            <param name="_active">if set to <c>true</c> [_active].</param>
            <param name="_description">The description.</param>
        </member>
        <member name="P:Rendition.Commerce.SiteSectionEntry.Value">
            <summary>
            Rendered output of the page section entry.
            </summary>
        </member>
        <member name="T:Rendition.Commerce.SiteSection">
            <summary>
            A section is a container of section entries.  One one entry can be the 'active'
            entry at a time.  Entries have dates to help tell them apart.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.SiteSection.Entries">
            <summary>
            entries for this section.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.SiteSection.Id">
            <summary>
            Unique id of the section
            </summary>
        </member>
        <member name="F:Rendition.Commerce.SiteSection.Description">
            <summary>
            Description of this section
            </summary>
        </member>
        <member name="F:Rendition.Commerce.SiteSection.Name">
            <summary>
            Name of this section
            </summary>
        </member>
        <member name="F:Rendition.Commerce.SiteSection.Url">
            <summary>
            URL of this section
            </summary>
        </member>
        <member name="M:Rendition.Commerce.SiteSection.#ctor(System.Guid,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.SiteSection"/> class.
            </summary>
            <param name="_id">The _id.</param>
            <param name="_name">The _name.</param>
            <param name="_description">The _description.</param>
            <param name="_URL">The _ URL.</param>
        </member>
        <member name="P:Rendition.Commerce.SiteSection.Value">
            <summary>
            Gets the value of the active entry for this section.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Rendition.Commerce.SiteSections">
            <summary>
            A cacheable group of siteSections filtered for this site.
            </summary>
        </member>
        <member name="F:Rendition.Commerce.SiteSections.List">
            <summary>
            list of sections in this site group
            </summary>
        </member>
        <member name="F:Rendition.Commerce.SiteSections.Entries">
            <summary>
            list of entries in this site group
            </summary>
        </member>
        <member name="M:Rendition.Commerce.SiteSections.GetSectionByName(System.String)">
            <summary>
            Gets the section by name.
            </summary>
            <param name="sectionName">Name of the section.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Commerce.SiteSections.GetSectionById(System.Guid)">
            <summary>
            Gets the section by id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Commerce.SiteSections.GetEntryById(System.Guid)">
            <summary>
            Gets the entry by id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Commerce.SiteSections.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Commerce.SiteSections"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="T:Rendition.Site">
            <summary>
            Base site cache and the basis for interaction with the SQL connection and database.
            Authentication and cryptography methods
            Database driven event handling
            Methods for rasing events for the ISiteInterface
            </summary>
        </member>
        <member name="T:Rendition.ISiteInterface">
            <summary>
            All events in this program are enumerated here.
            </summary>
        </member>
        <member name="E:Rendition.ISiteInterface.Initializing">
            <summary>
            Occurs when the site starts.
            </summary>
        </member>
        <member name="E:Rendition.ISiteInterface.Disposing">
            <summary>
            Occurs when the site is shutting down.
            </summary>
        </member>
        <member name="E:Rendition.ISiteInterface.BeginRequest">
            <summary>
            Occurs when a request begins.
            </summary>
        </member>
        <member name="E:Rendition.ISiteInterface.EndRequest">
            <summary>
            Occurs when a request ends.
            </summary>
        </member>
        <member name="E:Rendition.ISiteInterface.RecalculatedOrder">
            <summary>
            Occurs when an order is recalculated.
            </summary>
        </member>
        <member name="E:Rendition.ISiteInterface.RecalculatedCart">
            <summary>
            Occurs when a cart/quote is recalculated.
            </summary>
        </member>
        <member name="E:Rendition.ISiteInterface.PlacingOrder">
            <summary>
            Occurs just before an order is placed.
            </summary>
        </member>
        <member name="E:Rendition.ISiteInterface.PlacedOrder">
            <summary>
            Occurs after an order is placed.
            </summary>
        </member>
        <member name="E:Rendition.ISiteInterface.LoggedOff">
            <summary>
            Occurs when a user logs on.
            </summary>
        </member>
        <member name="E:Rendition.ISiteInterface.LoggedOn">
            <summary>
            Occurs when a user logs off.
            </summary>
        </member>
        <member name="E:Rendition.ISiteInterface.CreatingUser">
            <summary>
            Occurs when a user is created.
            </summary>
        </member>
        <member name="E:Rendition.ISiteInterface.AddedToCart">
            <summary>
            Occurs when an item is added to the cart.
            </summary>
        </member>
        <member name="E:Rendition.ISiteInterface.AddingToCart">
            <summary>
            Occurs just before an item is added to the cart.
            </summary>
        </member>
        <member name="E:Rendition.ISiteInterface.StatusChanged">
            <summary>
            Occurs when a status changes.
            </summary>
        </member>
        <member name="E:Rendition.ISiteInterface.StatusChanging">
            <summary>
            Occurs before a status changes.
            </summary>
        </member>
        <member name="E:Rendition.ISiteInterface.CreatingItem">
            <summary>
            Occurs when an item is created.
            </summary>
        </member>
        <member name="E:Rendition.ISiteInterface.RenderedItemImage">
            <summary>
            Occurs when an image is rendered.
            </summary>
        </member>
        <member name="E:Rendition.ISiteInterface.RenderingItemImage">
            <summary>
            Occurs when before an image is rendered.
            </summary>
        </member>
        <member name="E:Rendition.ISiteInterface.CreatingEmail">
            <summary>
            Occurs when an email is created.
            </summary>
        </member>
        <member name="E:Rendition.ISiteInterface.CalculatingDiscount">
            <summary>
            Occurs when the discount is recalculated.
            </summary>
        </member>
        <member name="E:Rendition.ISiteInterface.OpeningPaymentGateway">
            <summary>
            Occurs when a credit card is charged.
            </summary>
        </member>
        <member name="E:Rendition.ISiteInterface.ShipmentUpdated">
            <summary>
            Occurs when a shipment is updated (addressUpdate table gets new row with 'emailSent is null').
            </summary>
        </member>
        <member name="E:Rendition.ISiteInterface.UIInitializing">
            <summary>
            Occurs when a users starts the JavaScript user interface.
            </summary>
        </member>
        <member name="E:Rendition.ISiteInterface.LineUpdated">
            <summary>
            Occurs when a line item is updated in an order.
            </summary>
        </member>
        <member name="F:Rendition.Site.DEFAULT_LOG_VERBOSITY">
            <summary>
            The default log verbosity.
            </summary>
        </member>
        <member name="F:Rendition.Site.DEFAULT_TELNET_SERVER_PORT">
            <summary>
            The default telnet server port.
            </summary>
        </member>
        <member name="M:Rendition.Site.LogOn(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            logs the current session on
            </summary>
            <param name="args">The arguments.</param>
            <returns>{error:0,desc:""}.</returns>
        </member>
        <member name="M:Rendition.Site.GetHash(System.Object)">
            <summary>
            Turns a string into a hashed string.  A one way encrypted value.
            </summary>
            <param name="_password">The _password.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Site.LogOn(System.String,System.String,System.String)">
            <summary>
            Logons the specified user.
            </summary>
            <param name="userName">User Id.</param>
            <param name="password">Password.</param>
            <param name="session">Session to logon.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Site.LogOn(System.Int32,System.String,System.String)">
            <summary>
            Logons the specified user.
            </summary>
            <param name="userName">User Id.</param>
            <param name="password">Password.</param>
            <param name="session">Session to logon.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Site.LogOn(System.Int32,System.String,Rendition.Site.Session)">
            <summary>
            Logons the specified user.
            </summary>
            <param name="userName">User Id.</param>
            <param name="password">Password.</param>
            <param name="session">Session to logon.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Site.LogOn(System.String,System.String,Rendition.Site.Session)">
            <summary>
            Logons the specified user.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">The password.</param>
            <param name="session">Session to logon.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Site.LogOn(System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            logs the current session on
            </summary>
            <param name="args">The arguments (sessionid, hostSessionId, userId, email, password).</param>
            <param name="cn">The cn.</param>
            <param name="trns">The TRNS.</param>
            <returns>{error:0,desc:""}.</returns>
        </member>
        <member name="M:Rendition.Site.LogOff(System.String)">
            <summary>
            Logs off the specified session id.
            </summary>
            <param name="sessionId">The session id.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Site.LogOff(Rendition.Site.Session)">
            <summary>
            Logs off the specified session.
            </summary>
            <param name="session">The session.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Site.LogOff(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            logs the current session off
            </summary>
            <returns>{error:0,desc:""}.</returns>
        </member>
        <member name="M:Rendition.Site.LogOn(System.Int32,System.Guid)">
            <summary>
            log a session onto an account without using a password
            </summary>
            <param name="userId">The user id.</param>
            <param name="sessionId">The session id.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Site.LogOn(System.Int32,Rendition.Site.Session)">
            <summary>
            log a session onto an account without using a password
            </summary>
            <param name="userId">The user id.</param>
            <param name="session">The session.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Site.LogOn(System.Int32,Rendition.Site.Session,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            log a session onto an account without using a password
            </summary>
            <param name="userId">The user id.</param>
            <param name="session">The session.</param>
            <param name="cn">The sql connection.</param>
            <param name="trns">The sql transaction.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Site.LogOn(System.Int32,System.Guid,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            log a sessionId (session cookie string) onto an account without using a password
            </summary>
            <param name="userId">The user id.</param>
            <param name="sessionId">The session id.</param>
            <param name="cn">The sql connection.</param>
            <param name="trns">The sql transaction.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Site.CreateAccount(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an account and returns the new userId and error state
            </summary>
            <param name="args">The args.</param>
            <returns>{success:true,userId:userId}.</returns>
        </member>
        <member name="M:Rendition.Site.ProcessRequests(System.Boolean)">
            <summary>
            executes all requets as JSON method/arg pairs
            </summary>
            <param name="adminMode">if set to <c>true</c> [Admin mode].</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Site.JsonToMethod(System.String,System.Boolean)">
            <summary>
            Uses System.Reflection to turn request strings into methods in the merchant, Admin or setup classes.
            </summary>
            <param name="decodedRequestString">The decoded request string.</param>
            <param name="adminMode">if set to <c>true</c> [Admin mode].</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Site.syncDatabaseVersion">
            <summary>
            Syncs the database version.
            </summary>
        </member>
        <member name="M:Rendition.Site.CreateConnection(System.Boolean,System.Boolean)">
            <summary>
            Creates a new SQL connection.
            </summary>
            <param name="async">if set to <c>true</c> [async].</param>
            <param name="MARS">if set to <c>true</c> [MARS].</param>
            <returns></returns>
        </member>
        <member name="F:Rendition.Site.baseConfig">
            <summary>
            The configuration for the site.  Enough to get started
            and connect to a database, create base directories ect.
            The rest of the configuration is loaded on a per site Id
            basis from SQL site_configuration.  Site confuration Id is
            defined in this variable and passed to the site during
            instantiation.  For a web site (an IHttpModule) the
            site configuration is set in the web.config file.  See
            the reference site for more info on setting up a web.config
            file for Rendition.
            </summary>
        </member>
        <member name="F:Rendition.Site.State">
            <summary>
            State of the site (-1 = instatitation, 0 = ready)
            </summary>
        </member>
        <member name="F:Rendition.Site.SqlConnection">
            <summary>
            The main connection to the SQL server.
            </summary>
        </member>
        <member name="F:Rendition.Site.Id">
            <summary>
            The unique site id.
            </summary>
        </member>
        <member name="F:Rendition.Site.RewriteDirectives">
            <summary>
            List of installed rewrite directives.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteSections">
            <summary>
            Rendered site sections
            </summary>
        </member>
        <member name="F:Rendition.Site.Terms">
            <summary>
            Site terms of purchase.
            </summary>
        </member>
        <member name="F:Rendition.Site.Redirectors">
            <summary>
            Site redirectors.
            </summary>
        </member>
        <member name="F:Rendition.Site.ItemImages">
            <summary>
            Site item images.
            </summary>
        </member>
        <member name="F:Rendition.Site.RenderedImages">
            <summary>
            Rendered site images.
            </summary>
        </member>
        <member name="F:Rendition.Site.Properties">
            <summary>
            Site Properties.
            </summary>
        </member>
        <member name="F:Rendition.Site.Items">
            <summary>
            Site items.
            </summary>
        </member>
        <member name="F:Rendition.Site.Swatches">
            <summary>
            Site item swatches.
            </summary>
        </member>
        <member name="F:Rendition.Site.Sizes">
            <summary>
            Site item sizes.
            </summary>
        </member>
        <member name="F:Rendition.Site.Menus">
            <summary>
            Site Menus.
            </summary>
        </member>
        <member name="F:Rendition.Site.Categories">
            <summary>
            Site Categories.
            </summary>
        </member>
        <member name="F:Rendition.Site.Galleries">
            <summary>
            Site Galleries.
            </summary>
        </member>
        <member name="F:Rendition.Site.Blogs">
            <summary>
            Site Blogs.
            </summary>
        </member>
        <member name="F:Rendition.Site.Reviews">
            <summary>
            Site Reviews.
            </summary>
        </member>
        <member name="F:Rendition.Site.Users">
            <summary>
            Site Users.
            </summary>
        </member>
        <member name="F:Rendition.Site.Carriers">
            <summary>
            Site Carriers.
            </summary>
        </member>
        <member name="F:Rendition.Site.Rates">
            <summary>
            Site Shipping Rates.
            </summary>
        </member>
        <member name="F:Rendition.Site.Zones">
            <summary>
            Site Shipping Zones.
            </summary>
        </member>
        <member name="F:Rendition.Site.ZipToZones">
            <summary>
            Site Zip To Zone tables.
            </summary>
        </member>
        <member name="F:Rendition.Site.Countries">
            <summary>
            Site country list.
            </summary>
        </member>
        <member name="F:Rendition.Site.Discounts">
            <summary>
            Site database discount codes.
            </summary>
        </member>
        <member name="F:Rendition.Site.Defaults">
            <summary>
            Site default settings.
            </summary>
        </member>
        <member name="F:Rendition.Site.ModifiedDefaults">
            <summary>
            Site modified default settings.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteImagePlaceholders">
            <summary>
            Site image placeholders.
            </summary>
        </member>
        <member name="F:Rendition.Site.BillOfMaterials">
            <summary>
            Site bill of materials.
            </summary>
        </member>
        <member name="F:Rendition.Site.Replies">
            <summary>
            Replies to Blogs and replies on the site.
            </summary>
        </member>
        <member name="F:Rendition.Site.SEOListMetaUtilities">
            <summary>
            Search Engine Optimization utitlites.
            </summary>
        </member>
        <member name="F:Rendition.Site.FlagTypes">
            <summary>
            Flag Types.
            </summary>
        </member>
        <member name="F:Rendition.Site.NullUser">
            <summary>
            The user that gets used in place of a null.  User id 0 in the database.
            </summary>
        </member>
        <member name="F:Rendition.Site.CompiledEvents">
            <summary>
            A list of events comipled from the database.
            </summary>
        </member>
        <member name="F:Rendition.Site.Timers">
            <summary>
            A list of timers.
            </summary>
        </member>
        <member name="M:Rendition.Site.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Rendition.Site.Item(System.String)">
            <summary>
            Gets an item by item_number.
            </summary>
            <param name="item_number">The item_number.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Site.#ctor(Rendition.Site.SiteConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Site"/> class.
            </summary>
        </member>
        <member name="M:Rendition.Site.GetSqlDataReaderColumn(System.String,System.Data.SqlClient.SqlDataReader)">
            <summary>
            Gets the specified column value.
            </summary>
            <param name="column_name">The column_name.</param>
            <param name="r">The SqlDataReader.</param>
            <returns>
            Returns an empty string rather than a null from the Request[] object.
            </returns>
        </member>
        <member name="M:Rendition.Site.GetSqlDataReaderColumnName(System.String,System.Data.SqlClient.SqlDataReader)">
            <summary>
            Gets the specified column_name.
            </summary>
            <param name="column_name">The column_name.</param>
            <param name="r">The SqlDataReader.</param>
            <returns>column value</returns>
        </member>
        <member name="M:Rendition.Site.Variable(System.String)">
            <summary>
            Shows the selected site variable.
            </summary>
            <param name="site_var_name">The site_var_name.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Site.Exists(System.String)">
            <summary>
            Checks if the query has rows.
            </summary>
            <param name="sql_query">The sql_query.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Site.cr(System.String,System.Web.HttpContext)">
            <summary>
            Returns a Request[x] object even if the pramater is null
            </summary>
            <param name="varaible_Request">String of the request name</param>
            <param name="context">HttpContext of the current Application</param>
            <returns>Returns an empty string rather than a null from the Request[] object.</returns>
        </member>
        <member name="M:Rendition.Site.RefreshSiteData(Rendition.Site)">
            <summary>
            Refreshes the site cache.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="M:Rendition.Site.StopTaskScheduler">
            <summary>
            Stops the task scheduler.
            </summary>
        </member>
        <member name="M:Rendition.Site.ExecuteScheduledTask(System.Guid,System.String,System.Int32,System.String,System.String,System.DateTime,System.String,System.String)">
            <summary>
            Executes a scheduled task.
            </summary>
            <param name="taskId">The task id.</param>
            <param name="name">The name.</param>
            <param name="interval">The interval.</param>
            <param name="sourceCode">The source code.</param>
            <param name="language">The language.</param>
            <param name="lastRun">The last run.</param>
            <param name="lastErrorId">The last error id.</param>
            <param name="lastErrorJSON">The last error JSON.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Site.updateEventTaskStatus(System.Guid,System.DateTime,System.Boolean,System.DateTime,System.String,System.String)">
            <summary>
            Updates the event task status.
            </summary>
            <param name="taskId">The task id.</param>
            <param name="startDate">The start date.</param>
            <param name="lockStatus">if set to <c>true</c> [lock status].</param>
            <param name="endDate">The end date.</param>
            <param name="errorNumber">The error number.</param>
            <param name="errorJSON">The error JSON.</param>
        </member>
        <member name="M:Rendition.Site.StartTaskScheduler">
            <summary>
            Starts the task scheduler.
            </summary>
        </member>
        <member name="M:Rendition.Site.ExecuteScriptedEvent(System.String,System.Guid,System.String,System.String,System.String,System.Object,System.EventArgs,System.Boolean)">
            <summary>
            Executes the scripted event.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="taskId">The task id.</param>
            <param name="name">The name.</param>
            <param name="sourceCode">The source code.</param>
            <param name="language">The language.</param>
            <param name="sender">The sender.</param>
            <param name="scriptArguments">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <param name="preview">if set to <c>true</c> [preview].</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Site.BindEventHandlers">
            <summary>
            Binds the event handlers.
            </summary>
        </member>
        <member name="M:Rendition.Site.raiseOnlineupdate(Rendition.LineUpdateEventArgs)">
            <summary>
            Raises the onlineupdate event.
            </summary>
            <param name="args">The <see cref="!:Rendition.raiseOninit"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Site.raiseOndispose(Rendition.DisposeEventArgs)">
            <summary>
            Raises the ondispose event.
            </summary>
            <param name="args">The <see cref="T:Rendition.DisposeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Site.raiseOnbeginrequest(Rendition.BeginRequestEventArgs)">
            <summary>
            Raises the onbeginrequest event.
            </summary>
            <param name="args">The <see cref="T:Rendition.BeginRequestEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Site.raiseOnendrequest(Rendition.EndRequestEventArgs)">
            <summary>
            Raises the onendrequest event.
            </summary>
            <param name="args">The <see cref="T:Rendition.EndRequestEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Site.raiseOnrecalculateorder(Rendition.RecalculateOrderEventArgs)">
            <summary>
            Raises the onrecalculateorder event.
            </summary>
            <param name="args">The <see cref="T:Rendition.RecalculateOrderEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Site.raiseOnrecalculatecart(Rendition.RecalculateCartEventArgs)">
            <summary>
            Raises the onrecalculatecart event.
            </summary>
            <param name="args">The <see cref="T:Rendition.RecalculateCartEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Site.raiseOnbeforeplaceorder(Rendition.PlaceOrderEventArgs)">
            <summary>
            Raises the onbeforeplaceorder event.
            </summary>
            <param name="args">The <see cref="T:Rendition.PlaceOrderEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Site.raiseOnplaceorder(Rendition.AfterplaceorderEventArgs)">
            <summary>
            Raises the onplaceorder event.
            </summary>
            <param name="args">The <see cref="T:Rendition.AfterplaceorderEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Site.raiseOnlogon(Rendition.LogOnEventArgs)">
            <summary>
            Raises the onlogon event.
            </summary>
            <param name="args">The <see cref="T:Rendition.LogOnEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Site.raiseOnlogoff(Rendition.LogOffEventArgs)">
            <summary>
            Raises the onlogoff event.
            </summary>
            <param name="args">The <see cref="T:Rendition.LogOffEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Site.raiseOncreateuser(Rendition.CreateUserEventArgs)">
            <summary>
            Raises the oncreateuser event.
            </summary>
            <param name="args">The <see cref="T:Rendition.CreateUserEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Site.raiseOnaddtocart(Rendition.AddtocartEventArgs)">
            <summary>
            Raises the onaddtocart event.
            </summary>
            <param name="args">The <see cref="T:Rendition.AddtocartEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Site.raiseOnstatuschange(Rendition.StatusChangeEventArgs)">
            <summary>
            Raises the onstatuschange event.
            </summary>
            <param name="args">The <see cref="T:Rendition.StatusChangeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Site.raiseOnbeforestatuschange(Rendition.StatusChangeEventArgs)">
            <summary>
            Raises the onbeforestatuschange event.
            </summary>
            <param name="args">The <see cref="T:Rendition.StatusChangeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Site.raiseOncreateitem(Rendition.CreateItemEventArgs)">
            <summary>
            Raises the oncreateitem event.
            </summary>
            <param name="args">The <see cref="T:Rendition.CreateItemEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Site.raiseOnrenderitemimage(Rendition.RenderItemImageEventArgs)">
            <summary>
            Raises the onrenderitemimage event.
            </summary>
            <param name="args">The <see cref="T:Rendition.RenderItemImageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Site.raiseOnbeforerenderitemimage(Rendition.RenderItemImageEventArgs)">
            <summary>
            Raises the onbeforerenderitemimage event.
            </summary>
            <param name="args">The <see cref="T:Rendition.RenderItemImageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Site.raiseOncreateemail(Rendition.CreateEmailEventArgs)">
            <summary>
            Raises the oncreateemail event.
            </summary>
            <param name="args">The <see cref="T:Rendition.CreateEmailEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Site.raiseOncalculatediscount(Rendition.CalculateDiscountEventArgs)">
            <summary>
            Raises the oncalculatediscount event.
            </summary>
            <param name="args">The <see cref="T:Rendition.CalculateDiscountEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Site.raiseOnpaymentgateway(Rendition.PaymentGatewayEventArgs)">
            <summary>
            Raises the onpaymentgateway event.
            </summary>
            <param name="args">The <see cref="T:Rendition.PaymentGatewayEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Site.raiseOnshipmentupdate(Rendition.ShipmentUpdateArgs)">
            <summary>
            Raises the onshipmentupdate event.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Rendition.Site.raiseOnuiinit(Rendition.UIInitArgs)">
            <summary>
            Raises the onuiinit event.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Site.raiseOninit(Rendition.InitEventArgs)">
            <summary>
            Raises the oninit event.
            </summary>
            <param name="args">The <see cref="T:Rendition.InitEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.Site.PreventDefault">
            <summary>
            Prevents the default event from occuring.
            </summary>
        </member>
        <member name="F:Rendition.Site.AbortDefaultEvent">
            <summary>
            When set true, default events will not occur in the current event handler.
            </summary>
        </member>
        <member name="E:Rendition.Site.Rendition#ISiteInterface#ShipmentUpdated">
            <summary>
            Occurs when a shipment is updated (addressUpdate table gets new row with 'emailSent is null').
            </summary>
        </member>
        <member name="E:Rendition.Site.Rendition#ISiteInterface#OpeningPaymentGateway">
            <summary>
            Occurs when a credit card is charged.
            </summary>
        </member>
        <member name="E:Rendition.Site.Rendition#ISiteInterface#CalculatingDiscount">
            <summary>
            Occurs when the discount is recalculated.
            </summary>
        </member>
        <member name="E:Rendition.Site.Rendition#ISiteInterface#CreatingEmail">
            <summary>
            Occurs when an email is created.
            </summary>
        </member>
        <member name="E:Rendition.Site.Rendition#ISiteInterface#RenderingItemImage">
            <summary>
            Occurs when before an image is rendered.
            </summary>
        </member>
        <member name="E:Rendition.Site.Rendition#ISiteInterface#RenderedItemImage">
            <summary>
            Occurs when an image is rendered.
            </summary>
        </member>
        <member name="E:Rendition.Site.Rendition#ISiteInterface#CreatingItem">
            <summary>
            Occurs when an item is created.
            </summary>
        </member>
        <member name="E:Rendition.Site.Rendition#ISiteInterface#StatusChanged">
            <summary>
            Occurs when a status changes.
            </summary>
        </member>
        <member name="E:Rendition.Site.Rendition#ISiteInterface#RecalculatedOrder">
            <summary>
            Occurs when an order is recalculated.
            </summary>
        </member>
        <member name="E:Rendition.Site.Rendition#ISiteInterface#RecalculatedCart">
            <summary>
            Occurs when a cart/quote is recalculated.
            </summary>
        </member>
        <member name="E:Rendition.Site.Rendition#ISiteInterface#PlacingOrder">
            <summary>
            Occurs just before an order is placed.
            </summary>
        </member>
        <member name="E:Rendition.Site.Rendition#ISiteInterface#PlacedOrder">
            <summary>
            Occurs after an order is placed.
            </summary>
        </member>
        <member name="E:Rendition.Site.Rendition#ISiteInterface#LoggedOff">
            <summary>
            Occurs when a user logs on.
            </summary>
        </member>
        <member name="E:Rendition.Site.Rendition#ISiteInterface#LoggedOn">
            <summary>
            Occurs when a user logs off.
            </summary>
        </member>
        <member name="E:Rendition.Site.Rendition#ISiteInterface#CreatingUser">
            <summary>
            Occurs when a user is created.
            </summary>
        </member>
        <member name="E:Rendition.Site.Rendition#ISiteInterface#AddedToCart">
            <summary>
            Occurs when an item is added to the cart.
            </summary>
        </member>
        <member name="E:Rendition.Site.Rendition#ISiteInterface#AddingToCart">
            <summary>
            Occurs just before an item is added to the cart.
            </summary>
        </member>
        <member name="E:Rendition.Site.Rendition#ISiteInterface#EndRequest">
            <summary>
            Occurs when a request ends.
            </summary>
        </member>
        <member name="E:Rendition.Site.Rendition#ISiteInterface#BeginRequest">
            <summary>
            Occurs when a request begins.
            </summary>
        </member>
        <member name="E:Rendition.Site.Rendition#ISiteInterface#Disposing">
            <summary>
            Occurs when the site is shutting down.
            </summary>
        </member>
        <member name="E:Rendition.Site.Rendition#ISiteInterface#Initializing">
            <summary>
            Occurs when the site starts.
            </summary>
        </member>
        <member name="E:Rendition.Site.Rendition#ISiteInterface#UIInitializing">
            <summary>
            Occurs when a users starts the JavaScript user interface.
            </summary>
        </member>
        <member name="E:Rendition.Site.Rendition#ISiteInterface#LineUpdated">
            <summary>
            Occurs when a line item is updated in an order.
            </summary>
        </member>
        <member name="E:Rendition.Site.UIInitializing">
            <summary>
            Occurs when a users starts the JavaScript user interface.
            </summary>
        </member>
        <member name="E:Rendition.Site.ShipmentUpdated">
            <summary>
            Occurs when a shipment is updated (addressUpdate table gets new row with 'emailSent is null').
            </summary>
        </member>
        <member name="E:Rendition.Site.OpeningPaymentGateway">
            <summary>
            Occurs when a credit card is charged.
            </summary>
        </member>
        <member name="E:Rendition.Site.CalculatingDiscount">
            <summary>
            Occurs when the discount is recalculated.
            </summary>
        </member>
        <member name="E:Rendition.Site.CreatingEmail">
            <summary>
            Occurs when an email is created.
            </summary>
        </member>
        <member name="E:Rendition.Site.StatusChanged">
            <summary>
            Occurs when a status changes.
            </summary>
        </member>
        <member name="E:Rendition.Site.StatusChanging">
            <summary>
            Occurs before a status changes.
            </summary>
        </member>
        <member name="E:Rendition.Site.CreatingItem">
            <summary>
            Occurs when an item is created.
            </summary>
        </member>
        <member name="E:Rendition.Site.RenderedItemImage">
            <summary>
            Occurs when an image is rendered.
            </summary>
        </member>
        <member name="E:Rendition.Site.RenderingItemImage">
            <summary>
            Occurs when before an image is rendered.
            </summary>
        </member>
        <member name="E:Rendition.Site.Initializing">
            <summary>
            Occurs when the site starts.
            </summary>
        </member>
        <member name="E:Rendition.Site.Disposing">
            <summary>
            Occurs when the site is shutting down.
            </summary>
        </member>
        <member name="E:Rendition.Site.BeginRequest">
            <summary>
            Occurs when a request begins.
            </summary>
        </member>
        <member name="E:Rendition.Site.EndRequest">
            <summary>
            Occurs when a request ends.
            </summary>
        </member>
        <member name="E:Rendition.Site.RecalculatedOrder">
            <summary>
            Occurs when an order is recalculated.
            </summary>
        </member>
        <member name="E:Rendition.Site.RecalculatedCart">
            <summary>
            Occurs when a cart/quote is recalculated.
            </summary>
        </member>
        <member name="E:Rendition.Site.PlacingOrder">
            <summary>
            Occurs just before an order is placed.
            </summary>
        </member>
        <member name="E:Rendition.Site.PlacedOrder">
            <summary>
            Occurs after an order is placed.
            </summary>
        </member>
        <member name="E:Rendition.Site.LoggedOn">
            <summary>
            Occurs when a user logs on.
            </summary>
        </member>
        <member name="E:Rendition.Site.LoggedOff">
            <summary>
            Occurs when a user logs off.
            </summary>
        </member>
        <member name="E:Rendition.Site.CreatingUser">
            <summary>
            Occurs when a user is created.
            </summary>
        </member>
        <member name="E:Rendition.Site.AddedToCart">
            <summary>
            Occurs when an item is added to the cart.
            </summary>
        </member>
        <member name="E:Rendition.Site.AddingToCart">
            <summary>
            Occurs just before an item is added to the cart.
            </summary>
        </member>
        <member name="E:Rendition.Site.LineUpdated">
            <summary>
            Occurs when a line item is updated in an order.
            </summary>
        </member>
        <member name="T:Rendition.Site.Session">
            <summary>
            This class represents a session on the site
            the sessions cart and if the session logs on the user object.
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.Id">
            <summary>
            Session id.
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.Wholesale">
            <summary>
            If set true the user should get wholesale pricing.
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.ListView">
            <summary>
            List view mode for this session.
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.ListOrder">
            <summary>
            List view order for this session.
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.UserLevel">
            <summary>
            User level of this session.
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.RecordsPerPage">
            <summary>
            List records per page for this session.
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.context">
            <summary>
            Conext page for this session (not implemented).
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.ShippingRate">
            <summary>
            Default shipping rate for this session.
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.Zip">
            <summary>
            Zip code for quick shipment calculations.
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.Email">
            <summary>
            Email Address of this session.
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.AllowPreorders">
            <summary>
            Allow this session to place preorders.
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.AdminScript">
            <summary>
            The Admin script that runs when this session visits the Admin page.
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.LogonRedirect">
            <summary>
            The page to redirect to when this session logs on.
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.UserId">
            <summary>
            The user id of the logged on session (-1 if not logged on).
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.LoggedOn">
            <summary>
            Is this session logged on?
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.Administrator">
            <summary>
            Is this session an administrator?
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.Url">
            <summary>
            This session's URL.
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.Host">
            <summary>
            The host name of this session.
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.Path">
            <summary>
            The path of this session.
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.Ip">
            <summary>
            This session's IP Address.
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.UserAgent">
            <summary>
            This session's user agent.
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.Referer">
            <summary>
            This session's referer.
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.UIJson">
            <summary>
            UI_JSON to run when this session visits the agmin page.
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.Cart">
            <summary>
            This session's cart.
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.User">
            <summary>
            This session's user.
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.SiteDefaults">
            <summary>
            The defaults for this session's site.
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.Site">
            <summary>
            This session's site.
            </summary>
        </member>
        <member name="F:Rendition.Site.Session.Properties">
            <summary>
            This session's Properties.
            </summary>
        </member>
        <member name="M:Rendition.Site.Session.GetContactById(System.Guid)">
            <summary>
            Gets the contact by contact id.
            </summary>
            <param name="contactId">The contact id.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Site.Session.#ctor(Rendition.Site,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Site.Session"/> class.
            </summary>
            <param name="_site">The _site.</param>
            <param name="cn">The cn.</param>
            <param name="trns">The TRNS.</param>
        </member>
        <member name="M:Rendition.Site.Session.#ctor(Rendition.Site,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Site.Session"/> class.
            </summary>
            <param name="_site">The _site.</param>
            <param name="sessionId">The session id.</param>
        </member>
        <member name="M:Rendition.Site.Session.#ctor(Rendition.Site,System.Guid,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Site.Session"/> class.
            </summary>
            <param name="_site">The _site.</param>
            <param name="sessionId">The session id.</param>
            <param name="cn">The cn.</param>
            <param name="trns">The TRNS.</param>
        </member>
        <member name="M:Rendition.Site.Session.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Site.Session"/> class.
            </summary>
            <param name="_site">The _site.</param>
        </member>
        <member name="M:Rendition.Site.Session.LogOff">
            <summary>
            Logs off the user to this session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rendition.Site.Session.LogOn(System.Int32,System.String)">
            <summary>
            Logs on the specified user to this session.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Site.Session.LogOn(System.String,System.String)">
            <summary>
            Logs on the specified user to this session.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Site.Session.UpdateProperty(System.String,System.String)">
            <summary>
            Updates a property.
            </summary>
            <param name="keyName">Name of the key.</param>
            <param name="keyValue">The key value.</param>
        </member>
        <member name="M:Rendition.Site.Session.GetPropertyOrBlank(System.String)">
            <summary>
            Gets a property or blank (instead of null).
            </summary>
            <param name="keyName">Name of the key.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Site.Session.GetProperty(System.String)">
            <summary>
            Gets a property.
            </summary>
            <param name="keyName">Name of the key.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Site.Session.AddProperty(System.String,System.Object)">
            <summary>
            Adds a property.
            </summary>
            <param name="keyName">Name of the key.</param>
            <param name="keyValue">The key value.</param>
        </member>
        <member name="M:Rendition.Site.Session.AddProperty(System.String,System.Object,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Adds a property.
            </summary>
            <param name="keyName">Name of the key.</param>
            <param name="keyValue">The key value.</param>
            <param name="cn">The cn.</param>
            <param name="trans">The trans.</param>
        </member>
        <member name="M:Rendition.Site.Session.RemoveProperty(System.String)">
            <summary>
            Removes a property.
            </summary>
            <param name="keyName">Name of the key.</param>
        </member>
        <member name="M:Rendition.Site.Session.RemoveProperty(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Removes a property.
            </summary>
            <param name="keyName">Name of the key.</param>
            <param name="cn">The cn.</param>
            <param name="trans">The trans.</param>
        </member>
        <member name="M:Rendition.Site.Session.getServerStateInfo">
            <summary>
            Gets the client state info.
            </summary>
        </member>
        <member name="M:Rendition.Site.Session.CreateNewSession(System.Boolean)">
            <summary>
            Creates the new session.
            </summary>
            <param name="makeCookie">if set to <c>true</c> [make cookie].</param>
        </member>
        <member name="M:Rendition.Site.Session.CreateNewSession(System.Boolean,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Creates the new session.
            </summary>
            <param name="makeCookie">if set to <c>true</c> [make cookie].</param>
            <param name="cn">The cn.</param>
            <param name="trns">The TRNS.</param>
        </member>
        <member name="M:Rendition.Site.Session.RemoveDatabaseEntry">
            <summary>
            Removes the database entry for this session.
            </summary>
        </member>
        <member name="M:Rendition.Site.Session.RemoveDatabaseEntry(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Removes the database entry for this session using the selected connection and transaction.
            </summary>
            <param name="cn">SQL connection.</param>
            <param name="trns">SQL transaction.</param>
        </member>
        <member name="M:Rendition.Site.Session.Refresh">
            <summary>
            Refreshes this session.
            </summary>
        </member>
        <member name="M:Rendition.Site.Session.Refresh(System.Boolean)">
            <summary>
            Updates the _session object from the database
            </summary>
        </member>
        <member name="M:Rendition.Site.Session.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rendition.Site.Session.Refresh(System.Boolean,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Updates the _session object from the database
            </summary>
        </member>
        <member name="P:Rendition.Site.Session.ShipToAddress">
            <summary>
            Gets the first ship to Address for this session.
            </summary>
            <value>
            The ship to Address.
            </value>
        </member>
        <member name="P:Rendition.Site.Session.ShipToAddresses">
            <summary>
            Gets the ship to addresses for this session.
            </summary>
        </member>
        <member name="P:Rendition.Site.Session.BillToAddress">
            <summary>
            Gets the bill to Address for this session.
            The bill to Address is always a contact that matches the sessionId
            </summary>
        </member>
        <member name="T:Rendition.Site.SiteConfiguration">
            <summary>
            Variables for the site usually drawn from web.config or config.xml.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteConfiguration.SqlHost">
            <summary>
            Database server host name or IP Address.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteConfiguration.SqlDatabase">
            <summary>
            Database name
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteConfiguration.SqlUser">
            <summary>
            Database user
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteConfiguration.SqlPassword">
            <summary>
            Database password
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteConfiguration.ElevatedSecurityUser">
            <summary>
            Impersonation user.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteConfiguration.ElevatedSecurityPassword">
            <summary>
            Impersonation password.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteConfiguration.ElevatedSecurityDomain">
            <summary>
            Impersonation domain.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteConfiguration.UniqueSiteId">
            <summary>
            The unique id of this site.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteConfiguration.FileSystemAccess">
            <summary>
            The Admin file browser will allow access to all or some files by default.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteConfiguration.CanUseSSL">
            <summary>
            When true, internal URLs and redirectors will try to use the HTTPS protocol.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteConfiguration.LogVerbosity">
            <summary>
            The verboisty of the log.  Higher number yield more information.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteConfiguration.TelnetServerPort">
            <summary>
            The port number of the telnet live log viewing server
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteConfiguration.AdminDirectory">
            <summary>
            The directory the Admin program will appear at.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteConfiguration.PluginDirectory">
            <summary>
            The directory that will be searched for plugins.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteConfiguration.ImageDirectory">
            <summary>
            The directory the images will reside in.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteConfiguration.TempDirectory">
            <summary>
            The directory used for temporary file. Compiled site section templates and image renderings.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteConfiguration.UserDirectory">
            <summary>
            The directory user files will be placed by default.  
            A directory of the user's ID will be made within this directory.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteConfiguration.Responder">
            <summary>
            The responder URL the site will listen for
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteConfiguration.AdminResponder">
            <summary>
            The responder URL the site will listen for for Admin requests.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteConfiguration.Bitness">
            <summary>
            Which bitness the site should try and use
            </summary>
        </member>
        <member name="T:Rendition.Site.SiteDefaults">
            <summary>
            The defaults for the site as defined in dbo.siteConfiguration.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.MetaKeywords">
            <summary>
            Meta keywords for the site.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.MetaDescription">
            <summary>
            Meta description of the site.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.PageTitle">
            <summary>
            Page title of the site.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.AccessDeniedPage">
            <summary>
            Default access denied page.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.EmptyCartPage">
            <summary>
            Default empty cart page.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.FormDirectory">
            <summary>
            Default form directory.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.IntrestPage">
            <summary>
            Default page of intrest.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.ListMode">
            <summary>
            Default list mode.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.AllowPreorders">
            <summary>
            Default for new accounts to allow preorders.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.OrderBy">
            <summary>
            Default list order by mode.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.RateId">
            <summary>
            Default shipping rate id.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.RecordsPerPage">
            <summary>
            Default records per page.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.SearchText">
            <summary>
            Default search text in the search field.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.SiteUrl">
            <summary>
            The site URL.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.Address1">
            <summary>
            Address line 1.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.Address2">
            <summary>
            Address line 2.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.City">
            <summary>
            City.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.State">
            <summary>
            State.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.Zip">
            <summary>
            Zip.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.Country">
            <summary>
            Country.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.Email">
            <summary>
            Email.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.Fax">
            <summary>
            Fax.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.Phone">
            <summary>
            Phone.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.MetaExpires">
            <summary>
            Days until the page expires in the meta tag.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.SiteName">
            <summary>
            Friendly site name.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.LocalCountry">
            <summary>
            Local Country.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.ScannedImagePath">
            <summary>
            Path to the scanned image folder.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.Error500page">
            <summary>
            Default error 500 page.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.Error404page">
            <summary>
            Default error 404 page.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.SiteId">
            <summary>
            Unique Site Id.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.UseSsl">
            <summary>
            Use SSL.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.CareOf">
            <summary>
            Care of.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.TestMode">
            <summary>
            Test mode.
            </summary>
        </member>
        <member name="F:Rendition.Site.SiteDefaults.PlaceOrderRedirect">
            <summary>
            Place order redirect.
            </summary>
        </member>
        <member name="M:Rendition.Site.SiteDefaults.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Site.SiteDefaults"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="M:BarcodeLib.Symbologies.EAN8.Encode_EAN8">
            <summary>
            Encode the raw data using the EAN-8 algorithm.
            </summary>
        </member>
        <member name="T:Rendition.DefaultEmails">
            <summary>
            Default emails
            </summary>
        </member>
        <member name="M:Rendition.DefaultEmails.EmailAFriend(Rendition.CreateEmailEventArgs@)">
            <summary>
            Emails the A friend.
            </summary>
            <param name="args">The <see cref="T:Rendition.CreateEmailEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.DefaultEmails.LostPassword(Rendition.CreateEmailEventArgs@)">
            <summary>
            Helps a user reset their password.
            </summary>
            <param name="args">The <see cref="T:Rendition.CreateEmailEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.DefaultEmails.OrderConfirm(Rendition.CreateEmailEventArgs@)">
            <summary>
            Confirms the user's order
            </summary>
            <param name="args">The <see cref="T:Rendition.CreateEmailEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.DefaultEmails.ShipConfirm(Rendition.CreateEmailEventArgs@)">
            <summary>
            Confirms the user's shipment
            </summary>
            <param name="args">The <see cref="T:Rendition.CreateEmailEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.DefaultEmails.StockAlert(Rendition.CreateEmailEventArgs@)">
            <summary>
            Alerts an operator to a stock level probelm
            </summary>
            <param name="args">The <see cref="T:Rendition.CreateEmailEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rendition.DefaultEmails.CommentAdded(Rendition.CreateEmailEventArgs@)">
            <summary>
            Reports new comments to items, Blogs, replies and more.
            </summary>
            <param name="args">The <see cref="T:Rendition.CreateEmailEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:BarcodeLib.Symbologies.Codabar.Encode_Codabar">
            <summary>
            Encode the raw data using the Codabar algorithm.
            </summary>
        </member>
        <member name="T:Rendition.Utilities">
            <summary>
            Utitlites and extentions for standard objects.
            </summary>
        </member>
        <member name="F:Rendition.Utilities.GuidPattern">
            <summary>
            GUID Pattern
            </summary>
        </member>
        <member name="M:Rendition.Utilities.IsGuid(System.String)">
            <summary>
            Determines whether the specified string is a GUID.
            </summary>
            <returns>
            	<c>true</c> if the specified string is a GUID; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rendition.Utilities.Iif(System.Boolean,System.Object,System.Object)">
            <summary>
            IIF
            </summary>
            <param name="condition">if set to <c>true</c> it will return the true result, otherwise the false.</param>
            <param name="trueResult">The true result.</param>
            <param name="falseResult">The false result.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.EncodeXMLId(System.Guid)">
            <summary>
            Encodes a string representation of the Guid prefixed with the letter "d". 
            For use in xHTML id fields where {,} and beginging id's with digits are illegal.
            </summary>
            <returns>An xHTML Id safe string.</returns>
        </member>
        <member name="M:Rendition.Utilities.DecodeXMLId(System.String)">
            <summary>
            Decodes a Guid that has been encoded with the encodeXMLId method.
            </summary>
            <returns>Guid from the encoded string.</returns>
        </member>
        <member name="M:Rendition.Utilities.ToJson(System.String)">
            <summary>
            Encodes a string for safe output into JSON
            </summary>
            <returns>JSON Encoded string.</returns>
        </member>
        <member name="M:Rendition.Utilities.MaxLength(System.String,System.Int32)">
            <summary>
            Escapes string for safe usage in HTML using Server.HtmlEncode
            </summary>
            <param name="e">Input string</param>
            <param name="max">Max length string is allowed to be</param>
            <returns>Returns the escaped string.</returns>
        </member>
        <member name="M:Rendition.Utilities.MaxLength(System.String,System.Int32,System.Boolean)">
            <summary>
            Escapes string for safe usage in HTML using Server.HtmlEncode
            </summary>
            <param name="e">Input string</param>
            <param name="max">Max length string is allowed to be</param>
            <param name="trim">Trim the string too</param>
            <returns>Returns the escaped string.</returns>
        </member>
        <member name="M:Rendition.Utilities.MaxLength(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Escapes string for safe usage in HTML using Server.HtmlEncode
            </summary>
            <param name="e">Input string</param>
            <param name="max">Max length string is allowed to be</param>
            <param name="trim">if set to <c>true</c> [trim].</param>
            <param name="toLower">if set to <c>true</c> [to lower].</param>
            <returns>Returns the escaped string.</returns>
        </member>
        <member name="M:Rendition.Utilities.h(System.String)">
            <summary>
            Escapes string for safe usage in HTML using Server.HtmlEncode
            </summary>
            <returns>Returns the escaped string.</returns>
        </member>
        <member name="M:Rendition.Utilities.s(System.String)">
            <summary>
            Escapes string for safe usage in a SQL query by replacing ' with ''
            </summary>
            <returns>Returns the escaped string.</returns>
        </member>
        <member name="M:Rendition.Utilities.l(System.String)">
            <summary>
            Trims and lowers the case of a string.
            Good for comparing strings that may have extra spaces or disimilar cases.
            </summary>
            <returns>The trimmed lower case version of the string.</returns>
        </member>
        <member name="M:Rendition.Utilities.UrlEncode(System.String)">
            <summary>
            HttpUtility.UrlEncode
            </summary>
            <returns>URL encoded string.</returns>
        </member>
        <member name="M:Rendition.Utilities.HtmlEncode(System.String)">
            <summary>
            HttpUtility.HtmlEncode
            </summary>
            <returns>HTML encoded string.</returns>
        </member>
        <member name="M:Rendition.Utilities.UriPad(System.String)">
            <summary>
            returns the string +? if the string does contain a ? or string+&amp; if the string does contain a ?.
            </summary>
            <returns>string with URI pad added</returns>
        </member>
        <member name="M:Rendition.Utilities.RemoveLast(System.Text.StringBuilder,System.Int32)">
            <summary>
            Removes the last X number of characters from the end of a StringBuilder string
            </summary>
            <param name="s">Input StringBuilder</param>
            <param name="characters">Number of characters to remove from the end</param>
            <returns>void</returns>
        </member>
        <member name="M:Rendition.Utilities.RemoveLast(System.String,System.Int32)">
            <summary>
            Removes the last X number of characters from the end of a string
            </summary>
            <param name="s">Input string</param>
            <param name="characters">Number of characters to remove from the end</param>
            <returns>void</returns>
        </member>
        <member name="M:Rendition.Utilities.ToCsv(System.String)">
            <summary>
            Makes the string CSV file safe by adding double qutoes around strings with spaces,cr or lf.
            </summary>
            <param name="v">Input string</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.GetJsonArray(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Gets the JSON array.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.GetJsonArray(System.Data.SqlClient.SqlDataReader,System.Boolean)">
            <summary>
            returns a JSON array string from the SqlDataReader containing ONLY the raw record set.
            </summary>
            <param name="d">The SQL data reader</param>
            <param name="closeConnection">Once the readers is complete, the reader is closed.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.GetJsonCollection(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Returns the SqlDataReader as a JSON object with extened information about each row and column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.ToSqlDbType(System.Type)">
            <summary>
            Converts a generic system type to a SqlDbType.
            </summary>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.FindFirst(System.IO.MemoryStream,System.Byte[],System.Int64)">
            <summary>
            Finds the first occurance of the byte array [binarySearchArray] in the MemoryStream starting from [startSearchFrom].
            </summary>
            <param name="ms">Input memory stream</param>
            <param name="binarySearchArray">The binary search array.</param>
            <param name="startSearchFrom">Start search from.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.MoveBackwardsUntil(System.IO.MemoryStream,System.Byte[])">
            <summary>
            Moves the MemoryStream backwards until the byte array [binarySearchArray] is found, then returns the location of the byte array.
            </summary>
            <param name="ms">Input memory stream</param>
            <param name="binarySearchArray">The binary search array.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.MoveForwardUntil(System.IO.MemoryStream,System.Byte[])">
            <summary>
            Moves the MemoryStream forward until the byte array [binarySearchArray] is found, then returns the location of the byte array.
            </summary>
            <param name="ms">Input memory stream</param>
            <param name="binarySearchArray">The binary search array.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.MoveUntil(System.IO.MemoryStream,System.Byte[],System.Boolean)">
            <summary>
            Moves the MemoryStream position forwards until it encouters [binarySearchArray], then it returns the position of that byte array.
            [direction] sets forwards or backwards.
            </summary>
            <param name="ms">Input memory stream</param>
            <param name="binarySearchArray">The binary search array.</param>
            <param name="direction">if set to <c>true</c> [direction].</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.Find(System.IO.MemoryStream,System.Byte[],System.Int64)">
            <summary>
            Finds every instance of the byte array [binarySearchArray] in the MemoryStream, then returns a List of longs of their locations.
            </summary>
            <param name="ms">Input memory stream</param>
            <param name="binarySearchArray">The binary search array.</param>
            <param name="startSearchFrom">The start search from.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.FindFirst(System.IO.FileStream,System.Byte[],System.Int64)">
            <summary>
            Finds the first occurance of the byte array [binarySearchArray] in the FileStream starting from [startSearchFrom].
            </summary>
            <param name="fs">Input FileStream</param>
            <param name="binarySearchArray">The binary search array.</param>
            <param name="startSearchFrom">Start search from.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.MoveBackwardsUntil(System.IO.FileStream,System.Byte[])">
            <summary>
            Moves the FileStream backwards until the byte array [binarySearchArray] is found, then returns the location of the byte array.
            </summary>
            <param name="fs">Input FileStream</param>
            <param name="binarySearchArray">The binary search array.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.MoveForwardUntil(System.IO.FileStream,System.Byte[])">
            <summary>
            Moves the FileStream forward until the byte array [binarySearchArray] is found, then returns the location of the byte array.
            </summary>
            <param name="fs">Input FileStream</param>
            <param name="binarySearchArray">The binary search array.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.MoveUntil(System.IO.FileStream,System.Byte[],System.Boolean)">
            <summary>
            Moves the FileStream position forwards until it encouters [binarySearchArray], then it returns the position of that byte array.
            [direction] sets forwards or backwards.
            </summary>
            <param name="fs">The FileStream</param>
            <param name="binarySearchArray">The binary search array.</param>
            <param name="direction">if set to <c>true</c> the stream searches forwards.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.Find(System.IO.FileStream,System.Byte[],System.Int64)">
            <summary>
            Finds every occurace of [binarySearchArray] in the FileStream and returns the locations as a List of longs.
            This function only searches forwards from the starting position.
            </summary>
            <param name="fs">The FileStream</param>
            <param name="binarySearchArray">The byte array to search for.</param>
            <param name="startSearchFrom">What position to start searching from.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.ToSeconds(System.DateTime)">
            <summary>
            Turns a date into Unix Epoch time (usualy for output into JSON).
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.ToJson(System.Object)">
            <summary>
            Turns almost anything into a JSON string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.JTokenToGeneric(System.Object)">
            <summary>
            Turns JSON arrays and JSON objects into Lists and Dictionaries.
            </summary>
            <param name="jobject">The jobject.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.HasColumn(System.Data.SqlClient.SqlDataReader,System.String)">
            <summary>
            Check if the specified column exists in the data set.
            </summary>
            <param name="r">The r.</param>
            <param name="columnName">Name of the column.</param>
            <returns>
            	<c>true</c> if the specified r has column; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rendition.Utilities.KeyOrDefault(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Object,System.Boolean)">
            <summary>
            If the key is present in the dictionary the key's value will be returned
            else the argument defaultValue will be returned
            or if the third argument is null then a missing key will result in a null value.
            </summary>
            <param name="d">The input Dictionary</param>
            <param name="keyName">Name of the key.</param>
            <param name="defaultValue">The default value.</param>
            <param name="defaultValueOrNull">if set to <c>true</c> [default value or null].</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.KeyOrDefault(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Object)">
            <summary>
            If the key is present in the dictionary the key's value will be returned
            else the argument defaultValue will be returned.
            </summary>
            <param name="d">Input Dictionary</param>
            <param name="keyName">Name of the key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.VirtualToPhysicalSitePath(System.String)">
            <summary>
            Turns a virtual path starting with ~ into a physical path on the server.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.w(System.Object)">
            <summary>
            Wrapper for HttpContext.Current.Response.Write.
            Writes a line to the current HTTP client.
            </summary>
            <param name="stringToWrite">The string to write.</param>
        </member>
        <member name="M:Rendition.Utilities.w(System.Object,System.Boolean)">
            <summary>
            Wrapper for HttpContext.Current.Response.Write.
            Writes a line to the current HTTP client.
            And optionaly flushes the response buffer to the HTTP client.
            </summary>
            <param name="stringToWrite">The string to write.</param>
            <param name="flush">if set to <c>true</c> [flush].</param>
        </member>
        <member name="M:Rendition.Utilities.RandomNumber(System.Int32,System.Int32)">
            <summary>
            Creates a randoms the number.
            </summary>
            <param name="min">Minimum number to generate.</param>
            <param name="max">Maximum number to generate.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.RandomString(System.Int32,System.Boolean)">
            <summary>
            Generates a random string with the given length
            </summary>
            <param name="size">Size of the string</param>
            <param name="lowerCase">If true, generate lowercase string</param>
            <returns>Random string</returns>
        </member>
        <member name="M:Rendition.Utilities.ToFileName(System.Guid)">
            <summary>
            Creates a file name without extention based on a base64 Guid (but _not_ convertable back into a GUID).
            </summary>
            <param name="o">The Guid you want to turn into a file name.</param>
            <returns>File name safe Guid value.</returns>
        </member>
        <member name="M:Rendition.Utilities.ToBase64DomId(System.Guid)">
            <summary>
            Creates a unique hash value from a Guid.
            </summary>
            <param name="o">The Guid you want to turn into a hash value.</param>
            <returns>Base64 representation of the Guid</returns>
        </member>
        <member name="M:Rendition.Utilities.ToBase64Hash(System.Guid)">
            <summary>
            Creates a unique hash value from a Guid.
            </summary>
            <param name="o">The Guid you want to turn into a hash value.</param>
            <returns>Base64 representation of the Guid</returns>
        </member>
        <member name="M:Rendition.Utilities.GetEncoderInfo(System.String)">
            <summary>
            Gets the encoder info for a particualr mimeType.
            </summary>
            <param name="mimeType">Type of the MIME.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.SaveJpg(System.Drawing.Bitmap,System.String,System.Int64)">
            <summary>
            Saves the Bitmap as a JPG with options.
            </summary>
            <param name="path">The path.</param>
            <param name="b">The b.</param>
            <param name="quality">The quality.</param>
        </member>
        <member name="M:Rendition.Utilities.Debug(System.Object,System.Int32,System.Boolean)">
            <summary>
            Sends the object as a string to the debugging console (output,debug.log).
            </summary>
            <param name="o">The Object</param>
            <param name="verbosity">The verbosity.</param>
            <param name="supressDate">if set to <c>true</c> [supress date].</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.ConvertBase53(System.String)">
            <summary>
            Converts a string to a base 53 number (0-9, A-Z, a-z).
            Limited to the size of the int class.
            </summary>
            <param name="base53number">The base53number.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Utilities.Debug(System.Object,System.Int32)">
            <summary>
            Sends information to the output.
            </summary>
            <param name="o">The object to turn into a string and display on the console.</param>
            <param name="verbosity">Verbosity level 1-10. 1 = quiet time. 10 = the truth shall set you free.</param>
            <returns>The object passed.</returns>
        </member>
        <member name="M:Rendition.Utilities.GetActiveConnectionWhenNull(System.Data.SqlClient.SqlConnection)">
            <summary>
            Creates a connection when the connection passed is null.
            </summary>
            <param name="cn1">The CN1.</param>
            <returns>Working SQL connection.</returns>
        </member>
        <member name="T:Rendition.Impersonation">
            <summary>
            Impersonates another user briefly
            </summary>
        </member>
        <member name="M:Rendition.Impersonation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.Impersonation"/> class.
            </summary>
        </member>
        <member name="M:Rendition.Impersonation.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Rendition.SafeTokenHandle">
            <summary>
            Used by the Impersonation class
            </summary>
        </member>
        <member name="T:Rendition.Calendar">
            <summary>
            Creates a Calendar in HTML.
            </summary>
        </member>
        <member name="M:Rendition.Calendar.GetCalendarRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a range of getCalendar()s starting with today and offset by the first two arguments.
            to start from this month and this year the first two arguments should be 0,0
            Display mode can be set to 0 or 1.  0 = tiny display, 1 = normal display.
            The styling of the Calendar is totally controled from CSS classes:
            Calendar, monthDay, offMonthDay.  Calendar contains the table, monthDay is a single TD (day),
            offMonthDay is a single TD and occurs on days that are not in the month (the grey cells).
            Days with events will have a A rather than a SPAN and include an addtional SPAN with the count
            of events on the day.  
            The link always contains onclick=javascript:calendarEntries(this,[['id','subject','date'],['id','subject','date']...]);
            Basic structure 
            [div][table][tr][th]head
            [tr][td]([span]date||[a]date[span]count)
            </summary>
            <param name="offsetYear">The offset year. 0 = today</param>
            <param name="offsetMonth">The offset month. 0 = today</param>
            <param name="monthsToDisplay">Number of months to display. 1 = show one month only, 3 = show three months.</param>
            <param name="displayMode">Display mode. 0 = small, 1 = large</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Calendar.GetCalendar(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the Calendar.
            </summary>
            <param name="month">Month.</param>
            <param name="year">Year.</param>
            <param name="displayMode">Display mode. 0 = small, 1 = large.</param>
            <returns></returns>
        </member>
        <member name="T:Rendition.SiteImagePlaceholder">
            <summary>
            This class represents the differnet types of images that can be placed on any given item.
            </summary>
        </member>
        <member name="F:Rendition.SiteImagePlaceholder.ImageTypes">
            <summary>
            Types of images.
            </summary>
        </member>
        <member name="F:Rendition.SiteImagePlaceholder.SiteId">
            <summary>
            Site id for this image set.
            </summary>
        </member>
        <member name="F:Rendition.SiteImagePlaceholder.M">
            <summary>
            Main.
            </summary>
        </member>
        <member name="F:Rendition.SiteImagePlaceholder.C">
            <summary>
            Cart.
            </summary>
        </member>
        <member name="F:Rendition.SiteImagePlaceholder.F">
            <summary>
            Form.
            </summary>
        </member>
        <member name="F:Rendition.SiteImagePlaceholder.T">
            <summary>
            Tiny.
            </summary>
        </member>
        <member name="F:Rendition.SiteImagePlaceholder.A">
            <summary>
            Aux a.
            </summary>
        </member>
        <member name="F:Rendition.SiteImagePlaceholder.X">
            <summary>
            Aux x.
            </summary>
        </member>
        <member name="F:Rendition.SiteImagePlaceholder.Y">
            <summary>
            Aux y.
            </summary>
        </member>
        <member name="F:Rendition.SiteImagePlaceholder.Z">
            <summary>
            Aux z.
            </summary>
        </member>
        <member name="F:Rendition.SiteImagePlaceholder.B">
            <summary>
            Aux b.
            </summary>
        </member>
        <member name="F:Rendition.SiteImagePlaceholder.D">
            <summary>
            Detail Image.
            </summary>
        </member>
        <member name="F:Rendition.SiteImagePlaceholder.SiteAddress">
            <summary>
            The Address of the site.
            </summary>
        </member>
        <member name="M:Rendition.SiteImagePlaceholder.#ctor(System.Guid,System.Guid,System.Guid,System.Guid,System.Guid,System.Guid,System.Guid,System.Guid,System.Guid,System.Guid,System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.SiteImagePlaceholder"/> class.
            </summary>
            <param name="siteId">The site id.</param>
            <param name="m">The m.</param>
            <param name="c">The c.</param>
            <param name="f">The f.</param>
            <param name="t">The t.</param>
            <param name="a">A.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <param name="b">The b.</param>
            <param name="d">The d.</param>
            <param name="siteAddress">The site Address.</param>
        </member>
        <member name="T:Rendition.siteImagePlaceholders">
            <summary>
            A list of site image placeholders.
            </summary>
        </member>
        <member name="F:Rendition.siteImagePlaceholders.List">
            <summary>
            The list of site image placeholders.
            </summary>
        </member>
        <member name="M:Rendition.siteImagePlaceholders.#ctor(Rendition.Site)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.siteImagePlaceholders"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="T:Rendition.StateObject">
            <summary>
            State object for reading client data asynchronously
            </summary>
        </member>
        <member name="F:Rendition.StateObject.BufferSize">
            <summary>
            Size of receive buffer.
            </summary>
        </member>
        <member name="F:Rendition.StateObject.WorkSocket">
            <summary>
            Client  socket.
            </summary>
        </member>
        <member name="F:Rendition.StateObject.Buffer">
            <summary>
            Receive buffer.
            </summary>
        </member>
        <member name="F:Rendition.StateObject.StringBuilder">
            <summary>
            Received data string.
            </summary>
        </member>
        <member name="T:Rendition.TelnetServer">
            <summary>
            Telnet server - used to output log files to.
            </summary>
        </member>
        <member name="F:Rendition.TelnetServer.Started">
            <summary>
            When the server has started and is listening for connections, this value will be true.
            </summary>
        </member>
        <member name="F:Rendition.TelnetServer.AllDone">
            <summary>
            Thread signal.
            </summary>
        </member>
        <member name="M:Rendition.TelnetServer.WriteToAllClients(System.String)">
            <summary>
            Writes to all telnet clients.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Rendition.TelnetServer.Shutdown">
            <summary>
            Shutdowns the telnet server.
            </summary>
        </member>
        <member name="M:Rendition.TelnetServer.Start(System.String)">
            <summary>
            Starts the telnet server
            </summary>
            <param name="_local_ip_address">The IP Address to listen to connections on.</param>
        </member>
        <member name="M:Rendition.TelnetServer.StartListening">
            <summary>
            Starts listening for new connecitons.
            </summary>
        </member>
        <member name="M:Rendition.TelnetServer.AcceptCallback(System.IAsyncResult)">
            <summary>
            Accepts the async callback callback.
            </summary>
            <param name="ar">The ar.</param>
        </member>
        <member name="M:Rendition.TelnetServer.ReadCallback(System.IAsyncResult)">
            <summary>
            Reads the callback.
            </summary>
            <param name="ar">The ar.</param>
        </member>
        <member name="M:Rendition.TelnetServer.Send(System.Net.Sockets.Socket,System.String)">
            <summary>
            Sends a message to the specified handler.
            </summary>
            <param name="handler">The handler.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Rendition.TelnetServer.SendCallback(System.IAsyncResult)">
            <summary>
            Async callback from send.
            </summary>
            <param name="ar">The ar.</param>
        </member>
        <member name="T:Rendition.EmailClient">
            <summary>
            Low level email com (as low as this program goes)
            </summary>
        </member>
        <member name="M:Rendition.EmailClient.SendMessage(System.Net.Mail.MailAddress,System.Net.Mail.MailAddressCollection,System.Net.Mail.MailAddressCollection,System.Net.Mail.MailAddressCollection,System.String,System.String,System.String,System.Boolean,System.Net.Mail.SendCompletedEventHandler,System.String)">
            <summary>
            Sends the message.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="cc">The cc.</param>
            <param name="bcc">The BCC.</param>
            <param name="subject">The subject.</param>
            <param name="HtmlMessage">The HTML message.</param>
            <param name="textMessage">The text message.</param>
            <param name="isHtml">if set to <c>true</c> [is HTML].</param>
            <param name="sendCallback">The send callback.</param>
            <param name="asyncCallbackId">The async callback id.</param>
        </member>
        <member name="M:BarcodeLib.Symbologies.Interleaved2of5.Encode_Interleaved2of5">
            <summary>
            Encode the raw data using the Interleaved 2 of 5 algorithm.
            </summary>
        </member>
        <member name="M:BarcodeLib.Symbologies.Code11.Encode_Code11">
            <summary>
            Encode the raw data using the Code 11 algorithm.
            </summary>
        </member>
        <member name="M:BarcodeLib.Symbologies.MSI.Encode_MSI">
            <summary>
            Encode the raw data using the MSI algorithm.
            </summary>
        </member>
        <member name="M:BarcodeLib.Symbologies.ISBN.Encode_ISBN_Bookland">
            <summary>
            Encode the raw data using the Bookland/ISBN algorithm.
            </summary>
        </member>
        <member name="T:Rendition.Merchant">
            <summary>
            This contains all the public retail interaction with the site
            such as add to cart, place order and calculate lines
            Each method is designed to accept data from a JSON source using generic types
            </summary>
        </member>
        <member name="M:Rendition.Merchant.SetDiscountCode(System.String)">
            <summary>
            Sets the discount code.
            </summary>
            <param name="discountCode">The discount code.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.RemoveFromWishlist(System.String)">
            <summary>
            Removes from wishlist.
            </summary>
            <param name="itemNumber">The item number.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.AddToWishlist(System.String)">
            <summary>
            Adds to wishlist.
            </summary>
            <param name="itemNumber">The item number.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.UpdateCart(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Updates the cart.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.RefreshUserById(System.Int32)">
            <summary>
            Refreshes the user by id.
            </summary>
            <param name="userId">The user id.</param>
        </member>
        <member name="M:Rendition.Merchant.PrintOrder(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Prints the order.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Rendition.Merchant.GetGallery(System.String)">
            <summary>
            Gets the gallery.
            </summary>
            <param name="galleryId">The gallery id.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.LostPasswordEmail(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Send an email to help the user reset their password
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.GetOrders">
            <summary>
            Gets the orders.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.EmailAFriend(System.String,System.String,System.String)">
            <summary>
            Emails the item to a friend.
            </summary>
            <param name="itemNumber">The item number.</param>
            <param name="message">The message.</param>
            <param name="mailTo">The mail to.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.PlacedOrderEmail(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Sends an email to confirm placement of the order
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.SetReplyState(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Sets the state of the reply.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.RefreshSiteDataThreaded">
            <summary>
            Refreshes the site data, threaded.
            </summary>
        </member>
        <member name="M:Rendition.Merchant.RefreshSiteData">
            <summary>
            Refreshes the site data.
            </summary>
        </member>
        <member name="M:Rendition.Merchant.AddReply(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adds the reply to the object.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.AddReview(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adds the review.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.UpdateListMode(System.Int32)">
            <summary>
            Updates the list mode for the current session.
            </summary>
            <param name="list_mode">The list_mode.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.UpdateOrderBy(System.Int32)">
            <summary>
            Updates the order by mode for the current session.
            </summary>
            <param name="orderBy">The order by mode.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.UpdateRecordsPerPage(System.Int32)">
            <summary>
            Updates the records per page for the current session.
            </summary>
            <param name="records_per_page">The records_per_page.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.Recalculate(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Recalculates the specified order.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.AddToCart(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adds an item to cart.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.CreateAccount(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an account.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.LogOn(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Logon using the current session.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.LogOff(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Logoffs using the current session.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.EmptyCart(System.String)">
            <summary>
            Empties the cart of the current session.
            </summary>
            <param name="sessionId">The session id.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.UpdateCartItem(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Updates the cart item in the current session.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.UpdateOrderItem(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Updates an item already in an order.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.UpdateContact(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Updates the specified contact.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.PlaceOrder(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Places the order.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.DeleteCartItem(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Deletes the specified cart item.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.ResetPassword(System.String)">
            <summary>
            Resets the password of the account matching the email provided in the argument.
            An email will be sent to the account with the new randomly created password.
            </summary>
            <param name="email">The email.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.Merchant.ChangePassword(System.String,System.String)">
            <summary>
            Changes the password of the currently logged on user when the old password is provided.
            </summary>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <returns></returns>
        </member>
        <member name="T:BarcodeLib.BarcodeXML">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:BarcodeLib.BarcodeXML.BarcodeDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:BarcodeLib.BarcodeXML.BarcodeRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:BarcodeLib.BarcodeXML.BarcodeRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="M:BarcodeLib.Symbologies.ITF14.Encode_ITF14">
            <summary>
            Encode the raw data using the ITF-14 algorithm.
            </summary>
        </member>
        <member name="M:BarcodeLib.Symbologies.UPCSupplement5.Encode_UPCSupplemental_5">
            <summary>
            Encode the raw data using the UPC Supplemental 5-digit algorithm.
            </summary>
        </member>
        <member name="M:BarcodeLib.Symbologies.UPCE.#ctor(System.String)">
            <summary>
            Encodes a UPC-E symbol.
            </summary>
            <param name="input">Data to encode.</param>
        </member>
        <member name="M:BarcodeLib.Symbologies.UPCE.Encode_UPCE">
            <summary>
            Encode the raw data using the UPC-E algorithm.
            </summary>
        </member>
        <member name="T:Rendition.RewriteHtml">
            <summary>
            A response filter used with the URL rewrite directives.  Any 'error=0' directives will be treated as a response filter.
            </summary>
        </member>
        <member name="F:Rendition.RewriteHtml.OutputStream">
            <summary>
            The output stream
            </summary>
        </member>
        <member name="M:Rendition.RewriteHtml.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.RewriteHtml"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Rendition.RewriteHtml.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to the current stream using data read from buffer.
            </summary>
            <param name="buffer">The buffer to write data from.</param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin writing from.</param>
            <param name="count">The maximum number of bytes to write.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. For additional information see <see cref="P:System.IO.Stream.CanWrite"/>.-or- The current position is closer than <paramref name="count"/> bytes to the end of the stream, and the capacity cannot be modified. </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="offset"/> subtracted from the buffer length is less than <paramref name="count"/>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> are negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">The current stream instance is closed. </exception>
        </member>
        <member name="T:Rendition.MenuCollectionCode">
            <summary>
            Collection of strings that describe a herarchial menu structure in xHTML.
            An instance of this class can then be passed to an instance of
            Commerce menu's menuHierarchy method to create an HTML menu
            that uses the site's menu system.
            </summary>
        </member>
        <member name="F:Rendition.MenuCollectionCode.Menu">
            <summary>
            Main container 
            ( defaults to: { &lt;div,&gt;&lt;ul&gt;,&lt;/ul&gt;&lt;/div&gt; } )
            </summary>
        </member>
        <member name="F:Rendition.MenuCollectionCode.MenuItem">
            <summary>
            Container item ( defaults to: { &lt;li,&gt;,&lt;/li&gt; } )
            </summary>
        </member>
        <member name="F:Rendition.MenuCollectionCode.MenuLink">
            <summary>
            Link item ( defaults to: { &lt;a,&gt;,&lt;/a&gt; } )
            </summary>
        </member>
        <member name="F:Rendition.MenuCollectionCode.MenuRow">
            <summary>
            Used in creating menus that create tables.
            </summary>
        </member>
        <member name="F:Rendition.MenuCollectionCode.MenuClassName">
            <summary>
            class name of the main container
            </summary>
        </member>
        <member name="F:Rendition.MenuCollectionCode.MenuItemClassName">
            <summary>
            class name of the container item
            </summary>
        </member>
        <member name="F:Rendition.MenuCollectionCode.MenuMouseOver">
            <summary>
            menu mouse over event (e.g.: onmouseover="alert('blah');" )
            </summary>
        </member>
        <member name="F:Rendition.MenuCollectionCode.MenuMouseOut">
            <summary>
            menu mouse out event (e.g.: onmouseout="alert('blah');" )
            </summary>
        </member>
        <member name="F:Rendition.MenuCollectionCode.MenuClick">
            <summary>
            menu mouse click (e.g.: onmouseclick="alert('blah');" )
            </summary>
        </member>
        <member name="F:Rendition.MenuCollectionCode.MenuMouseDown">
            <summary>
            menu mouse down (e.g.: onmousedown="alert('blah');" )
            </summary>
        </member>
        <member name="F:Rendition.MenuCollectionCode.MenuMouseUp">
            <summary>
            menu mouse up (e.g.: onmouseup="alert('blah');" )
            </summary>
        </member>
        <member name="F:Rendition.MenuCollectionCode.MenuItemMouseOver">
            <summary>
            menu item mouse over (e.g.: onmouseover="alert('blah');" )
            </summary>
        </member>
        <member name="F:Rendition.MenuCollectionCode.MenuItemMouseOut">
            <summary>
            menu item mouse out (e.g.: onmouseout="alert('blah');" )
            </summary>
        </member>
        <member name="F:Rendition.MenuCollectionCode.MenuItemClick">
            <summary>
            menu item mouse click (e.g.: onmouseclick="alert('blah');" )
            </summary>
        </member>
        <member name="F:Rendition.MenuCollectionCode.MenuItemMouseDown">
            <summary>
            menu item mouse down (e.g.: onmousedown="alert('blah');" )
            </summary>
        </member>
        <member name="F:Rendition.MenuCollectionCode.MenuItemMouseUp">
            <summary>
            menu item mouse up (e.g.: onmouseup="alert('blah');" )
            </summary>
        </member>
        <member name="M:BarcodeLib.Symbologies.Postnet.Encode_Postnet">
            <summary>
            Encode the raw data using the PostNet algorithm.
            </summary>
        </member>
        <member name="M:BarcodeLib.Symbologies.Code93.#ctor(System.String)">
            <summary>
            Encodes with Code93.
            </summary>
            <param name="input">Data to encode.</param>
        </member>
        <member name="M:BarcodeLib.Symbologies.Code93.Encode_Code93">
            <summary>
            Encode the raw data using the Code 93 algorithm.
            </summary>
        </member>
        <member name="T:Rendition.NamespaceDoc">
            <summary>
            <para>
            Rendition HttpModule plugs into any .NET 4.0 website via the web.config file.
            You need rendtion database and an account on the server that has
            rights to write files into your web directory and rights to change
            IIS6 metabase via System.DirectoryServices.
            </para>
            <para>
            Once setup, Rendition subscribes to the beginRequest event and listens for
            certain requests and will replace or agument the data coming back from the
            server when specific requests take place.
            </para>
            <para>
            What requests does Rendition listen for?
            Requests made to the responder URL in your web.config file.
            Requests made to the Admin responder URL in your web.config file.
            Requests made to the adminDirectory URL in your web.config file.
            </para>
            <para>
            When a request is made any keys with the name matching 
            the pattern method[0-9]+ will be treated as JSON strings
            in the following pattern:
            </para>
            <code language="JavaScript">
            {
            	&lt;<i>Method Name</i>&gt;,
            	[
            		&lt;<i>Argument 1</i>&gt;,
            		&lt;<i>Argument 2</i>&gt;,
            		<i>...etc.</i>
            	]
            }
            </code>
            Example (in JSON):
            {"init",[]}
            <para>
            Example (raw URL):
            	<para>
            		method1=%7B%22init%22%2C%5B%5D%7D
            	</para>
            </para>
            Returns: (in JSON)
            <code language="JavaScript">
            {
            	"method1": {
            		"init": {
            			"site": {
            				"metaKeywords": "",
            				....etc.
            			}
            		}
            	}
            }
            </code>
            
            <para>
            All responses will return a JSON string, even errors.
            Using the browsers JSON.parse() function you can then see the result
            of the JSON string you sent to the server.  JSON string are returned
            in the following format:
            </para>
            <para>
            <b>method1%3d;</b>%7B;%22;methodName1%22;%2C;%5B;%5D;%7D;<b>&amp;method2%3d;</b>%7B;%22;methodName2%22;%2C;%5B;%5D;%7D;
            </para>
            <para>
            The return values will have the "method" name you used to call it
            so you can reassociate the methods you called after the AJAX callback.
            </para>
            <para>
            The methods are also call synchonously so you can create chains of commands
            that rely upon eachother.  The numbers used after the word method are
            not considered, only the order you send the key/pair values in matters.
            </para>
            <para>
            Some methods will not return a JSON string.  These methods return somthing
            else such as a binary image or a binary file.
            </para>
            <para>
            You can use POST or GET to access these methods.  This is very useful for
            the methods that return image data. You can make the SRC attribute
            of your image contain your "method" and the server will spit an
            image out.
            </para>
            <para>
            <legacyBold>Administative Responder vs. Public Responder</legacyBold>legacyBold>
            There are two responder URLs you can send requests to.  The public
            responder will only allow you to access static methods in the 
            Rendition.merchant class.   The Admin responder URL will only allow you
            to access static methods in the Rendition.Admin class.
            </para>
            <para>
            You can only access the Admin responder URL once you have logged in
            as an administrator.
            </para>
            <para>
            The last interaction Rendition makes is the Admin directory URL.
            </para>
            <para>
            Requets for the /Admin directory will bring you to the
            administrative JS suite, the core of this program.
            </para>
            <para>
            The Admin directory, and the files inside of it
            do not exist.  When a request for the Admin
            directory is detected the server will search a resource file inside
            of renditon.dll for a resource matching that name.  When a resource
            is found it is delivered to the browser as if it were a file in the
            file system.  The entire Admin JS suite works this way.  This way
            updates for the JS suite can be packaged with the DLL and there are
            fewer files to move around.  You can get access to most of the files
            in the resource.res by visiting /admin/debug.html.
            </para>
            <para>
            Due to these three directories being used by the HttpModule
            directories you create with the same names will not be
            accessable over the web.
            </para>
            </summary>
        </member>
        <member name="T:Rendition.SiteState">
            <summary>
            The state of the site.
            </summary>
        </member>
        <member name="T:Rendition.RenderItemImageEventArgs">
            <summary>
            When an item renders this event is raised.  You can subscribe to this event and modify the image
            and return the image to the system in its modified state.
            </summary>
        </member>
        <member name="F:Rendition.RenderItemImageEventArgs.Bitmap">
            <summary>
            The image currently being modified.
            </summary>
        </member>
        <member name="F:Rendition.RenderItemImageEventArgs.ItemDetailId">
            <summary>
            The itemDetailId in the database.
            </summary>
        </member>
        <member name="F:Rendition.RenderItemImageEventArgs.TemplateId">
            <summary>
            The templateId currently executing.
            </summary>
        </member>
        <member name="F:Rendition.RenderItemImageEventArgs.Item">
            <summary>
            The item being rendered or null when no item is involved (gallery images).
            </summary>
        </member>
        <member name="F:Rendition.RenderItemImageEventArgs.Session">
            <summary>
            The session that is rendering the images or null when no session is involved (automatic).
            </summary>
        </member>
        <member name="F:Rendition.RenderItemImageEventArgs.HttpContext">
            <summary>
            The HttpContext that is rendering the images or null when no HttpContext is involved (automatic).
            </summary>
        </member>
        <member name="M:Rendition.RenderItemImageEventArgs.#ctor(System.Drawing.Bitmap,System.Guid,System.Guid,Rendition.Commerce.Item,Rendition.Site.Session,System.Web.HttpContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.RenderItemImageEventArgs"/> class.
            </summary>
            <param name="bitmap">The bitmap.</param>
            <param name="itemDetailId">The item detail id.</param>
            <param name="templateId">The template id.</param>
            <param name="item">The item.</param>
            <param name="session">The session.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Rendition.PaymentGatewayEventArgs">
            <summary>
            Allows you to intercept, abort and replace credit card payments with your own method.
            </summary>
        </member>
        <member name="F:Rendition.PaymentGatewayEventArgs.BillToAddress">
            <summary>
            The bill to Address of the credit card.
            </summary>
        </member>
        <member name="F:Rendition.PaymentGatewayEventArgs.ShipToAddress">
            <summary>
            The ship to Address of the credit card.
            </summary>
        </member>
        <member name="F:Rendition.PaymentGatewayEventArgs.Card">
            <summary>
            The credit card.
            </summary>
        </member>
        <member name="F:Rendition.PaymentGatewayEventArgs.Amount">
            <summary>
            IMPORTANT! Amount being charged.
            </summary>
        </member>
        <member name="F:Rendition.PaymentGatewayEventArgs.OrderSession">
            <summary>
            The session this order belongs to if any.  Guid.Empty is used when no order session is present.
            </summary>
        </member>
        <member name="F:Rendition.PaymentGatewayEventArgs.Success">
            <summary>
            IMPORTANT! Was the transaction a success?  This is what you will need to set to tell the system the transaction was
            successfull.  If the transaction fails you can set this to false to prevent further transactions.
            </summary>
        </member>
        <member name="F:Rendition.PaymentGatewayEventArgs.Message">
            <summary>
            The error message passed back to the client as to why the transaction has failed.
            </summary>
        </member>
        <member name="F:Rendition.PaymentGatewayEventArgs.PreventDefault">
            <summary>
            IMPORTANT! Failure to set prevent default to true will cause the default credit card method to execute.
            So if you've subscribed to this event you should always set this boolean to true.
            </summary>
        </member>
        <member name="F:Rendition.PaymentGatewayEventArgs.OrderNumber">
            <summary>
            Order number if any or _VERY_ short description.  Should be unique (optional).
            </summary>
        </member>
        <member name="F:Rendition.PaymentGatewayEventArgs.PurchaseOrder">
            <summary>
            Purchase order associated with this transaction (optional).
            </summary>
        </member>
        <member name="F:Rendition.PaymentGatewayEventArgs.SqlConnection">
            <summary>
            The SQL connection.  Any access to the site database MUST use this connection.
            </summary>
        </member>
        <member name="F:Rendition.PaymentGatewayEventArgs.SqlTransaction">
            <summary>
            The SQL transaction. Any access to the site database MUST use this transaction.
            </summary>
        </member>
        <member name="M:Rendition.PaymentGatewayEventArgs.#ctor(Rendition.Commerce.Address,Rendition.Commerce.Address,Rendition.Commerce.CreditCard,System.Decimal,System.Guid,System.String,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.PaymentGatewayEventArgs"/> class.
            </summary>
            <param name="_billToAddress">The _bill to Address.</param>
            <param name="_shipToAddress">The _ship to Address.</param>
            <param name="_card">The _card.</param>
            <param name="_amount">The _amount.</param>
            <param name="_orderSession">The _order session.</param>
            <param name="_orderNumber">The _order number.</param>
            <param name="_purchaseOrder">The _purchase order.</param>
            <param name="_cn">The _CN.</param>
            <param name="_trans">The _trans.</param>
        </member>
        <member name="T:Rendition.CalculateDiscountEventArgs">
            <summary>
            Allows you to create a discount on an order.  Examine the vairables passed to you such
            as cart, user or order and return an amount in discount to set the discount amount on the order.
            </summary>
        </member>
        <member name="F:Rendition.CalculateDiscountEventArgs.Cart">
            <summary>
            The cart content of the current quote/order
            </summary>
        </member>
        <member name="F:Rendition.CalculateDiscountEventArgs.Session">
            <summary>
            The session this quote/order occurs on.
            </summary>
        </member>
        <member name="F:Rendition.CalculateDiscountEventArgs.User">
            <summary>
            The user that this quote/order belongs to if any.
            </summary>
        </member>
        <member name="F:Rendition.CalculateDiscountEventArgs.Order">
            <summary>
            The order being recalculated if any.
            </summary>
        </member>
        <member name="F:Rendition.CalculateDiscountEventArgs.Discount">
            <summary>
            The discount amount.
            </summary>
        </member>
        <member name="M:Rendition.CalculateDiscountEventArgs.#ctor(Rendition.Commerce.Cart,Rendition.Commerce.User,Rendition.Site.Session,Rendition.Commerce.Order)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.CalculateDiscountEventArgs"/> class.
            </summary>
            <param name="cart">The cart.</param>
            <param name="user">The user.</param>
            <param name="session">The session.</param>
            <param name="order">The order.</param>
        </member>
        <member name="T:Rendition.CreateEmailEventArgs">
            <summary>
            Allows you to take over the email creation process.  By defaul the site sends a very simplistic
            email to customers.  You can crate more elaborate emails by subscribing to this event and
            changing the event arguments.  It is also possible to abort emails using this event.
            </summary>
        </member>
        <member name="F:Rendition.CreateEmailEventArgs.User">
            <summary>
            The user being sent or requesting the email.
            </summary>
        </member>
        <member name="F:Rendition.CreateEmailEventArgs.Item">
            <summary>
            The item associated with this email (Stock events and email a friend)
            </summary>
        </member>
        <member name="F:Rendition.CreateEmailEventArgs.Order">
            <summary>
            The orders associated with this email or null.
            </summary>
        </member>
        <member name="F:Rendition.CreateEmailEventArgs.Session">
            <summary>
            The session associated with this email or null.
            </summary>
        </member>
        <member name="F:Rendition.CreateEmailEventArgs.Reply">
            <summary>
            The reply associated with this email or null.
            </summary>
        </member>
        <member name="F:Rendition.CreateEmailEventArgs.BlogEntry">
            <summary>
            The BlogEntry associated with this email or null.
            </summary>
        </member>
        <member name="F:Rendition.CreateEmailEventArgs.Review">
            <summary>
            The review associated with this email or null.
            </summary>
        </member>
        <member name="F:Rendition.CreateEmailEventArgs.MailFrom">
            <summary>
            Who is this email being sent from?
            </summary>
        </member>
        <member name="F:Rendition.CreateEmailEventArgs.MailTo">
            <summary>
            Who is this email being sent to?
            </summary>
        </member>
        <member name="F:Rendition.CreateEmailEventArgs.BCC">
            <summary>
            Who gets a blind carbon copy?
            </summary>
        </member>
        <member name="F:Rendition.CreateEmailEventArgs.AbortEmail">
            <summary>
            When set to true the email will be aborted and not entered into the email queue.
            </summary>
        </member>
        <member name="F:Rendition.CreateEmailEventArgs.EmailType">
            <summary>
            What type of email is this?  (e.g.: "orderConfermation", "emailAFriend", "lostPassword", "shipmentUpdate"
            </summary>
        </member>
        <member name="F:Rendition.CreateEmailEventArgs.UserComment">
            <summary>
            Comment made by the user. (emailAFriend).
            </summary>
        </member>
        <member name="F:Rendition.CreateEmailEventArgs.Subject">
            <summary>
            The subject of the email.
            </summary>
        </member>
        <member name="F:Rendition.CreateEmailEventArgs.MessageBody">
            <summary>
            The main email message.
            </summary>
        </member>
        <member name="F:Rendition.CreateEmailEventArgs.ShipmentUpdateArgs">
            <summary>
            Shipment Update Arguments if this is a shipment update.
            </summary>
        </member>
        <member name="M:Rendition.CreateEmailEventArgs.#ctor(System.String,System.String,System.String,System.String,Rendition.Commerce.User,Rendition.Site.Session,Rendition.Commerce.Order,Rendition.Commerce.Item,System.String,Rendition.ShipmentUpdateArgs,Rendition.Commerce.Reply,Rendition.Commerce.BlogEntry,Rendition.Commerce.Review)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.CreateEmailEventArgs"/> class.
            </summary>
            <param name="emailType">Type of the email.</param>
            <param name="mailFrom">The mail from.</param>
            <param name="mailTo">The mail to.</param>
            <param name="bcc">The BCC.</param>
            <param name="user">The user.</param>
            <param name="session">The session.</param>
            <param name="order">The order.</param>
            <param name="item">The item.</param>
            <param name="userComment">The user comment.</param>
            <param name="ShipmentUpdateArgs">The shipmentupdate args.</param>
            <param name="reply">The reply.</param>
            <param name="BlogEntry">The Blog entry.</param>
            <param name="review">The review.</param>
        </member>
        <member name="M:Rendition.CreateEmailEventArgs.#ctor(System.String,System.String,System.String,System.String,Rendition.Commerce.User,Rendition.Site.Session,Rendition.Commerce.Order,Rendition.Commerce.Item,System.String,Rendition.ShipmentUpdateArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.CreateEmailEventArgs"/> class.
            </summary>
            <param name="emailType">Type of the email.</param>
            <param name="mailFrom">The mail from.</param>
            <param name="mailTo">The mail to.</param>
            <param name="bcc">The BCC.</param>
            <param name="user">The user.</param>
            <param name="session">The session.</param>
            <param name="order">The order.</param>
            <param name="item">The item.</param>
            <param name="userComment">The user comment.</param>
            <param name="ShipmentUpdateArgs">The shipmentupdate args.</param>
        </member>
        <member name="M:Rendition.CreateEmailEventArgs.#ctor(System.String,System.String,System.String,System.String,Rendition.Commerce.User,Rendition.Site.Session,Rendition.Commerce.Order)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.CreateEmailEventArgs"/> class.
            </summary>
            <param name="emailType">Type of the email.</param>
            <param name="mailFrom">The mail from.</param>
            <param name="mailTo">The mail to.</param>
            <param name="bcc">The BCC.</param>
            <param name="user">The user.</param>
            <param name="session">The session.</param>
            <param name="order">The order.</param>
        </member>
        <member name="M:Rendition.CreateEmailEventArgs.#ctor(System.String,System.String,System.String,System.String,Rendition.Commerce.User,Rendition.Site.Session,Rendition.Commerce.Order,Rendition.ShipmentUpdateArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.CreateEmailEventArgs"/> class.
            </summary>
            <param name="emailType">Type of the email.</param>
            <param name="mailFrom">The mail from.</param>
            <param name="mailTo">The mail to.</param>
            <param name="bcc">The BCC.</param>
            <param name="user">The user.</param>
            <param name="session">The session.</param>
            <param name="order">The order.</param>
            <param name="ShipmentUpdateArgs">The shipmentupdate args.</param>
        </member>
        <member name="M:Rendition.CreateEmailEventArgs.#ctor(System.String,System.String,System.String,System.String,Rendition.Commerce.User,Rendition.Site.Session,Rendition.Commerce.Item,Rendition.Commerce.Review)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.CreateEmailEventArgs"/> class.
            </summary>
            <param name="emailType">Type of the email.</param>
            <param name="mailFrom">The mail from.</param>
            <param name="mailTo">The mail to.</param>
            <param name="bcc">The BCC.</param>
            <param name="user">The user.</param>
            <param name="session">The session.</param>
            <param name="item">The item.</param>
            <param name="review">The review.</param>
        </member>
        <member name="M:Rendition.CreateEmailEventArgs.#ctor(System.String,System.String,System.String,System.String,Rendition.Commerce.User,Rendition.Site.Session,Rendition.Commerce.Reply,Rendition.Commerce.BlogEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.CreateEmailEventArgs"/> class.
            </summary>
            <param name="emailType">Type of the email.</param>
            <param name="mailFrom">The mail from.</param>
            <param name="mailTo">The mail to.</param>
            <param name="bcc">The BCC.</param>
            <param name="user">The user.</param>
            <param name="session">The session.</param>
            <param name="reply">The reply.</param>
            <param name="BlogEntry">The Blog entry.</param>
        </member>
        <member name="T:Rendition.CreateUserEventArgs">
            <summary>
            When a user is created this event is raised.  You can subscribe to this even to watch it happen.
            You cannot interact in any meaningful way other than to execute code related to the event.
            </summary>
        </member>
        <member name="F:Rendition.CreateUserEventArgs.User">
            <summary>
            The new user.
            </summary>
        </member>
        <member name="F:Rendition.CreateUserEventArgs.Session">
            <summary>
            The session that created the user.
            </summary>
        </member>
        <member name="F:Rendition.CreateUserEventArgs.HttpContext">
            <summary>
            The HttpContext of the session that created the user.
            </summary>
        </member>
        <member name="M:Rendition.CreateUserEventArgs.#ctor(Rendition.Commerce.User,Rendition.Site.Session,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Web.HttpContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.CreateUserEventArgs"/> class.
            </summary>
            <param name="user">The user.</param>
            <param name="session">The session.</param>
            <param name="cn">The cn.</param>
            <param name="trns">The TRNS.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Rendition.CreateItemEventArgs">
            <summary>
            When an item is created this event is raised.  You can subscribe to this even to watch it happen.
            You cannot interact in any meaningful way other than to execute code related to the event.
            </summary>
        </member>
        <member name="F:Rendition.CreateItemEventArgs.Item">
            <summary>
            The item being created.
            </summary>
        </member>
        <member name="F:Rendition.CreateItemEventArgs.Session">
            <summary>
            The session that created the item or null if none.
            </summary>
        </member>
        <member name="F:Rendition.CreateItemEventArgs.HttpContext">
            <summary>
            The HttpContext of the seesion that created the item.
            </summary>
        </member>
        <member name="M:Rendition.CreateItemEventArgs.#ctor(Rendition.Commerce.Item,Rendition.Site.Session,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Web.HttpContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.CreateItemEventArgs"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="session">The session.</param>
            <param name="cn">The cn.</param>
            <param name="trns">The TRNS.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Rendition.EndRequestEventArgs">
            <summary>
            At the end of HTTP request this event is raised.
            </summary>
        </member>
        <member name="F:Rendition.EndRequestEventArgs.Session">
            <summary>
            The session ending the request.
            </summary>
        </member>
        <member name="F:Rendition.EndRequestEventArgs.HttpContext">
            <summary>
            The HtttpContext of the session ending the request.
            </summary>
        </member>
        <member name="M:Rendition.EndRequestEventArgs.#ctor(Rendition.Site.Session,System.Web.HttpContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.EndRequestEventArgs"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Rendition.BeginRequestEventArgs">
            <summary>
            At the begining of each request this event is raised after the user has created a session.
            </summary>
        </member>
        <member name="F:Rendition.BeginRequestEventArgs.Session">
            <summary>
            The session starting.
            </summary>
        </member>
        <member name="F:Rendition.BeginRequestEventArgs.HttpContext">
            <summary>
            The HttpContext of the session.
            </summary>
        </member>
        <member name="M:Rendition.BeginRequestEventArgs.#ctor(Rendition.Site.Session,System.Web.HttpContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.BeginRequestEventArgs"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Rendition.UIInitArgs">
            <summary>
            Occurs when a users starts the JavaScript user interface.
            </summary>
        </member>
        <member name="F:Rendition.UIInitArgs.StartupParameters">
            <summary>
            Parameters to pass to the Rendition class before it starts up.
            </summary>
        </member>
        <member name="F:Rendition.UIInitArgs.StartupProcedure">
            <summary>
            Function to execute after the inital callback (before the UI loads).
            This is the function body, not the entire function.  There are two
            parameters [Rendition, parameters].  Rendition is the Rendition JS
            object, parameters is the JSON object passed back from the server
            during the init function.
            </summary>
        </member>
        <member name="T:Rendition.ShipmentUpdateArgs">
            <summary>
            Shipment updated event occurs when a status of shipped occurs.
            </summary>
        </member>
        <member name="F:Rendition.ShipmentUpdateArgs.Order">
            <summary>
            Order that was shipped
            </summary>
        </member>
        <member name="F:Rendition.ShipmentUpdateArgs.Id">
            <summary>
            Id of the shipment update record
            </summary>
        </member>
        <member name="F:Rendition.ShipmentUpdateArgs.ShipmentNumber">
            <summary>
            Shipment number
            </summary>
        </member>
        <member name="F:Rendition.ShipmentUpdateArgs.Tracking">
            <summary>
            Tracking number
            </summary>
        </member>
        <member name="F:Rendition.ShipmentUpdateArgs.DateShipped">
            <summary>
            Date shipped
            </summary>
        </member>
        <member name="F:Rendition.ShipmentUpdateArgs.ActualWeight">
            <summary>
            Actual weight
            </summary>
        </member>
        <member name="F:Rendition.ShipmentUpdateArgs.ActualService">
            <summary>
            Actual service
            </summary>
        </member>
        <member name="F:Rendition.ShipmentUpdateArgs.ActualCost">
            <summary>
            Actual cost
            </summary>
        </member>
        <member name="F:Rendition.ShipmentUpdateArgs.ActualBilledWeight">
            <summary>
            Actual billed weight
            </summary>
        </member>
        <member name="F:Rendition.ShipmentUpdateArgs.PackageLength">
            <summary>
            Package length
            </summary>
        </member>
        <member name="F:Rendition.ShipmentUpdateArgs.PackageWidth">
            <summary>
            Package width
            </summary>
        </member>
        <member name="F:Rendition.ShipmentUpdateArgs.PackageHeight">
            <summary>
            Package height
            </summary>
        </member>
        <member name="F:Rendition.ShipmentUpdateArgs.ThirdPartyAccount">
            <summary>
            Third party account number used if any
            </summary>
        </member>
        <member name="F:Rendition.ShipmentUpdateArgs.VoidStatus">
            <summary>
            If this shipment was voided
            </summary>
        </member>
        <member name="F:Rendition.ShipmentUpdateArgs.AddDate">
            <summary>
            Date this shipment update record was added
            </summary>
        </member>
        <member name="F:Rendition.ShipmentUpdateArgs.AbortDefaultEmail">
            <summary>
            when true the default email is not sent
            </summary>
        </member>
        <member name="F:Rendition.ShipmentUpdateArgs.SqlConnection">
            <summary>
            The sql connection
            </summary>
        </member>
        <member name="F:Rendition.ShipmentUpdateArgs.SqlTransaction">
            <summary>
            The sql transaction
            </summary>
        </member>
        <member name="M:Rendition.ShipmentUpdateArgs.#ctor(Rendition.Commerce.Order,System.Guid,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.ShipmentUpdateArgs"/> class.
            </summary>
            <param name="_order">The _order.</param>
            <param name="_id">The _id.</param>
            <param name="_shipmentNumber">The _shipment number.</param>
            <param name="_tracking">The _tracking.</param>
            <param name="_dateShipped">The _date shipped.</param>
            <param name="_actualWeight">The _actual weight.</param>
            <param name="_actualService">The _actual service.</param>
            <param name="_actualCost">The _actual cost.</param>
            <param name="_actualBilledWeight">The _actual billed weight.</param>
            <param name="_packageLength">Length of the _package.</param>
            <param name="_packageWidth">Width of the _package.</param>
            <param name="_packageHeight">Height of the _package.</param>
            <param name="_thirdPartyAccount">The _third party account.</param>
            <param name="_voidStatus">The _void status.</param>
            <param name="_addDate">The _add date.</param>
        </member>
        <member name="T:Rendition.LogOffEventArgs">
            <summary>
            When a user logs off this event is raised. 
            </summary>
        </member>
        <member name="F:Rendition.LogOffEventArgs.Session">
            <summary>
            The session of the user logging off.
            </summary>
        </member>
        <member name="F:Rendition.LogOffEventArgs.HttpContext">
            <summary>
            The HttpContext of the user logging off.
            </summary>
        </member>
        <member name="M:Rendition.LogOffEventArgs.#ctor(Rendition.Site.Session,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Web.HttpContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.LogOffEventArgs"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="cn">The cn.</param>
            <param name="trns">The TRNS.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Rendition.LogOnEventArgs">
            <summary>
            This event is raised when a user logs on to the system.
            </summary>
        </member>
        <member name="F:Rendition.LogOnEventArgs.Session">
            <summary>
            The session that logged on.
            </summary>
        </member>
        <member name="F:Rendition.LogOnEventArgs.HttpContext">
            <summary>
            The HttpContext of the session logging on.
            </summary>
        </member>
        <member name="M:Rendition.LogOnEventArgs.#ctor(Rendition.Site.Session,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Web.HttpContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.LogOnEventArgs"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="cn">The cn.</param>
            <param name="trns">The TRNS.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Rendition.StatusChangeEventArgs">
            <summary>
            This event is raised when a status change occurs in an order, shipment order line.
            You can subscribe to this event to make other things happen when this status change occurs.
            Fire off emails make other status changes and everything.
            </summary>
        </member>
        <member name="F:Rendition.StatusChangeEventArgs.PreviousFlagStatus">
            <summary>
            The previous status of the object that was just changed.
            </summary>
        </member>
        <member name="F:Rendition.StatusChangeEventArgs.NewFlagStatus">
            <summary>
            The new status of the object that was just changed.
            </summary>
        </member>
        <member name="F:Rendition.StatusChangeEventArgs.PreviousFlagId">
            <summary>
            The previous flag id (dbo.objectFlags PK).
            </summary>
        </member>
        <member name="F:Rendition.StatusChangeEventArgs.NewFlagId">
            <summary>
            The new flag id (dbo.objectFlags PK).
            </summary>
        </member>
        <member name="F:Rendition.StatusChangeEventArgs.ObjectType">
            <summary>
            Type of object, can be order, shipment or line.
            </summary>
        </member>
        <member name="F:Rendition.StatusChangeEventArgs.ObjectId">
            <summary>
            The id of the order, shipment or line.
            </summary>
        </member>
        <member name="F:Rendition.StatusChangeEventArgs.SqlConnection">
            <summary>
            Current SQL connection.
            </summary>
        </member>
        <member name="F:Rendition.StatusChangeEventArgs.SqlTransaction">
            <summary>
            Current SQL Transaction. 
            </summary>
        </member>
        <member name="M:Rendition.StatusChangeEventArgs.#ctor(System.String,System.String,System.Int32,System.Int32,System.Guid,System.Guid,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.StatusChangeEventArgs"/> class.
            </summary>
            <param name="objectType">Type of the object.</param>
            <param name="objectId">The object id.</param>
            <param name="previousFlagStatus">The previous flag status.</param>
            <param name="newFlagStatus">The new flag status.</param>
            <param name="previousFlagId">The previous flag id.</param>
            <param name="newFlagId">The new flag id.</param>
            <param name="cn">The cn.</param>
            <param name="trans">The trans.</param>
        </member>
        <member name="T:Rendition.AfterplaceorderEventArgs">
            <summary>
            This event is raised after an order has been placed.
            </summary>
        </member>
        <member name="F:Rendition.AfterplaceorderEventArgs.Order">
            <summary>
            The recently placed order.
            </summary>
        </member>
        <member name="F:Rendition.AfterplaceorderEventArgs.Session">
            <summary>
            The session that placed this order if any.
            </summary>
        </member>
        <member name="F:Rendition.AfterplaceorderEventArgs.HttpContext">
            <summary>
            The HttpContext if any.
            </summary>
        </member>
        <member name="M:Rendition.AfterplaceorderEventArgs.#ctor(Rendition.Commerce.Order,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,Rendition.Site.Session,System.Web.HttpContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.AfterplaceorderEventArgs"/> class.
            </summary>
            <param name="order">The order.</param>
            <param name="cn">The cn.</param>
            <param name="trans">The trans.</param>
            <param name="session">The session.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Rendition.PlaceOrderEventArgs">
            <summary>
            This event occurs directly before an order is placed.
            </summary>
        </member>
        <member name="F:Rendition.PlaceOrderEventArgs.Cart">
            <summary>
            The cart of the order being placed.
            </summary>
        </member>
        <member name="F:Rendition.PlaceOrderEventArgs.Session">
            <summary>
            The session of the order being placed.
            </summary>
        </member>
        <member name="F:Rendition.PlaceOrderEventArgs.HttpContext">
            <summary>
            The HttpContext of the order being placed if any.
            </summary>
        </member>
        <member name="M:Rendition.PlaceOrderEventArgs.#ctor(Rendition.Commerce.Cart,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,Rendition.Site.Session,System.Web.HttpContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.PlaceOrderEventArgs"/> class.
            </summary>
            <param name="cart">The cart.</param>
            <param name="cn">The cn.</param>
            <param name="trans">The trans.</param>
            <param name="session">The session.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Rendition.RecalculateCartEventArgs">
            <summary>
            This event is raised when the cart/quote is recalculated.
            </summary>
        </member>
        <member name="F:Rendition.RecalculateCartEventArgs.Cart">
            <summary>
            The cart being recalculated.
            </summary>
        </member>
        <member name="F:Rendition.RecalculateCartEventArgs.Session">
            <summary>
            The session that the cart belongs to.
            </summary>
        </member>
        <member name="F:Rendition.RecalculateCartEventArgs.HttpContext">
            <summary>
            The HttpContext that the session belongs to if any.
            </summary>
        </member>
        <member name="F:Rendition.RecalculateCartEventArgs.RecalculateArgs">
            <summary>
            The HttpContext that the session belongs to if any.
            </summary>
        </member>
        <member name="M:Rendition.RecalculateCartEventArgs.#ctor(Rendition.Commerce.Cart,Rendition.Site.Session,System.Web.HttpContext,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.RecalculateCartEventArgs"/> class.
            </summary>
            <param name="cart">The cart.</param>
            <param name="session">The session.</param>
            <param name="context">The context.</param>
            <param name="recalculateArgs">The recalculate args.</param>
        </member>
        <member name="T:Rendition.RecalculateOrderEventArgs">
            <summary>
            This event is raised when the confirmed order is recalculated.
            </summary>
        </member>
        <member name="F:Rendition.RecalculateOrderEventArgs.dictionaryKeys">
            <summary>
            Recalculation arguments.
            </summary>
        </member>
        <member name="F:Rendition.RecalculateOrderEventArgs.SqlConnection">
            <summary>
            SQL connection.
            </summary>
        </member>
        <member name="F:Rendition.RecalculateOrderEventArgs.SqlTransaction">
            <summary>
            SQL Transaction.
            </summary>
        </member>
        <member name="F:Rendition.RecalculateOrderEventArgs.Session">
            <summary>
            The session doing the recalculation.
            </summary>
        </member>
        <member name="F:Rendition.RecalculateOrderEventArgs.HttpContext">
            <summary>
            The HttpContext of the session doing the recalculation.
            </summary>
        </member>
        <member name="F:Rendition.RecalculateOrderEventArgs.Order">
            <summary>
            The order being recalculated.
            </summary>
        </member>
        <member name="M:Rendition.RecalculateOrderEventArgs.#ctor(Rendition.Commerce.Order,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},Rendition.Site.Session,System.Web.HttpContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.RecalculateOrderEventArgs"/> class.
            </summary>
            <param name="order">The order.</param>
            <param name="cn">The cn.</param>
            <param name="trans">The trans.</param>
            <param name="args">The args.</param>
            <param name="session">The session.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Rendition.BeforeAddToCartEventArgs">
            <summary>
            This event occurs just before the item is added to the cart
            </summary>
        </member>
        <member name="F:Rendition.BeforeAddToCartEventArgs.Item">
            <summary>
            The item being added
            </summary>
        </member>
        <member name="F:Rendition.BeforeAddToCartEventArgs.Session">
            <summary>
            The session the item is being added to
            </summary>
        </member>
        <member name="F:Rendition.BeforeAddToCartEventArgs.HttpContext">
            <summary>
            The HttpContext of the session
            </summary>
        </member>
        <member name="M:Rendition.BeforeAddToCartEventArgs.#ctor(Rendition.Commerce.Item,Rendition.Site.Session,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Web.HttpContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.BeforeAddToCartEventArgs"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="session">The session.</param>
            <param name="cn">The cn.</param>
            <param name="trns">The TRNS.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Rendition.AddtocartEventArgs">
            <summary>
            This event is raised when an item is added to the cart.
            </summary>
        </member>
        <member name="F:Rendition.AddtocartEventArgs.SqlConnection">
            <summary>
            The SQL connection.
            </summary>
        </member>
        <member name="F:Rendition.AddtocartEventArgs.SqlTransaction">
            <summary>
            The SQL transaction.
            </summary>
        </member>
        <member name="F:Rendition.AddtocartEventArgs.Item">
            <summary>
            The CartItem added.
            </summary>
        </member>
        <member name="F:Rendition.AddtocartEventArgs.Cart">
            <summary>
            The cart the item was added to.
            </summary>
        </member>
        <member name="F:Rendition.AddtocartEventArgs.Session">
            <summary>
            The session adding the item.
            </summary>
        </member>
        <member name="F:Rendition.AddtocartEventArgs.HttpContext">
            <summary>
            The HttpContext of the session adding the item if any.
            </summary>
        </member>
        <member name="M:Rendition.AddtocartEventArgs.#ctor(Rendition.Commerce.CartItem,Rendition.Commerce.Cart,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,Rendition.Site.Session,System.Web.HttpContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.AddtocartEventArgs"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="cart">The cart.</param>
            <param name="cn">The cn.</param>
            <param name="trns">The TRNS.</param>
            <param name="session">The session.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Rendition.DisposeEventArgs">
            <summary>
            This event is raised when the site is going down.
            </summary>
        </member>
        <member name="F:Rendition.DisposeEventArgs.Site">
            <summary>
            The site.
            </summary>
        </member>
        <member name="F:Rendition.DisposeEventArgs.HttpContext">
            <summary>
            The HttpContext if any.
            </summary>
        </member>
        <member name="M:Rendition.DisposeEventArgs.#ctor(Rendition.Site,System.Web.HttpContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.DisposeEventArgs"/> class.
            </summary>
            <param name="site">The site.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Rendition.TimerEventArgs">
            <summary>
            This class allows you to create a timed event that will execute every x miliseconds.
            </summary>
        </member>
        <member name="F:Rendition.TimerEventArgs.SqlConnection">
            <summary>
            The SQL connection.
            </summary>
        </member>
        <member name="F:Rendition.TimerEventArgs.SqlTransaction">
            <summary>
            The SQL transaction.
            </summary>
        </member>
        <member name="F:Rendition.TimerEventArgs.LastRun">
            <summary>
            The last time this event was run.
            </summary>
        </member>
        <member name="F:Rendition.TimerEventArgs.TaskId">
            <summary>
            The taskId.
            </summary>
        </member>
        <member name="F:Rendition.TimerEventArgs.Name">
            <summary>
            The name of this event.
            </summary>
        </member>
        <member name="F:Rendition.TimerEventArgs.LastErrorId">
            <summary>
            The last error id this event returned.
            </summary>
        </member>
        <member name="F:Rendition.TimerEventArgs.LastErrorJson">
            <summary>
            The last error JSON this event returned.
            </summary>
        </member>
        <member name="M:Rendition.TimerEventArgs.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.DateTime,System.Guid,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.TimerEventArgs"/> class.
            </summary>
            <param name="cn">The cn.</param>
            <param name="trns">The TRNS.</param>
            <param name="lastRun">The last run.</param>
            <param name="taskId">The task id.</param>
            <param name="name">The name.</param>
            <param name="lastErrorId">The last error id.</param>
            <param name="lastErrorJSON">The last error JSON.</param>
        </member>
        <member name="T:Rendition.LineUpdateEventArgs">
            <summary>
            Occurs when a line item is updated in an order.
            </summary>
        </member>
        <member name="F:Rendition.LineUpdateEventArgs.Line">
            <summary>
            The line item being updated.
            </summary>
        </member>
        <member name="F:Rendition.LineUpdateEventArgs.Order">
            <summary>
            The order the item belongs to.
            </summary>
        </member>
        <member name="F:Rendition.LineUpdateEventArgs.SqlConnection">
            <summary>
            The SQL connection currently in use to update these items.
            </summary>
        </member>
        <member name="F:Rendition.LineUpdateEventArgs.SqlTransaction">
            <summary>
            The SQL transaction currently in use if any.
            </summary>
        </member>
        <member name="T:Rendition.InitEventArgs">
            <summary>
            This event is raised when the site starts up.
            </summary>
        </member>
        <member name="F:Rendition.InitEventArgs.Site">
            <summary>
            The stie.
            </summary>
        </member>
        <member name="F:Rendition.InitEventArgs.HttpContext">
            <summary>
            The HttpContext of the session starting the site.
            </summary>
        </member>
        <member name="M:Rendition.InitEventArgs.#ctor(Rendition.Site,System.Web.HttpContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.InitEventArgs"/> class.
            </summary>
            <param name="site">The site.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Rendition.AddToCartArguments">
            <summary>
            Adding to the cart requires that you have at least the keys "qty" and "itemNumber".
            Any keys associated with the items form should be sent in the dictionary.
            Obviously the form cannot contain the keys that the base item contains.
            </summary>
        </member>
        <member name="M:Rendition.AddToCartArguments.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.AddToCartArguments"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rendition.AddToCartArguments.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.AddToCartArguments"/> class.
            </summary>
        </member>
        <member name="T:Rendition.OrderArguments">
            <summary>
            Fill out as many keys as you can.  If no sessionId key is provided the current session will be used.
            Defaults will be attempted, but without the correct information you cannot place an order.
            </summary>
        </member>
        <member name="M:Rendition.OrderArguments.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.OrderArguments"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rendition.OrderArguments.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.OrderArguments"/> class.
            </summary>
        </member>
        <member name="T:Rendition.ProgressInfo">
            <summary>
            This class hold information about file transfer
            to display on the user's upload dialog.
            A circular AJAX script is used on the client
            to interogate the server for this information.
            </summary>
        </member>
        <member name="F:Rendition.ProgressInfo.TimerId">
            <summary>
            id of the upload instance
            </summary>
        </member>
        <member name="F:Rendition.ProgressInfo.CurrentItemName">
            <summary>
            current item (file) name being uploaded
            </summary>
        </member>
        <member name="F:Rendition.ProgressInfo.TotalItemCount">
            <summary>
            total item (file) count
            </summary>
        </member>
        <member name="F:Rendition.ProgressInfo.CurrentItemCount">
            <summary>
            current item (file) count
            </summary>
        </member>
        <member name="F:Rendition.ProgressInfo.TotalItemSize">
            <summary>
            Total item (upload) size
            </summary>
        </member>
        <member name="F:Rendition.ProgressInfo.CurrentItemSize">
            <summary>
            Current item (file) size (individual item progress)
            </summary>
        </member>
        <member name="F:Rendition.ProgressInfo.CurrentSizeComplete">
            <summary>
            Current size (upload) complete (total upload progress)
            </summary>
        </member>
        <member name="F:Rendition.ProgressInfo.Complete">
            <summary>
            When true, the upload is complete
            </summary>
        </member>
        <member name="F:Rendition.ProgressInfo.Started">
            <summary>
            When the upload started
            </summary>
        </member>
        <member name="F:Rendition.ProgressInfo.Updated">
            <summary>
            Last time the upload object was updated
            </summary>
        </member>
        <member name="F:Rendition.ProgressInfo.UploadedFiles">
            <summary>
            List of files uploaded
            </summary>
        </member>
        <member name="M:Rendition.ProgressInfo.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.ProgressInfo"/> class.
            </summary>
            <param name="_timerId">The _timer id.</param>
        </member>
        <member name="M:BarcodeLib.Symbologies.JAN13.Encode_JAN13">
            <summary>
            Encode the raw data using the JAN-13 algorithm.
            </summary>
        </member>
        <member name="T:BarcodeLib.Barcode">
            <summary>
            This class was designed to give developers and easy way to generate a barcode image from a string of data.
            </summary>
        </member>
        <member name="M:BarcodeLib.Barcode.#ctor">
            <summary>
            Default constructor.  Does not populate the raw data.  MUST be done via the RawData property before encoding.
            </summary>
        </member>
        <member name="M:BarcodeLib.Barcode.#ctor(System.String)">
            <summary>
            Constructor. Populates the raw data. No whitespace will be added before or after the barcode.
            </summary>
            <param name="data">String to be encoded.</param>
        </member>
        <member name="M:BarcodeLib.Barcode.Encode(BarcodeLib.TYPE,System.String,System.Int32,System.Int32)">
            <summary>
            Encodes the raw data into binary form representing bars and spaces.  Also generates an Image of the barcode.
            </summary>
            <param name="iType">Type of encoding to use.</param>
            <param name="StringToEncode">Raw data to encode.</param>
            <param name="Width">Width of the resulting barcode.(pixels)</param>
            <param name="Height">Height of the resulting barcode.(pixels)</param>
            <returns>Image representing the barcode.</returns>
        </member>
        <member name="M:BarcodeLib.Barcode.Encode(BarcodeLib.TYPE,System.String,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Encodes the raw data into binary form representing bars and spaces.  Also generates an Image of the barcode.
            </summary>
            <param name="iType">Type of encoding to use.</param>
            <param name="StringToEncode">Raw data to encode.</param>
            <param name="DrawColor">Foreground color</param>
            <param name="BackColor">Background color</param>
            <param name="Width">Width of the resulting barcode.(pixels)</param>
            <param name="Height">Height of the resulting barcode.(pixels)</param>
            <returns>Image representing the barcode.</returns>
        </member>
        <member name="M:BarcodeLib.Barcode.Encode(BarcodeLib.TYPE,System.String,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Encodes the raw data into binary form representing bars and spaces.  Also generates an Image of the barcode.
            </summary>
            <param name="iType">Type of encoding to use.</param>
            <param name="StringToEncode">Raw data to encode.</param>
            <param name="DrawColor">Foreground color</param>
            <param name="BackColor">Background color</param>
            <returns>Image representing the barcode.</returns>
        </member>
        <member name="M:BarcodeLib.Barcode.Encode(BarcodeLib.TYPE,System.String)">
            <summary>
            Encodes the raw data into binary form representing bars and spaces.  Also generates an Image of the barcode.
            </summary>
            <param name="iType">Type of encoding to use.</param>
            <param name="StringToEncode">Raw data to encode.</param>
            <returns>Image representing the barcode.</returns>
        </member>
        <member name="M:BarcodeLib.Barcode.Encode(BarcodeLib.TYPE)">
            <summary>
            Encodes the raw data into binary form representing bars and spaces.  Also generates an Image of the barcode.
            </summary>
            <param name="iType">Type of encoding to use.</param>
        </member>
        <member name="M:BarcodeLib.Barcode.Encode">
            <summary>
            Encodes the raw data into binary form representing bars and spaces.
            </summary>
        </member>
        <member name="M:BarcodeLib.Barcode.Generate_Image">
            <summary>
            Gets a bitmap representation of the encoded data.
            </summary>
            <returns>Bitmap of encoded value.</returns>
        </member>
        <member name="M:BarcodeLib.Barcode.GetImageData(BarcodeLib.SaveTypes)">
            <summary>
            Gets the bytes that represent the image.
            </summary>
            <param name="savetype">File type to put the data in before returning the bytes.</param>
            <returns>Bytes representing the encoded image.</returns>
        </member>
        <member name="M:BarcodeLib.Barcode.SaveImage(System.String,BarcodeLib.SaveTypes)">
            <summary>
            Saves an encoded image to a specified file and type.
            </summary>
            <param name="Filename">Filename to save to.</param>
            <param name="FileType">Format to use.</param>
        </member>
        <member name="M:BarcodeLib.Barcode.SaveImage(System.IO.Stream,BarcodeLib.SaveTypes)">
            <summary>
            Saves an encoded image to a specified stream.
            </summary>
            <param name="stream">Stream to write image to.</param>
            <param name="FileType">Format to use.</param>
        </member>
        <member name="M:BarcodeLib.Barcode.GetSizeOfImage(System.Double@,System.Double@,System.Boolean)">
            <summary>
            Returns the size of the EncodedImage in real world coordinates (millimeters or inches).
            </summary>
            <param name="Width">Width of the image in the specified coordinates.</param>
            <param name="Height">Height of the image in the specified coordinates.</param>
            <param name="Metric">Millimeters if true, otherwise Inches.</param>
            <returns></returns>
        </member>
        <member name="M:BarcodeLib.Barcode.Label_UPCA(System.Drawing.Image)">
            <summary>
            Draws Label for UPC-A barcodes (NOT COMPLETE)
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:BarcodeLib.Barcode.DoEncode(BarcodeLib.TYPE,System.String)">
            <summary>
            Encodes the raw data into binary form representing bars and spaces.  Also generates an Image of the barcode.
            </summary>
            <param name="iType">Type of encoding to use.</param>
            <param name="Data">Raw data to encode.</param>
            <returns>Image representing the barcode.</returns>
        </member>
        <member name="M:BarcodeLib.Barcode.DoEncode(BarcodeLib.TYPE,System.String,System.String@)">
            <summary>
            Encodes the raw data into binary form representing bars and spaces.  Also generates an Image of the barcode.
            </summary>
            <param name="iType">Type of encoding to use.</param>
            <param name="Data">Raw data to encode.</param>
            <param name="XML">XML representation of the data and the image of the barcode.</param>
            <returns>Image representing the barcode.</returns>
        </member>
        <member name="M:BarcodeLib.Barcode.DoEncode(BarcodeLib.TYPE,System.String,System.Boolean)">
            <summary>
            Encodes the raw data into binary form representing bars and spaces.  Also generates an Image of the barcode.
            </summary>
            <param name="iType">Type of encoding to use.</param>
            <param name="Data">Raw data to encode.</param>
            <param name="IncludeLabel">Include the label at the bottom of the image with data encoded.</param>
            <returns>Image representing the barcode.</returns>
        </member>
        <member name="M:BarcodeLib.Barcode.DoEncode(BarcodeLib.TYPE,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Encodes the raw data into binary form representing bars and spaces.  Also generates an Image of the barcode.
            </summary>
            <param name="iType">Type of encoding to use.</param>
            <param name="data">Raw data to encode.</param>
            <param name="IncludeLabel">Include the label at the bottom of the image with data encoded.</param>
            <param name="Width">Width of the resulting barcode.(pixels)</param>
            <param name="Height">Height of the resulting barcode.(pixels)</param>
            <returns>Image representing the barcode.</returns>
        </member>
        <member name="M:BarcodeLib.Barcode.DoEncode(BarcodeLib.TYPE,System.String,System.Boolean,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Encodes the raw data into binary form representing bars and spaces.  Also generates an Image of the barcode.
            </summary>
            <param name="iType">Type of encoding to use.</param>
            <param name="Data">Raw data to encode.</param>
            <param name="IncludeLabel">Include the label at the bottom of the image with data encoded.</param>
            <param name="DrawColor">Foreground color</param>
            <param name="BackColor">Background color</param>
            <returns>Image representing the barcode.</returns>
        </member>
        <member name="M:BarcodeLib.Barcode.DoEncode(BarcodeLib.TYPE,System.String,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Encodes the raw data into binary form representing bars and spaces.  Also generates an Image of the barcode.
            </summary>
            <param name="iType">Type of encoding to use.</param>
            <param name="Data">Raw data to encode.</param>
            <param name="IncludeLabel">Include the label at the bottom of the image with data encoded.</param>
            <param name="DrawColor">Foreground color</param>
            <param name="BackColor">Background color</param>
            <param name="Width">Width of the resulting barcode.(pixels)</param>
            <param name="Height">Height of the resulting barcode.(pixels)</param>
            <returns>Image representing the barcode.</returns>
        </member>
        <member name="M:BarcodeLib.Barcode.DoEncode(BarcodeLib.TYPE,System.String,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int32,System.String@)">
            <summary>
            Encodes the raw data into binary form representing bars and spaces.  Also generates an Image of the barcode.
            </summary>
            <param name="iType">Type of encoding to use.</param>
            <param name="Data">Raw data to encode.</param>
            <param name="IncludeLabel">Include the label at the bottom of the image with data encoded.</param>
            <param name="DrawColor">Foreground color</param>
            <param name="BackColor">Background color</param>
            <param name="Width">Width of the resulting barcode.(pixels)</param>
            <param name="Height">Height of the resulting barcode.(pixels)</param>
            <param name="XML">XML representation of the data and the image of the barcode.</param>
            <returns>Image representing the barcode.</returns>
        </member>
        <member name="P:BarcodeLib.Barcode.RawData">
            <summary>
            Gets or sets the raw data to encode.
            </summary>
        </member>
        <member name="P:BarcodeLib.Barcode.EncodedValue">
            <summary>
            Gets the encoded value.
            </summary>
        </member>
        <member name="P:BarcodeLib.Barcode.Country_Assigning_Manufacturer_Code">
            <summary>
            Gets the Country that assigned the Manufacturer Code.
            </summary>
        </member>
        <member name="P:BarcodeLib.Barcode.EncodedType">
            <summary>
            Gets or sets the Encoded Type (ex. UPC-A, EAN-13 ... etc)
            </summary>
        </member>
        <member name="P:BarcodeLib.Barcode.EncodedImage">
            <summary>
            Gets the Image of the generated barcode.
            </summary>
        </member>
        <member name="P:BarcodeLib.Barcode.ForeColor">
            <summary>
            Gets or sets the color of the bars. (Default is black)
            </summary>
        </member>
        <member name="P:BarcodeLib.Barcode.BackColor">
            <summary>
            Gets or sets the background color. (Default is white)
            </summary>
        </member>
        <member name="P:BarcodeLib.Barcode.LabelFont">
            <summary>
            Gets or sets the label font. (Default is Microsoft Sans Serif, 10pt, Bold)
            </summary>
        </member>
        <member name="P:BarcodeLib.Barcode.LabelPosition">
            <summary>
            Gets or sets the location of the label in relation to the barcode. (BOTTOMCENTER is default)
            </summary>
        </member>
        <member name="P:BarcodeLib.Barcode.RotateFlipType">
            <summary>
            Gets or sets the degree in which to rotate/flip the image.(No action is default)
            </summary>
        </member>
        <member name="P:BarcodeLib.Barcode.Width">
            <summary>
            Gets or sets the width of the image to be drawn. (Default is 300 pixels)
            </summary>
        </member>
        <member name="P:BarcodeLib.Barcode.Height">
            <summary>
            Gets or sets the height of the image to be drawn. (Default is 150 pixels)
            </summary>
        </member>
        <member name="P:BarcodeLib.Barcode.IncludeLabel">
            <summary>
            Gets or sets whether a label should be drawn below the image.
            </summary>
        </member>
        <member name="P:BarcodeLib.Barcode.EncodingTime">
            <summary>
            Gets or sets the amount of time in milliseconds that it took to encode and draw the barcode.
            </summary>
        </member>
        <member name="P:BarcodeLib.Barcode.XML">
            <summary>
            Gets the XML representation of the Barcode data and image.
            </summary>
        </member>
        <member name="P:BarcodeLib.Barcode.ImageFormat">
            <summary>
            Gets or sets the image format to use when encoding and returning images. (Jpeg is default)
            </summary>
        </member>
        <member name="P:BarcodeLib.Barcode.Errors">
            <summary>
            Gets the list of errors encountered.
            </summary>
        </member>
        <member name="P:BarcodeLib.Barcode.Alignment">
            <summary>
            Gets or sets the alignment of the barcode inside the image. (Not for Postnet or ITF-14)
            </summary>
        </member>
        <member name="P:BarcodeLib.Barcode.Version">
            <summary>
            Gets the assembly version information.
            </summary>
        </member>
        <member name="M:BarcodeLib.Symbologies.UPCSupplement2.Encode_UPCSupplemental_2">
            <summary>
            Encode the raw data using the UPC Supplemental 2-digit algorithm.
            </summary>
        </member>
        <member name="T:Rendition.Plugin">
            <summary>
            This class allows other DLLs to attach to event handlers in this DLL.
            This is the basis for the plugin system.  All plugins must inherit this class.
            </summary>
        </member>
        <member name="F:Rendition.Plugin.Message">
            <summary>
            Last return message.
            </summary>
        </member>
        <member name="F:Rendition.Plugin.Error">
            <summary>
            Last return error number.
            </summary>
        </member>
        <member name="F:Rendition.Plugin.Info">
            <summary>
            Info about this plugin. 
            </summary>
        </member>
        <member name="T:Rendition.PluginTypes">
            <summary>
            What type of plugins are acceptable in this system.
            </summary>
        </member>
        <member name="F:Rendition.PluginTypes.SiteEvent">
            <summary>
            An event handler in ISiteInterface
            </summary>
        </member>
        <member name="T:Rendition.PluginInfo">
            <summary>
            Absolutly required of all plugins.  If you don't provide a name, description, Author, version and publish
            date your plugin will not get instantiated (not true, but I wish it was).
            </summary>
        </member>
        <member name="F:Rendition.PluginInfo.Name">
            <summary>
            Name of the plugin.  Like "Change status for Jim's Cogs".
            </summary>
        </member>
        <member name="F:Rendition.PluginInfo.Description">
            <summary>
            What the plugin actually does.
            </summary>
        </member>
        <member name="F:Rendition.PluginInfo.Author">
            <summary>
            Who is to blame for this plugin.
            </summary>
        </member>
        <member name="F:Rendition.PluginInfo.Version">
            <summary>
            The version of this plugin.
            </summary>
        </member>
        <member name="F:Rendition.PluginInfo.PublishDate">
            <summary>
            The date this most recent version was published.
            </summary>
        </member>
        <member name="M:BarcodeLib.Symbologies.UPCA.Encode_UPCA">
            <summary>
            Encode the raw data using the UPC-A algorithm.
            </summary>
        </member>
        <member name="T:Rendition.Setup">
            <summary>
            Setup contains all the static methods needed to install Rendition on 'this' IIS instance
            or any other IIS instance this machine can auth and talk to via pipes (SQL,AD,Local/UNC/FTP).
            </summary>
        </member>
        <member name="M:Rendition.Setup.BeginInstall(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Begins the install.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rendition.Setup.ProgressInfo">
            <summary>
            gets progress info generated during file uploads using the upload class.
            Wrapper for Admin.ProgressInfo - when called via this method it always sends Guid.Empty as an Id
            </summary>
            <returns>{
            	ProgressInfo as a JSON object
            }</returns>
        </member>
        <member name="M:Rendition.Setup.GetASM(System.String)">
            <summary>
            Gets the resource from refrence/setup/.
            </summary>
            <param name="ASMName">Name of the obj.</param>
            <returns>resouce from Rendition.Properties.Setup_Resources</returns>
        </member>
        <member name="M:Rendition.Setup.Init">
            <summary>
            This method gets called when the setup page initalizes.
            </summary>
            <returns>{
            	serverVariables: Request.ServerVariables json,
            	splash: setup splash,
            	ending: setup ending
            }</returns>
        </member>
        <member name="M:Rendition.Setup.GetSQLInfo(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Shows authentication and a list of the databases and server version.
            </summary>
            <param name="args">{
            	ip:&gt;server ip/host name&lt;,
            	name:&gt;logon Name&lt;,
            	password:&gt;logon password&lt;
            }</param>
            <returns>{
            	authenticated:boolean,
            	databaseExists:boolean,
            	databases:[string],
            	error:int,
            	desc:string
            }</returns>
        </member>
        <member name="M:Rendition.Setup.GetIISInfo(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Shows authentication and a list of the web sites and IIS version.
            </summary>
            <param name="args">{
            	ip:&gt;server ip/host name&lt;,
            	name:&gt;logon Name&lt;,
            	domain:&gt;logon Name&lt;,
            	password:&gt;logon password&lt;
            }</param>
            <returns>{
            	authenticated:boolean,
            	error:int,
            	desc:string
            }</returns>
        </member>
        <member name="M:Rendition.Setup.GetDirectoryInfo(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Shows authentication and if args.createDirectory == true will create the directory on the target.
            </summary>
            <param name="args">{
            	path:&gt;path to home directory from this machine&lt;,
            	name:&gt;logon Name&lt;,
            	domain:&gt;logon Name&lt;,
            	password:&gt;logon password&lt;,
            	createDirectory:&gt;boolean&lt;
            }</param>
            <returns>{
            	authenticated:boolean,
            	directoryExists:boolean,
            	error:int,
            	desc:string
            }</returns>
        </member>
        <member name="M:Rendition.Setup.WriteReferenceDirectory(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Writes the 'reference' web site from the res file in the Rendition.dll and the web.config file.
            </summary>
            <param name="args">{
            path:&gt;path to copy to&lt;,
            name:&gt;logon Name&lt;,
            domain:&gt;logon Name&lt;,
            password:&gt;logon password&lt;,
            createDirectory:&gt;boolean&lt;
            }</param>
            <returns>{
            error:int,
            desc:string
            }</returns>
        </member>
        <member name="M:Rendition.Setup.WriteDatabase(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Runs the setup_sql_install.sql script on a SQL server.
            </summary>
            <param name="args">{
            	ip:&gt;server ip/host name&lt;,
            	name:&gt;logon Name&lt;,
            	password:&gt;logon password&lt;,
            	newAdminPassword:&gt;logon password&lt;,
            	databaseName:&gt;logon password&lt;,
            	overwrite:&gt;logon password&lt;
            }</param>
            <returns>{
            	error:int,
            	desc:string
            }</returns>
        </member>
        <member name="M:Rendition.Setup.WriteIISSite(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates or modifies an existing IIS entry using Directory Services
            so it contains the wildcard script mapping, application name and some
            other stuff that you'll just have to read the source to find out about.
            If you 'overwrite site' it will first remove the site with the same name
            from the meta base then add the new site.  If you don't select overwrite
            any sites with the same name will get 'updated'.  If the site does not
            exsit it will create it.
            </summary>
            <param name="args">{
            	site:&gt;new site name&lt;,
            	name:&gt;logon Name&lt;,
            	domain:&gt;logon Name&lt;,
            	password:&gt;logon password&lt;,
            	overwriteSite:&gt;boolean&lt;
            }</param>
            <returns>{
            	error:int,
            	desc:string
            }</returns>
        </member>
        <member name="M:BarcodeLib.Symbologies.Standard2of5.Encode_Standard2of5">
            <summary>
            Encode the raw data using the Standard 2 of 5 algorithm.
            </summary>
        </member>
        <member name="M:BarcodeLib.Symbologies.EAN13.Encode_EAN13">
            <summary>
            Encode the raw data using the EAN-13 algorithm. (Can include the checksum already.  If it doesnt exist in the data then it will calculate it for you.  Accepted data lengths are 12 + 1 checksum or just the 12 data digits)
            </summary>
        </member>
        <member name="T:Rendition.ListOptions">
            <summary>
            Options used for creating the listing page.
            You don't have to use this class or list to
            create item lists.  They are just a utility
            to help lessen the amount of tedious tasks
            you may encounter when setting up your web
            site.
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.RequestRecordsPerPage">
            <summary>
            the request key for records per page.
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.RequestOrderBy">
            <summary>
            The order by mode request key.
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.RequestListMode">
            <summary>
            The listing mode request key.
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.RequestCategory">
            <summary>
            The request key for the category name.
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.RequestFilter">
            <summary>
            The request key for the filter.
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.RequestSearch">
            <summary>
            The request key search
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.RequestPage">
            <summary>
            The request key for the page selector.
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.RequestPrice">
            <summary>
            The request key for the price filter.
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.NoItemsFoundRedirect">
            <summary>
            The URL to direct to when no items are present in the list.
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.ScriptName">
            <summary>
            The script name to use in the links.
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.OrderMessageFeaturedItem">
            <summary>
            The text to appear for "Featured Items".
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.OrderMessagePriceLowToHigh">
            <summary>
            The text to appear for "Order By Price Low to High".
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.OrderMessagePriceHighToLow">
            <summary>
            The text to appear for "Order By Price High to Low".
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.OrderMessageShortDescAtoZ">
            <summary>
            The text to appear for "Order By Description A-Z".
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.OrderMessageShortDescZtoA">
            <summary>
            The text to appear for "Order By Description Z-A".
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.CategoryNameRegEx">
            <summary>
            The string to find in the category name
            in order to make the URL more human readable.
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.CategoryNameRegExReplace">
            <summary>
            The string to replace with in the category name
            in order to make the URL more human readable.
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.PriceFilterFormat">
            <summary>
            String to place in the price filter
            {0} = low, {1} = high, {2} = count.
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.PriceFilterLowestFormat">
            <summary>
            String to place in the
            first, lowest price filter
            {0} = low, {1} = high, {2} = count.
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.PriceFilterHighestFormat">
            <summary>
            String to place in the
            last, highest price filter
            {0} = low, {1} = high, {2} = count.
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.PropertyFilterFormat">
            <summary>
            The string to place in the
            'filter for' link text.
            {0} will be replaced by the value.
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.PropertyFilterFormatTitle">
            <summary>
            The string to place in the
            'filter for' link title.
            {0} will be replaced by the value.
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.PropertyFilterValueRemoveFormat">
            <summary>
            The string to place in the
            'remove filter' link.
            {0} will be replaced by the value.
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.PropertyFilterRemoveFormat">
            <summary>
            The string to place in the
            'remove filter' link text.
            {0} will be replaced by
            the value.
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.PropertyFilterRemoveTitle">
            <summary>
            The string to place in the
            'remove filter' link title.
            {0} will be replaced by
            the value.
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.PropertyFilterRemovePrice">
            <summary>
            The string to place in the
            'remove price filter' link.
            </summary>
        </member>
        <member name="F:Rendition.ListOptions.PriceRanges">
            <summary>
            The range of prices 
            that will appear in 
            the price filter.
            </summary>
        </member>
        <member name="T:Rendition.List">
            <summary>
            Utility for creating item lists in HTML pages.
            Creates a list object based on HttpContext Request variables.  
            Used to create item lists from categories and searches.
            Provides items, category data, search data, filters,
            price filters and other utilities. 
            You don't have to use this class or list to
            create item lists.  It is just a utility
            to help lessen the amount of tedious tasks
            you may encounter when setting up your web
            site.
            </summary>
        </member>
        <member name="F:Rendition.List.Category">
            <summary>
            The category loaded.
            </summary>
        </member>
        <member name="F:Rendition.List.Options">
            <summary>
            The options in use for this listing.
            </summary>
        </member>
        <member name="F:Rendition.List.PriceRanges">
            <summary>
            List of price range filters
            </summary>
        </member>
        <member name="F:Rendition.List.PriceFilterLinks">
            <summary>
            List of price filters in this list.
            </summary>
        </member>
        <member name="F:Rendition.List.RemoveFilterLinks">
            <summary>
            List of selected filters in this list.
            </summary>
        </member>
        <member name="F:Rendition.List.FilterLinks">
            <summary>
            List of filters avalible in this list.
            </summary>
        </member>
        <member name="F:Rendition.List.HasPriceFilters">
            <summary>
            When true, this list has price filters that can filter items in the list.
            </summary>
        </member>
        <member name="F:Rendition.List.HasRemoveFilters">
            <summary>
            When true, this list has filters that have been selected.
            </summary>
        </member>
        <member name="F:Rendition.List.HasFilters">
            <summary>
            When true, this list has filters that can filter items in the list.
            </summary>
        </member>
        <member name="F:Rendition.List.CategoryName">
            <summary>
            The category selected  (e.g.: Missile parts)
            </summary>
        </member>
        <member name="F:Rendition.List.ListType">
            <summary>
            Name of listing selected (search or category )
            </summary>
        </member>
        <member name="F:Rendition.List.ListTypeValue">
            <summary>
            The value of the listing critera (e.g.: category name or search terms)
            </summary>
        </member>
        <member name="F:Rendition.List.OrderByName">
            <summary>
            Name of the order by method
            </summary>
        </member>
        <member name="F:Rendition.List.Page">
            <summary>
            Page currently on.
            </summary>
        </member>
        <member name="F:Rendition.List.NextPage">
            <summary>
            The next page
            </summary>
        </member>
        <member name="F:Rendition.List.PrevPage">
            <summary>
            The previous page
            </summary>
        </member>
        <member name="F:Rendition.List.To">
            <summary>
            Rage of items to
            </summary>
        </member>
        <member name="F:Rendition.List.From">
            <summary>
            Range of items from
            </summary>
        </member>
        <member name="F:Rendition.List.TotalPages">
            <summary>
            Total pages in this category
            </summary>
        </member>
        <member name="F:Rendition.List.Filter">
            <summary>
            Filter string in this list
            </summary>
        </member>
        <member name="F:Rendition.List.ItemList">
            <summary>
            list of items in this category
            </summary>
        </member>
        <member name="F:Rendition.List.Properties">
            <summary>
            List of Properties in this category
            </summary>
        </member>
        <member name="F:Rendition.List.Search">
            <summary>
            The string being searched for if any.
            </summary>
        </member>
        <member name="M:Rendition.List.GetReviewStars(Rendition.Commerce.Item,System.Int32)">
            <summary>
            Gets the review stars.
            </summary>
            <param name="i">The i.</param>
            <param name="displayMode">0: display just the stars, 1: Display with the text description.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.List.GetPriceFilters(System.Collections.Generic.List{Rendition.Commerce.Item},System.Collections.Generic.List{System.Decimal})">
            <summary>
            Refreshes the price filters based on the list of items fed to it
            used in the list class to create and then filter lists of items.
            </summary>
            <param name="item_list">The item_list.</param>
            <param name="priceRanges">The price ranges.</param>
            <returns></returns>
        </member>
        <member name="M:Rendition.List.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.List"/> class using default query string and script names.
            </summary>
        </member>
        <member name="M:Rendition.List.#ctor(Rendition.ListOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Rendition.List"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:Rendition.List.InitList(Rendition.ListOptions)">
            <summary>
            Listing options.
            </summary>
            <param name="_options">The _options.</param>
        </member>
        <member name="P:Rendition.List.Menu">
            <summary>
            The menu this list will display.
            When no entry is found the entry
            named Default will be used.
            </summary>
        </member>
        <member name="P:Rendition.List.Section">
            <summary>
            The site section of this list.
            When no section is found matching
            this list the section named Default
            will be used.
            </summary>
        </member>
        <member name="P:Rendition.List.Meta">
            <summary>
            The meta title, descriptions and keywords.
            When no meta entry is found the entry
            named Default will be used.
            </summary>
        </member>
        <member name="P:Rendition.List.PriceFilterTable">
            <summary>
            A list of price filters for this list.
            </summary>
            <value>The filter table.</value>
        </member>
        <member name="P:Rendition.List.RemoveFilterTable">
            <summary>
            Gets the remove filter table.
            </summary>
            <value>The remove filter table.</value>
        </member>
        <member name="P:Rendition.List.FilterTable">
            <summary>
            A list of filters for this list in a table with the class filtertable.
            </summary>
            <value>The filter table.</value>
        </member>
        <member name="M:BarcodeLib.Symbologies.Telepen.#ctor(System.String)">
            <summary>
            Encodes data using the Telepen algorithm.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:BarcodeLib.Symbologies.Telepen.Encode_Telepen">
            <summary>
            Encode the raw data using the Telepen algorithm.
            </summary>
        </member>
        <member name="M:BarcodeLib.Symbologies.Code39.#ctor(System.String)">
            <summary>
            Encodes with Code39.
            </summary>
            <param name="input">Data to encode.</param>
        </member>
        <member name="M:BarcodeLib.Symbologies.Code39.#ctor(System.String,System.Boolean)">
            <summary>
            Encodes with Code39.
            </summary>
            <param name="input">Data to encode.</param>
            <param name="AllowExtended">Allow Extended Code 39 (Full Ascii mode).</param>
        </member>
        <member name="M:BarcodeLib.Symbologies.Code39.Encode_Code39">
            <summary>
            Encode the raw data using the Code 39 algorithm.
            </summary>
        </member>
        <member name="M:BarcodeLib.Symbologies.Code128.#ctor(System.String)">
            <summary>
            Encodes data in Code128 format.
            </summary>
            <param name="input">Data to encode.</param>
        </member>
        <member name="M:BarcodeLib.Symbologies.Code128.#ctor(System.String,BarcodeLib.Symbologies.Code128.TYPES)">
            <summary>
            Encodes data in Code128 format.
            </summary>
            <param name="input">Data to encode.</param>
            <param name="type">Type of encoding to lock to. (Code 128A, Code 128B, Code 128C)</param>
        </member>
    </members>
</doc>
